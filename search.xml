<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows版Marginnote 3 阅读神器之BookxNote Pro</title>
      <link href="/posts/%E5%B7%A5%E5%85%B7/BookxNote-Pro/"/>
      <url>/posts/%E5%B7%A5%E5%85%B7/BookxNote-Pro/</url>
      
        <content type="html"><![CDATA[<h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><p>经常在iPad使用Marginnote 3阅读神器来阅读PDF以及生成脑图和思维导图，而MarginNote 3仅支持苹果 Mac (macOS) 和 iPad (iOS) 平台。希望windows平台也能有iPad上MarginNote 3那样的阅读体验，经过寻找终于找到一款BookxNote Pro 的软件，功能与 MarginNote 类似，算得上 Win / 安卓上的「MarginNote」软件。</p><h1 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h1><p>官网:<a href="http://www.bookxnote.com/">http://www.bookxnote.com/</a></p><h1 id="2、相关网站"><a href="#2、相关网站" class="headerlink" title="2、相关网站"></a>2、相关网站</h1><ul><li>Windows上用MarginNote功能<br><a href="https://zhuanlan.zhihu.com/p/643161943">https://zhuanlan.zhihu.com/p/643161943</a></li></ul><ul><li>Windows版Marginnote 3 阅读神器之BookxNote Pro<br><a href="https://blog.csdn.net/qq_33850482/article/details/122554571">https://blog.csdn.net/qq_33850482/article/details/122554571</a></li></ul><ul><li>使用坚果云对笔记数据进行多端同步<br><a href="https://support.qq.com/products/332617/blog/506567">https://support.qq.com/products/332617/blog/506567</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> BookxNote Pro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式Linux 入门与常识</title>
      <link href="/posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
      <url>/posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是Linux应用程序？"><a href="#一、什么是Linux应用程序？" class="headerlink" title="一、什么是Linux应用程序？"></a>一、什么是Linux应用程序？</h1><ul><li>运行在Linux操作系统用户空间的程序</li><li>内核程序运行在内核空间、应用程序运行在用户空间<blockquote><p>比如在终端下执行各种命令ls cd pwd ps等运行在用户空间</p></blockquote></li><li>内核空间和用户空间</li></ul><h1 id="二、应用程序和驱动程序、单片机程序有何不同？"><a href="#二、应用程序和驱动程序、单片机程序有何不同？" class="headerlink" title="二、应用程序和驱动程序、单片机程序有何不同？"></a>二、应用程序和驱动程序、单片机程序有何不同？</h1><h2 id="2-1-与驱动程序的不同"><a href="#2-1-与驱动程序的不同" class="headerlink" title="2.1 与驱动程序的不同"></a>2.1 与驱动程序的不同</h2><ul><li><p>所在空间不同</p><blockquote><p>应用程序运行在用户空间、驱动程序运行在内核空间</p></blockquote></li><li><p>功能、作用不同</p><blockquote><p>应用程序完成的是业务逻辑、驱动程序完成的是底层硬件操作逻辑</p></blockquote></li><li><p>编译方式</p><blockquote><p>驱动程序可编译成模块或内置到内核，但都需要依赖内核源码进行编译</p></blockquote><blockquote><p>应用程序单独编译</p></blockquote><h2 id="2-2-与单片机程序的不同"><a href="#2-2-与单片机程序的不同" class="headerlink" title="2.2 与单片机程序的不同"></a>2.2 与单片机程序的不同</h2><p>单片机程序是逻辑程序，没有操作系统的概念</p><p>单片机程序是硬件驱动+业务逻辑的集合，程序是整体编译</p></li></ul><h1 id="三、如何编写Linux应用程序"><a href="#三、如何编写Linux应用程序" class="headerlink" title="三、如何编写Linux应用程序"></a>三、如何编写Linux应用程序</h1><h2 id="3-1系统调用"><a href="#3-1系统调用" class="headerlink" title="3.1系统调用"></a>3.1系统调用</h2><p>Linux操作系统向应用层提供的接口，system call,是Linux应用层进入内核空间的入口</p><h2 id="3-2库函数：标准C库函数"><a href="#3-2库函数：标准C库函数" class="headerlink" title="3.2库函数：标准C库函数"></a>3.2库函数：标准C库函数</h2><p>对系统调用的封装，在效率和使用便利性方面有提供</p><h2 id="3-3不要局限于编程语言"><a href="#3-3不要局限于编程语言" class="headerlink" title="3.3不要局限于编程语言"></a>3.3不要局限于编程语言</h2><p>可通过C/C++、Python、Shell、Qt来编写应用程序</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libmodbus库开发笔记01：Windows下编译libmodbus</title>
      <link href="/posts/%E5%BC%80%E6%BA%90%E5%BA%93/libmodbus/"/>
      <url>/posts/%E5%BC%80%E6%BA%90%E5%BA%93/libmodbus/</url>
      
        <content type="html"><![CDATA[<h1 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h1><p>操作系统：<code>Windows 10 21Hz </code></p><p>开发环境：<code>VS 2015 update3</code></p><p>&#x20;其他辅助工具:</p><ul><li>  串口调试助手：<a href="http://www.cmsoft.cn/resource/101.html">UartAssist V5.0.3.16</a></li><li>  虚拟串口：<code>Virtual Serial Port Driver Pro 9.0(简称VSPD 9.0)</code></li><li>  串口监控精灵：<code>CommMonitor10.0.3</code></li><li>  模拟<code>Modbus</code>协议主机的上位机软件:<code>Modbus Poll 7.0.1</code></li><li>  模拟<code>Modbus</code>协议从机的上位机软件:<code>Modbus Slave6.1.3</code></li></ul><p>模拟<code>Modbus</code>协议上位机软件的替代软件：<a href="https://github.com/ClassicDIY/ModbusTool">https://github.com/ClassicDIY/ModbusTool</a></p><blockquote><p><code>modbus</code>软件使用参考：<a href="https://blog.csdn.net/u012749085/article/details/125270869">https://blog.csdn.net/u012749085/article/details/125270869</a></p></blockquote><h1 id="2、编译libmodbus"><a href="#2、编译libmodbus" class="headerlink" title="2、编译libmodbus"></a>2、编译<code>libmodbus</code></h1><h2 id="2-1-运行准备"><a href="#2-1-运行准备" class="headerlink" title="2.1 运行准备"></a>2.1 运行准备</h2><p>双击运行<code>libmodbus\src\win32\configure.js</code>文件，直到提示<code>modbus-version.h created.</code></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/libmodbus_configure.png"></p><h2 id="2-2-生成32位dll"><a href="#2-2-生成32位dll" class="headerlink" title="2.2 生成32位dll"></a>2.2 生成32位dll</h2><h3 id="2-2-1-打开modbus-9-sln项目"><a href="#2-2-1-打开modbus-9-sln项目" class="headerlink" title="2.2.1 打开modbus-9.sln项目"></a>2.2.1 打开<code>modbus-9.sln</code>项目</h3><p><code>Win10</code>系统使用<code>VS 2015</code>打开<code>libmodbus</code>软件库下的，<code>libmodbus\src\win32\modbus-9.sln</code>。</p><blockquote><p>注意：需要对<code>modbus-9.sln</code>进行迁移</p></blockquote><h3 id="2-2-2-生成dll"><a href="#2-2-2-生成dll" class="headerlink" title="2.2.2 生成dll"></a>2.2.2 生成dll</h3><p>首先选择平台版本，选择<code>Win32</code>，然后选择项目右键点击生成，等待一会。</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/%E7%94%9F%E6%88%90libmodbus_dll.png"></p><p>生成的dll路径如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/libmodbus_dll_32.png"></p><h2 id="2-3-生成64位dll"><a href="#2-3-生成64位dll" class="headerlink" title="2.3 生成64位dll"></a>2.3 生成64位dll</h2><h3 id="2-3-1-打开modbus-9-sln项目"><a href="#2-3-1-打开modbus-9-sln项目" class="headerlink" title="2.3.1 打开modbus-9.sln项目"></a>2.3.1 打开<code>modbus-9.sln</code>项目</h3><p><code>Win10</code>系统使用<code>VS 2015</code>打开<code>libmodbus</code>软件库下的，<code>libmodbus\src\win32\modbus-9.sln</code>。</p><blockquote><p>注意：需要对<code>modbus-9.sln</code>进行升级</p></blockquote><h3 id="2-3-2-生成dll"><a href="#2-3-2-生成dll" class="headerlink" title="2.3.2 生成dll"></a>2.3.2 生成dll</h3><p>首先选择平台版本，选择<code>x64</code>，然后选择项目右键点击生成。将会提示如下图的错误提示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/%E7%94%9F%E6%88%9064%E4%BD%8Ddll%E6%8A%A5%E9%94%99.png"></p><p>解决步骤：<br>（1）项目右键属性-&gt;配置属性-&gt;常规-&gt;项目默认值-&gt;项目类型改为动态库(.dll)。配置过程如下图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/libmodbus_64_%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%9E%8B.png"><br>（2））项目右键属性-&gt;链接器-&gt;输入-&gt;附加依赖项 添加<code>ws2_32.lib</code>。配置过程如下图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/libmodbus_64_error.png"></p><p>成功生成dll,结果请看下图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/libmodbus_64_dll.png"></p><h1 id="3、示例代码"><a href="#3、示例代码" class="headerlink" title="3、示例代码"></a>3、示例代码</h1><p>(1)由于没有现成的<code>Modbus</code>设备或者第二台计算机。那么虚拟串口就是必须的。这里使用虚拟串口(VSPD)绑定一对串口,不做解释。<br>(2)运行模拟<code>Modbus</code>协议从机的上位机软件,进行配置。<br>modbus slave上位机软件串口配置，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/modbus_slave_serial.png"></p><p><code>Modbus</code>协议从站地址配置与数据设置，如下图所示： <img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/modbus_slave_Defintion.png"></p><p>(3)使用<code>VS 2015</code>新建一个项目,项目框架如下图：</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/libmodbus%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6.png"></p><p>Modbus协议从机示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;include/modbus.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> _MSC_VER == 1900  <span class="hljs-comment">//Microsoft的C编译器的版本,1900表示VS 2015</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> _DEBUG</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;lib/modbus.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">modbus_t</span>* ctx;<br><br><span class="hljs-keyword">uint16_t</span> tab_reg[<span class="hljs-number">64</span>];<br><br><span class="hljs-comment">//打开</span><br>ctx = <span class="hljs-built_in">modbus_new_rtu</span>(<span class="hljs-string">&quot;COM4&quot;</span>, <span class="hljs-number">9600</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">modbus_connect</span>(ctx) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Connection failed: %s\n&quot;</span>,<br><span class="hljs-built_in">modbus_strerror</span>(errno));<br><span class="hljs-built_in">modbus_free</span>(ctx);<br><br>&#125;<br><span class="hljs-comment">//打开调试模式</span><br><span class="hljs-built_in">modbus_set_debug</span>(ctx, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">modbus_set_response_timeout</span>(ctx, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//设置响应时间</span><br><br><span class="hljs-comment">//设置从机地址</span><br><span class="hljs-built_in">modbus_set_slave</span>(ctx, <span class="hljs-number">200</span>);<br><br><span class="hljs-keyword">for</span> (;;)<br>&#123;<br><span class="hljs-keyword">int</span> rc = <span class="hljs-built_in">modbus_read_registers</span>(ctx, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0A</span>, tab_reg);<br><span class="hljs-keyword">if</span> (rc == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-built_in">modbus_strerror</span>(errno));<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;数据:&quot;</span> &lt;&lt; tab_reg[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; tab_reg[<span class="hljs-number">1</span>] &lt;&lt; std::endl;<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">500</span>);<br>&#125;<br><br><span class="hljs-comment">//关闭设备</span><br><span class="hljs-built_in">modbus_close</span>(ctx);<br><span class="hljs-built_in">modbus_free</span>(ctx);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源库 </category>
          
          <category> libmodbus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libmodbus库开发笔记00：libmodbus库介绍、下载和库目录介绍</title>
      <link href="/posts/%E5%BC%80%E6%BA%90%E5%BA%93/libmodbus/"/>
      <url>/posts/%E5%BC%80%E6%BA%90%E5%BA%93/libmodbus/</url>
      
        <content type="html"><![CDATA[<h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><p>由于项目用到了一个微型气象仪又叫气象传感器，可监测风速、风向、温湿度、大气压力、光学雨量等要素。此设备设计输出信号标配为RS485通讯接口（MODBUS协议）。</p><blockquote><p>那什么是modbus呢？<br>Modbus是工业界常用的一种通讯协议，可以理解为是一种通讯的约定。</p></blockquote><h1 id="1、libmodbus介绍"><a href="#1、libmodbus介绍" class="headerlink" title="1、libmodbus介绍"></a>1、libmodbus介绍</h1><p>libmodbus，是一个基于C语言实现的Modbus驱动库，作者是Stephane，支持Linux, Mac OS X, FreeBSD, QNX and Win32操作系统，主要应用在PC上，用来开发上位机，也可以对源代码进行交叉编译，以适配更多的平台，比如ARM Linux。源代码开源，遵循 LGPL-2.1 许可。目前最新版本是3.1.10，Github仓库最新提交时间是2021年12月8日。</p><p>官方网站：<a href="https://www.libmodbus.org/">https://www.libmodbus.org/</a><br>Github仓库：<a href="https://github.com/stephane/libmodbus">https://github.com/stephane/libmodbus</a></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/GitHub_libmodbus.png"></p><h1 id="2、libmodbus下载"><a href="#2、libmodbus下载" class="headerlink" title="2、libmodbus下载"></a>2、libmodbus下载</h1><p>直接使用git进行克隆:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/stephane/libmodbus.git<br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/git_libmodbus.png"></p><h1 id="3、libmodbus库目录"><a href="#3、libmodbus库目录" class="headerlink" title="3、libmodbus库目录"></a>3、libmodbus库目录</h1><p><code>libmodbus</code>的目录结构如下图所示。其中，核心代码位于 <code>src</code>目录，测试代码位于<code>tests</code>目录。另外，<code>doc </code>目录存放<code>API</code>说明文档，<code>m4</code>目录存放<code>GNU m4</code>文件/<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/libmodbus_%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6.png"></p><p>src目录的内容及说明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">win32                       <span class="hljs-comment">//定义了在 Windows 下使用 Visual Studio 编译时的项目文件</span><br>Makefile.am                 <span class="hljs-comment">//AutoTool 配置文件，用于生成 Makefile</span><br>modbus-data.c               <span class="hljs-comment">//实现数据处理的通用函数，如大小端、位交换等函数</span><br>modbus-<span class="hljs-keyword">private</span>.h            <span class="hljs-comment">//内部使用的数据结构和函数定义</span><br>modbus-rtu-<span class="hljs-keyword">private</span>.h        <span class="hljs-comment">//RTU 模式的私有定义</span><br>modbus-rtu.c                <span class="hljs-comment">//通信层实现，RTU 模式相关的函数定义（串口设置、连接、发送、接收等）</span><br>modbus-rtu.h                <span class="hljs-comment">//RTU 模式对外提供的各 API 头文件</span><br>modbus-tcp-<span class="hljs-keyword">private</span>.h        <span class="hljs-comment">//TCP 模式的私有定义</span><br>modbus-tcp.c                <span class="hljs-comment">//通信层实现，TCP 模式相关的函数定义（网络设置、连接、发送、接收等）</span><br>modbus-tcp.h                <span class="hljs-comment">//TCP 模式对外提供的各 API 头文</span><br>modbus-version.h.in         <span class="hljs-comment">//版本定义文件    </span><br>modbus.c                    <span class="hljs-comment">//实现 Modbus 协议层，定义消息发送和接收函数、各功能码对应的函数</span><br>modbus.h                    <span class="hljs-comment">//libmodbus 对外暴露的 API 头文件</span><br></code></pre></td></tr></table></figure><p>参考网站：</p><ul><li>  人人都懂物联网：<a href="https://getiot.tech/zh/category/modbus">https://getiot.tech/zh/category/modbus</a></li><li>  气象传感器设备网站：<a href="http://www.qxz17.com/cpzx/">http://www.qxz17.com/cpzx/</a></li><li>  libmodbus官方手册中文翻译:<a href="https://blog.csdn.net/qq_23670601/article/details/82155378">https://blog.csdn.net/qq_23670601/article/details/82155378</a></li><li>  modbus驱动库:<a href="https://aijishu.com/a/1060000000224798">https://aijishu.com/a/1060000000224798</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源库 </category>
          
          <category> libmodbus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian11安装Qt 5.9.0</title>
      <link href="/posts/Linux/Debian/"/>
      <url>/posts/Linux/Debian/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前提"><a href="#0-前提" class="headerlink" title="0.前提"></a>0.前提</h1><p>在<code>Ubuntu</code>的上游<code>Debian</code>中安装Qt进行软件开发</p><blockquote><p>Ubuntu与Debian的的区别？    </p></blockquote><ul><li>Debian更加重视稳定性，也就意味着不一定是最新版本，总体来说相对于Ubuntu，Debian稳定版的软件版本更旧。   </li><li>Ubuntu可以在64位的x86和ARM平台上使用，它不在提供32位的镜像，另一方面，Debian支持32位和64位架构，除此之外，还支持64位ARM、ARM EABI、ARMv7、小端MIPS等，所以被称为通用操作系统。<h1 id="1-QT的下载地址"><a href="#1-QT的下载地址" class="headerlink" title="1.QT的下载地址"></a>1.QT的下载地址</h1>可以通过以下网站来进行Qt安装包的下载:   </li><li>Qt官方下载地址:<a href="https://download.qt.io/">https://download.qt.io</a>     </li><li>Qt官方下载新地址:<a href="https://download.qt.io/new_archive/qt/">https://download.qt.io/new_archive/qt/</a>     </li><li>Qt国内镜像下载地址:<a href="https://mirrors.cloud.tencent.com/qt">https://mirrors.cloud.tencent.com/qt</a>    </li><li>Qt安装包下载地址:<a href="http://qthub.com/download/">http://qthub.com/download/</a>    </li></ul><h1 id="2-安装Qt"><a href="#2-安装Qt" class="headerlink" title="2.安装Qt"></a>2.安装Qt</h1><p>首先将下载Qt安装包导入操作系统,并安装。</p><p>(1)查看<code>qt-opensource-linux-x64-5.9.0.run</code>的详细信息，执行<code>ls -l</code></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">-rw-r--r-- <span class="hljs-number"> 1 </span>root   root  <span class="hljs-number"> 1030326091 </span> 7月<span class="hljs-number"> 30 </span>20:36 qt-opensource-linux-x64-5.9.0.run<br></code></pre></td></tr></table></figure><p>(2)修改<code>qt-opensource-linux-x64-5.9.0.run</code>的权限，使其具有运行权限,执行<code>sudo chmod 777 qt-opensource-linux-x64-5.9.0.run</code></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">-rwxrwxrwx<span class="hljs-number"> 1 </span>root   root  <span class="hljs-number"> 1030326091 </span> 7月<span class="hljs-number"> 30 </span>20:36 qt-opensource-linux-x64-5.9.0.run<br></code></pre></td></tr></table></figure><p>(3)运行进行安装，执行<code>./qt-opensource-linux-x64-5.9.0.run</code></p><p>(4)接下来就是图形化操作,如下:</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Linux/Debian/Debian%E5%AE%89%E8%A3%85Qt_1.jpg" alt="1"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Linux/Debian/Debian%E5%AE%89%E8%A3%85Qt_2.jpg" alt="2"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Linux/Debian/Debian%E5%AE%89%E8%A3%85Qt_3.jpg" alt="3"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Linux/Debian/Debian%E5%AE%89%E8%A3%85Qt_4.jpg" alt="4"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Linux/Debian/Debian%E5%AE%89%E8%A3%85Qt_5.jpg" alt="5"></p><h1 id="3-创建第一个Qt项目"><a href="#3-创建第一个Qt项目" class="headerlink" title="3.创建第一个Qt项目"></a>3.创建第一个Qt项目</h1><p>在安装完Qt后创建第一个Qt项目，进行编译时发生错误。如下图所示出现<code>cannot find -lGL</code>错误信息。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Linux/Debian/Debian%E5%AE%89%E8%A3%85Qt%E9%94%99%E8%AF%AF.jpg" alt="Debian安装Qt错误"></p><p><strong>解决方法:</strong><br>经过了解是因为缺少文件导致，需要安装部分文件，网上找到的解决方案是：安装<code>libqt4-dev</code>或者<code>libgl1-mesa-dev</code>或者<code>libgl1-mesa-dev</code>或者<code>libglu1-mesa-dev</code><br>在终端输入指令,更新软件包和安装缺失相关库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt-get install libqt4-dev<br>sudo apt-get install libgl1-mesa-dev<br>sudo apt-get install libgl1-mesa-dev<br>sudo apt-get install libglu1-mesa-dev<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Debian </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮点数与十六进制相互转换</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用强制转化类型实现。</p></blockquote><h1 id="1-浮点数转十六进制"><a href="#1-浮点数转十六进制" class="headerlink" title="1.浮点数转十六进制"></a>1.浮点数转十六进制</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0</span><br>    <span class="hljs-keyword">float</span> data=<span class="hljs-number">0.212940</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *pHex=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)&amp;data;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%02X&quot;</span>,pHex[i]);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-keyword">float</span> data=<span class="hljs-number">0.212940</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *pHex=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)&amp;data;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%02X &quot;</span>,pHex[i]);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h1 id="2-十六进制转浮点数"><a href="#2-十六进制转浮点数" class="headerlink" title="2.十六进制转浮点数"></a>2.十六进制转浮点数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> hex[<span class="hljs-number">4</span>];<br>    hex[<span class="hljs-number">0</span>]=<span class="hljs-number">0x03</span>;<br>    hex[<span class="hljs-number">1</span>]=<span class="hljs-number">0x0D</span>;<br>    hex[<span class="hljs-number">2</span>]=<span class="hljs-number">0x5A</span>;<br>    hex[<span class="hljs-number">3</span>]=<span class="hljs-number">0x3E</span>;<br>    <span class="hljs-keyword">float</span> data=*(<span class="hljs-keyword">float</span>*)hex;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g\n&quot;</span>,data);<span class="hljs-comment">// %g参数按浮点精度四舍五入去除多余的0.</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> hex_double[<span class="hljs-number">8</span>];<br>    hex_double[<span class="hljs-number">0</span>]=<span class="hljs-number">0xFA</span>;<br>    hex_double[<span class="hljs-number">1</span>]=<span class="hljs-number">0xB8</span>;<br>    hex_double[<span class="hljs-number">2</span>]=<span class="hljs-number">0x36</span>;<br>    hex_double[<span class="hljs-number">3</span>]=<span class="hljs-number">0x54</span>;<br>    hex_double[<span class="hljs-number">4</span>]=<span class="hljs-number">0x8c</span>;<br>    hex_double[<span class="hljs-number">5</span>]=<span class="hljs-number">0xA2</span>;<br>    hex_double[<span class="hljs-number">6</span>]=<span class="hljs-number">0x73</span>;<br>    hex_double[<span class="hljs-number">7</span>]=<span class="hljs-number">0xc0</span>;<br>    <span class="hljs-keyword">double</span> data_double=*(<span class="hljs-keyword">double</span>*)hex_double;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g\n&quot;</span>,data_double);<span class="hljs-comment">// %g参数按浮点精度四舍五入去除多余的0.</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QCustomPlot基础教程:1、QCustomPlot的下载及使用</title>
      <link href="/posts/%E5%BC%80%E6%BA%90%E5%BA%93/QCustomPlot%E5%BA%93/"/>
      <url>/posts/%E5%BC%80%E6%BA%90%E5%BA%93/QCustomPlot%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="0-QCustomPlot介绍"><a href="#0-QCustomPlot介绍" class="headerlink" title="0.QCustomPlot介绍"></a>0.QCustomPlot介绍</h1><p>QCustomPlot是一个基于Qt画图和数据可视化的C++控件。在Qt下的绘图工具有Qwt、QChart和QCustomPlot，置于选择哪个绘图工具各有优缺点。</p><blockquote><p>在绘制大量数据（10万个点以上）时选择QCustomPlot，在数据量比较小时，QChart和QCustomPlot相差无几。</p></blockquote><h1 id="1-QCustomPlot的下载"><a href="#1-QCustomPlot的下载" class="headerlink" title="1.QCustomPlot的下载"></a>1.QCustomPlot的下载</h1><p>QCustomPlot官网地址:<a href="https://www.qcustomplot.com/index.php/introduction">https://www.qcustomplot.com/index.php/introduction</a></p><p>下载地址:<a href="https://www.qcustomplot.com/index.php/download">https://www.qcustomplot.com/index.php/download</a></p><ul><li><p>目前最新的是2.1.0,直接下载QCustomPlot.tar.gz、QCustomPlot-sharedlib.tar.gz两个文件并解压。</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/QCustomPlot/QCustomPlot.jpg"></p></li></ul><h1 id="2-QCustomPlot的几个重要类"><a href="#2-QCustomPlot的几个重要类" class="headerlink" title="2.QCustomPlot的几个重要类"></a>2.QCustomPlot的几个重要类</h1><ul><li>QCustomPlot 图表类：用于图表的显示和交互;</li><li>QCPLayer 图层：管理图层元素（QCPLayerable），所有可显示的对象都是继承自图层元素；</li><li>QCPAbstractPlottable 绘图元素：包含 折线图(QCPGraph)、曲线图(QCPCurve)、柱状图(QCPBars)、QCPStatiBox(盒子图)、QCPColorMap(色谱图)、QCPFinancial(金融图)；</li><li>QCPAxisRect 坐标轴矩形：一个坐标轴矩形默认包含上下左右四个坐标轴，但是可以添加多个坐标轴；</li></ul><h1 id="3-QCustomPlot的使用源码"><a href="#3-QCustomPlot的使用源码" class="headerlink" title="3.QCustomPlot的使用源码"></a>3.QCustomPlot的使用源码</h1><h2 id="3-1使用源码"><a href="#3-1使用源码" class="headerlink" title="3.1使用源码"></a>3.1使用源码</h2><ul><li>Qt新建一个工程文件，QCustomPlot.tar.gz后将qcustomplot.h与qcustomplot.cpp拷贝到工程目录下，右键 -&gt; 添加现有文件…，将这两个文件添加至工程。</li></ul><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/QCustomPlot/qcustomplot%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE.jpg"></p><ul><li>在pro中添加(由于QCustomPlot中存在导出功能，使用了printsupport模块)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP">QT += printsupport<br></code></pre></td></tr></table></figure><ul><li><p>在使用qcustomplot的文件中添加包含头文件:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;qcustomplot.h&quot;</span></span><br></code></pre></td></tr></table></figure></li><li><p>在*.ui文件中，选择widget控件，右键将其提升为<strong>QCustomPlot</strong>,然后头文件哪里会自动填充为qcustomplot.h。</p></li><li><p>运行程序就可以看见控件效果了，由于直接使用QCustomPlot源码，所以编译运行速度会比较慢。</p></li></ul><h2 id="2-2使用QCustomPlot编译成动态库"><a href="#2-2使用QCustomPlot编译成动态库" class="headerlink" title="2.2使用QCustomPlot编译成动态库"></a>2.2使用QCustomPlot编译成动态库</h2><ul><li>解压<code>QCustomPlot-sharedlib.tar.gz</code>,将<code>QCustomPlot.tar.gz</code>中的<code>qcustomplot.cpp</code>和<code>qcustomplot</code>文件复制到和<code>QCustomPlot-sharedlib.tar.gz</code>解压的文件夹同级目录下，如下图:<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/QCustomPlot/qcustomplot%E7%BC%96%E8%AF%91%E5%8A%A8%E6%80%81%E5%BA%931.jpg" alt="QCustomPlot编译动态库1"></li><li>用Qt打开项目,我的路纪<code>C:\QCustomPlot-sharedlib\qcustomplot-sharedlib\sharedlib-compilation\sharedlib-compilation.pro</code><br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/QCustomPlot/qcustomplot%E7%BC%96%E8%AF%91%E5%8A%A8%E6%80%81%E5%BA%93_Qt%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE.jpg" alt="qcustomplot编译动态库_Qt打开项目"></li><li>选择<code>debug</code>或者<code>Release</code>,进行构建。将会在<code>debug</code>目录下生成<code>libqcustomplotd2.a</code>、<code>qcustomplotd2.dll</code>，在<code>release</code>目录下生成<code>libqcustomplot2.a</code>、<code>qcustomplot2.dll</code>。接下来我们在使用的时候只需要我拷贝<code>qcustomplot.h</code>和动态库就可以</li></ul><h1 id="3-添加帮助文档"><a href="#3-添加帮助文档" class="headerlink" title="3.添加帮助文档"></a>3.添加帮助文档</h1><p>由于下载是第三方的C++控件库,没有帮助文档。需要我们人为的手动添加。<br>在下载的documentation文件夹下有个qcustomplot.qch文件,将其拷贝到Qt的文档路径(C:\Qt5.9\Qt5.9.9\5.9.9\mingw53_32\doc)，在QtCreator-&gt;工具-&gt;工具-&gt;选项-&gt;帮助-&gt;文档-&gt;添加,选择qcustomplot.qch文件，确定，这样以后我们F1就可以跳转到QCustomPlot的帮助文档了。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/QCustomPlot/qcustomplot%E6%B7%BB%E5%8A%A0%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.jpg" alt="QCustomPlot的帮助文档"></p><h1 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h1><ul><li>在.ui界面文件中，选择widget控件，命名为customPlot,右键将其提升为QCustomPlot,并命名为m_customPlot,添加一个PushButtom,命名为startBtn.</li></ul><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/QCustomPlot/qcustomplot%E4%BD%BF%E7%94%A8.jpg"></p><ul><li>在主程序添加代码:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 生成数据，画出的是抛物线</span><br>    <span class="hljs-function">QVector&lt;<span class="hljs-keyword">double</span>&gt; <span class="hljs-title">x</span><span class="hljs-params">(<span class="hljs-number">101</span>)</span>, <span class="hljs-title">y</span><span class="hljs-params">(<span class="hljs-number">101</span>)</span></span>; <span class="hljs-comment">//初始化向量x和y</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">101</span>; ++i)<br>    &#123;<br>      x[i] = i/<span class="hljs-number">50.0</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// x范围[-1,1]</span><br>      y[i] = x[i]*x[i]; <span class="hljs-comment">// y=x*x</span><br>    &#125;<br>    ui-&gt;customPlot-&gt;<span class="hljs-built_in">addGraph</span>();<span class="hljs-comment">//添加数据曲线（一个图像可以有多个数据曲线）</span><br><br>    <span class="hljs-comment">// graph(0);可以获取某个数据曲线（按添加先后排序）</span><br>    <span class="hljs-comment">// setData();为数据曲线关联数据</span><br>    ui-&gt;customPlot-&gt;<span class="hljs-built_in">graph</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-built_in">setData</span>(x, y);<br>    ui-&gt;customPlot-&gt;<span class="hljs-built_in">graph</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;抛物线y=x²&quot;</span>);<span class="hljs-comment">// 设置图例名称</span><br>    <span class="hljs-comment">// 为坐标轴添加标签</span><br>    ui-&gt;customPlot-&gt;xAxis-&gt;<span class="hljs-built_in">setLabel</span>(<span class="hljs-string">&quot;x&quot;</span>);<br>    ui-&gt;customPlot-&gt;yAxis-&gt;<span class="hljs-built_in">setLabel</span>(<span class="hljs-string">&quot;y&quot;</span>);<br>    <span class="hljs-comment">// 设置坐标轴的范围，以看到所有数据</span><br>    ui-&gt;customPlot-&gt;xAxis-&gt;<span class="hljs-built_in">setRange</span>(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>);<br>    ui-&gt;customPlot-&gt;yAxis-&gt;<span class="hljs-built_in">setRange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    ui-&gt;customPlot-&gt;legend-&gt;<span class="hljs-built_in">setVisible</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 显示图例</span><br>    <span class="hljs-comment">// 重画图像</span><br>    ui-&gt;customPlot-&gt;<span class="hljs-built_in">replot</span>();<br></code></pre></td></tr></table></figure></li><li>运行结果</li></ul><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/QCustomPlot/%E7%AC%AC%E4%B8%80%E4%B8%AAqcustomplot%E7%A4%BA%E4%BE%8B.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 开源库 </category>
          
          <category> QCustomPlot库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML超文本标记语言</title>
      <link href="/posts/HTML/"/>
      <url>/posts/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常用标签"><a href="#1-常用标签" class="headerlink" title="1.常用标签"></a>1.常用标签</h1><h2 id="1-1文本标签-h1-h6"><a href="#1-1文本标签-h1-h6" class="headerlink" title="1.1文本标签(h1-h6)"></a>1.1文本标签(h1-h6)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>二级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>三级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>四级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>五级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>六级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注:文本标题标签自带加粗，有自己的文本大小，并且独自占一行，有默认间距</p></blockquote><h2 id="1-2段落标签-p"><a href="#1-2段落标签-p" class="headerlink" title="1.2段落标签(p)"></a>1.2段落标签(p)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>标识一个段落(段落与段落之间有段间距)<br></code></pre></td></tr></table></figure><h2 id="2-3换行-br"><a href="#2-3换行-br" class="headerlink" title="2.3换行(br)"></a>2.3换行(br)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>换行是一个空标记(强行换行)<br></code></pre></td></tr></table></figure><h2 id="2-4水平线-hr"><a href="#2-4水平线-hr" class="headerlink" title="2.4水平线(hr)"></a>2.4水平线(hr)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span>空标记<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">noshade</span>&gt;</span>   <span class="hljs-comment">&lt;!--noshade 去掉阴影--&gt;</span><br>属性：<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;Right&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        color   ===== 颜色</span><br><span class="hljs-comment">        width   ===== 宽度(像素)</span><br><span class="hljs-comment">        align   ===== 对齐方式 left center right</span><br><span class="hljs-comment">        noshade ===== 取消阴影</span><br><span class="hljs-comment">    --&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：快捷复制一行，shift+alt+方向键下</p></blockquote><h2 id="2-5加粗有两个标记-推荐strong"><a href="#2-5加粗有两个标记-推荐strong" class="headerlink" title="2.5加粗有两个标记(推荐strong)"></a>2.5加粗有两个标记(推荐strong)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>加粗内容<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>强调的内容<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> 突出的文本<br></code></pre></td></tr></table></figure><h2 id="2-6倾斜有两个标记-推荐em"><a href="#2-6倾斜有两个标记-推荐em" class="headerlink" title="2.6倾斜有两个标记(推荐em)"></a>2.6倾斜有两个标记(推荐em)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span> 强调文本<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>倾斜文本<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-7删除有两个标记-推荐del"><a href="#2-7删除有两个标记-推荐del" class="headerlink" title="2.7删除有两个标记(推荐del)"></a>2.7删除有两个标记(推荐del)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span> 文本<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span>删除线<br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span> 文本<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span> 删除线<br></code></pre></td></tr></table></figure><h2 id="2-8扩展符号"><a href="#2-8扩展符号" class="headerlink" title="2.8扩展符号"></a>2.8扩展符号</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>下划线<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>下标<br><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>上标<br></code></pre></td></tr></table></figure><h2 id="2-9特殊符号"><a href="#2-9特殊符号" class="headerlink" title="2.9特殊符号"></a>2.9特殊符号</h2><table><thead><tr><th>特殊符号</th><th>解释</th></tr></thead><tbody><tr><td>尖角号</td><td><code>&amp;lt;</code> 左尖角号,<code>&amp;gt;</code>右尖角号</td></tr><tr><td>空格</td><td>①<code>nbsp;</code>改空格占据宽度受[字体]影响明显而强烈 ②<code>&amp;emsp;</code>占据的宽度正好是1个中文宽度，且基本上下部受字体影响</td></tr><tr><td>版权</td><td><code>&amp;copy;</code> ©</td></tr><tr><td>商标</td><td><code>trade;</code>®   <code>&amp;reg;</code></td></tr></tbody></table><blockquote><p>®受保护的商标</p></blockquote><h2 id="2-10div和span标签"><a href="#2-10div和span标签" class="headerlink" title="2.10div和span标签"></a>2.10div和span标签</h2><p><code>div</code>标签，没有具体含义，用来划分页面的区域，独占一行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>第一行<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>第二行<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>第三行<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>span</code>标签，没有实际意义，主要应用在于对文本独立修饰的时候，内容有多宽就占用多宽的空间距离</p><h2 id="2-11列表"><a href="#2-11列表" class="headerlink" title="2.11列表"></a>2.11列表</h2><h3 id="2-11-1无序列表"><a href="#2-11-1无序列表" class="headerlink" title="2.11.1无序列表"></a>2.11.1无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;disc&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>1、ui里面只能放li,li里面可以放置其他标签<br>  2、默认的是黑色的实心圆<br>  3、type:disc(黑纯色圆) circle(空心圆) square(黑纯色方形) none(无,用的最多)<br>  4、ul&gt;li*2 快速创建无序列表 </p></blockquote><h3 id="2-11-2有序列表"><a href="#2-11-2有序列表" class="headerlink" title="2.11.2有序列表"></a>2.11.2有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;27&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>1、li里面可以随意放标签，但是ol里面只能放置li<br>  2、数字是自动生成的<br>  3、type:1,a,A,i,I<br>     start:取值只能是数字<br>  4、ol&gt;li*2 快速创建有序列表</p></blockquote><h3 id="2-11-3自定义列表"><a href="#2-11-3自定义列表" class="headerlink" title="2.11.3自定义列表"></a>2.11.3自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>可以是文字也可以是图<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>相关文字<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>1、dl里面一般就只放置一个dt和dd<br> 2、dl&gt;dt+dd 快速创建自定义列表</p></blockquote><h2 id="2-12图片标签"><a href="#2-12图片标签" class="headerlink" title="2.12图片标签"></a>2.12图片标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片路径&quot;</span>  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;鼠标悬停上去的提示信息&quot;</span>  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片不显示之后(加载失败)的提示信息&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200px&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-12-1图片的路径"><a href="#2-12-1图片的路径" class="headerlink" title="2.12.1图片的路径"></a>2.12.1图片的路径</h3><ul><li>同级目录<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">1、Blog.png<br>2、./Blog.png   (相对路径)<br>3、H:\商飞客户项目\code\Blog.png   (绝对路径)很少用<br></code></pre></td></tr></table></figure></li><li>不同级目录<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">1、../img/cainiao.png  和code同级<br>2、./img/cainiao.png   img是img的子级<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-13超链接"><a href="#2-13超链接" class="headerlink" title="2.13超链接"></a>2.13超链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;路径&quot;</span>  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;鼠标悬停上去之后的提示信息&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;规定在何处打开文档&quot;</span>&gt;</span> 内容<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    Target属性：规定在何处打开文档<br>    A.target=&quot;_self&quot; 默认值<br>    B.target=&quot;_blank&quot;新窗口打开<br></code></pre></td></tr></table></figure><h2 id="2-14表格"><a href="#2-14表格" class="headerlink" title="2.14表格"></a>2.14表格</h2><h3 id="2-14-1表格属性"><a href="#2-14-1表格属性" class="headerlink" title="2.14.1表格属性"></a>2.14.1表格属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">1、宽度 width   百分数,px   <br>2、高度 height  百分数,px   <br>3、边框 border  数字(1~*)   <br>4、边框颜色 bordercolor  red  yellow   <br>5、背景颜色 bgcolor      <br>6、水平对齐 align=&quot;left或center或right&quot;    <br>7、cellspacing = &quot;单元格与单元格之间的距离&quot;   <br>8、cellpadding = &quot;单元格与内容之间的空隙&quot;   <br></code></pre></td></tr></table></figure><h3 id="2-14-2行tr属性"><a href="#2-14-2行tr属性" class="headerlink" title="2.14.2行tr属性"></a>2.14.2行tr属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">1、高度 height   <br>2、背景颜色 bgcolor    <br>3、文字水平对齐 align=&quot;left或right或center&quot;   <br>4、文字垂直对齐 valign=&quot;top或middle或bottom&quot;   <br></code></pre></td></tr></table></figure><h3 id="2-14-3单元格td属性"><a href="#2-14-3单元格td属性" class="headerlink" title="2.14.3单元格td属性"></a>2.14.3单元格td属性</h3><blockquote><p>td：如果一个单元格的设置宽度，影响的是一整列的宽度        </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">1、宽度 width    <br>2、高度 height     <br>3、背景颜色 bgcolor          <br>4、文字水平对齐 align=&quot;left或center或者rigth&quot;             <br>5、文字垂直对齐 valign=&quot;top或middle或者bottom&quot;           <br></code></pre></td></tr></table></figure><h3 id="2-14-4表格合并列"><a href="#2-14-4表格合并列" class="headerlink" title="2.14.4表格合并列"></a>2.14.4表格合并列</h3><p>Colspan=”所要合并的单元格的列数”必须给td<br>Rowspan=”所要合并的单元格的行数”必须给td         </p><h2 id="2-15表单"><a href="#2-15表单" class="headerlink" title="2.15表单"></a>2.15表单</h2><p>表单的作用：收集用户信息    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get或者post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;向何处发送表单数据&quot;</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span>/&gt;</span><br>    A.属性type定义输入框的类型    <br>      a)文本框type=&quot;text&quot; 密码框type=&quot;password&quot;      <br>      b)提交框type=&quot;submit&quot; 和(button)提交按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>一样     <br>      c)按钮框type=&quot;button&quot;单纯的按钮                   <br>      d)重置框type=&quot;reset&quot;清空的效果       <br>    B.属性placeholder描述输入字段预期值的简短的提示信息。兼容到IE8以上      <br>    C.属性name必须设置,否则在提交表单时,用户在其中输入的数据不会被发送给服务器      <br>    D.属性value     <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span><br>    用户信息:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的用户名，注意大小写&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;跳转&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--提交按钮，value修改其值。提交信息到action指定的地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重新输入一遍<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong><code>Form</code>当中<code>method</code>的<code>post</code>和<code>get</code>的区别？</strong><br>1、<code>get</code>是从服务器上<strong>获取</strong>数据,<code>post</code>是向服务器传送数据。<br>2、<code>get</code>是把参数数据队列加到提交表单的<code>ACTION</code>属性所指的<code>URL</code>中,值和表单内各个字段一一对应,在<code>URL</code>中可以看到。<code>post</code>是通过HTTP post机制，将表单内各个字段与其内容放置在HTTP HEADE内一起传送到ACTION属性所指的URL地址。用户看不到这个过程<br>3、对于<code>get</code>方式，服务器端用<code>Request.QueryString</code>获取变量的值,对于<code>post</code>方式，服务器用<code>Request.Form</code>获取提交的数据。<br>4、<code>get</code>传送的数据量==比较小==，不能大于2K。<code>post</code>传送的数据量较大,一般被默认为不受限制。但理论上，<code>IIS4</code>中最大量为<code>80KB</code>,<code>IIS5</code>为<code>100KB</code><br>5、<code>get</code>安全性非常低，<code>post</code>安全性较高。但是执行效率比<code>post</code>方法好。   </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在一台电脑上同时使用Gitee（码云）和Github</title>
      <link href="/posts/Tools/GitHub/"/>
      <url>/posts/Tools/GitHub/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>由于重新安装了操作系统，电脑的操作环境都需要重新安装与配置。而在日常中我经常使用Gitee和Github,这里我记录一下在一台电脑上同时使用Gitte与Github。</p><blockquote><p>注意：<br>在Gitee上和在Github上使用的账号邮箱应该是不相同的。</p></blockquote><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h1><ol><li>下载并安装<a href="https://git-scm.com/download">Git</a></li><li>注册Gitee账户</li><li>注册Github账户</li></ol><blockquote><p>此处软件安装过程与注册账户省略。安装完成后，在电脑桌面右键打开<code>Git Bash Here</code>输入<code>git --version</code>查看安装的版本。</p></blockquote><h1 id="3-清除git的全局设置"><a href="#3-清除git的全局设置" class="headerlink" title="3.清除git的全局设置"></a>3.清除git的全局设置</h1><p>如果已经配置Git，需要先清除git 的全局设置，如果没有就跳过这一步。以下命令查看设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --list   #查看全局配置文件，文件的位置在用户主目录下的.gitconfig文件<br>git config --system --list   #查看系统配置文件，文件的位置在etc下的gitconfig<br>git config --local --list #查看版本库配置文件，文件位置在.git/config<br><span class="hljs-meta">#</span><span class="bash">删除设置</span><br>git config --global --unset user.name<br>git config --global --unset user.email<br><span class="hljs-meta">#</span><span class="bash">配置用户名和邮箱</span><br>git config -–global user.name &quot;xxx&quot; <br>git config –-global user.email &quot;xxx@xxx.com&quot; <br></code></pre></td></tr></table></figure><blockquote><p>优先级是:local&gt;global&gt;system,而global存储的是提交用户的email和用户名</p></blockquote><h1 id="4-生成SSH公钥"><a href="#4-生成SSH公钥" class="headerlink" title="4.生成SSH公钥"></a>4.生成SSH公钥</h1><p>开发者向码云版本库写入最常用到的协议是 SSH 协议，因为 SSH 协议使用公钥认证，可以实现无口令访问，而若使用 HTTPS 协议每次身份认证时都需要提供口令。使用 SSH 公钥认证，就涉及到公钥的管理。</p><blockquote><p>私钥不能在网络中传输—–私钥可以解密公钥<br>公钥可以在网络中传输—–公钥不能解密私钥</p></blockquote><h2 id="4-1查看系统是否有公钥"><a href="#4-1查看系统是否有公钥" class="headerlink" title="4.1查看系统是否有公钥"></a>4.1查看系统是否有公钥</h2><p>进入用户目录下的.ssh文件下，每一个人的路径会因为你使用的操作系统而不同，若是没有这个文件夹，可以直接运行下面指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.ssh<br></code></pre></td></tr></table></figure><p>如果没有则提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">No such file or directory<br></code></pre></td></tr></table></figure><p>如果有则看到有：c</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">config  id_rsa_gitee  id_rsa_gitee.pub  id_rsa_github  id_rsa_github.pub  known_hosts<br></code></pre></td></tr></table></figure><h2 id="4-2生成Gitee与GitHub的ssh-key"><a href="#4-2生成Gitee与GitHub的ssh-key" class="headerlink" title="4.2生成Gitee与GitHub的ssh key"></a>4.2生成Gitee与GitHub的ssh key</h2><p>一般情况下，我将gitee公钥自定义命名为：id_rsa_gitee,github公钥自定义命名为：id_rsa_github,这样命名是为了方便区分。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;Gitee邮箱&quot;</span><br>ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;GitHub邮箱&quot;</span><br></code></pre></td></tr></table></figure><h1 id="5-在Gitee和Github添加public-key"><a href="#5-在Gitee和Github添加public-key" class="headerlink" title="5.在Gitee和Github添加public key"></a>5.在Gitee和Github添加public key</h1><p>查看并复制创建好的<code>id_rsa_gitee.pub</code>和<code>id_rsa_github.pub</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.ssh<br>cat id_rsa_gitee.pub<br></code></pre></td></tr></table></figure><p>终端会显示，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOvPNshNdEEXh3kHoOoUUvuy5DiVRJ8WXasHbSJL1wyTaVFzaoprdGWhSHn0/V13OlPmrqrPfGfUioBNIt4jjcj0Z3zmpVbIqN1FOd6eS47sYhS/s/VtJ9Go8vkrNMCSfFct6F9ATO/wvHgX9AnF+1jFG1sZ0kFe9Dr445fmWq59WvbcL5cWF3fk9l34YXNRA7rVCT0YF/IAEhubzFUgf9CrOfnwuSEjz0Sc8TNBvkN4IcuW+NG5BSdc67sCqEiMAYKNrd8UAXEyzFhcRoKBzX1vqfaOqJeFwkIgWjrhqsr3HeFrwI0NXMgHRsEwRIKAWUsDCpjGrj9rPsmYJDoJgV xxx@163.com<br></code></pre></td></tr></table></figure><p>打开 Gitee 的网站找到设置，再找到 SSH Keys，添加复制的 public key。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Gitee%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.jpg" alt="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Gitee%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.jpg"></p><blockquote><p>Github的设置类似,设置如下</p></blockquote><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Github%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.jpg" alt="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Github%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.jpg"></p><h1 id="6-创建配置文件"><a href="#6-创建配置文件" class="headerlink" title="6.创建配置文件"></a>6.创建配置文件</h1><p>在 .ssh 文件夹中创建 config 文件，根据不同host配置不同的ssh key，以解决ssh冲突：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> gitee</span><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa_gitee<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa_github<br></code></pre></td></tr></table></figure><h1 id="6-测试连接是否正常"><a href="#6-测试连接是否正常" class="headerlink" title="6.测试连接是否正常"></a>6.测试连接是否正常</h1><p>在命令行分别输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com   <br></code></pre></td></tr></table></figure><p>若返回如下内容，则Github连接正常</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Hi aurora811! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></figure><p>继续在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@gitee.com<br></code></pre></td></tr></table></figure><p>若返回如下内容，则Gitee连接正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Hi Aurora811! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Boost库  5、字符串string_algo</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/</url>
      
        <content type="html"><![CDATA[<p>字符串标准类<code>std::string</code>有一些成员函数可以查找子串、访问字符，执行基础的字符串处理功能。由于<code>std::string</code>符合容器的定义，也可以把它看作元素类型为<code>char</code>的序列容器，使用标准算法来对它进行运算。但标准算法并不是为字符串处理定制的，很多时候会显的有些”笨拙”。而<code>string_algo</code>库的出现改变了这个局面。</p><h1 id="1-C-C-处理字符串"><a href="#1-C-C-处理字符串" class="headerlink" title="1.C/C++处理字符串"></a>1.C/C++处理字符串</h1><p>在我们熟悉的C++标准库中提供了字符串标准类<code>std::string</code>,它提供一些成员函数可以查找子串<code>find()</code>,替换字符串<code>replce()</code>等基本功能，但是<code>C++</code>对于处理字符串的能力与其他语言而言还是比较弱的。</p><ul><li><a href="http://www.cplusplus.com/reference/string/">http://www.cplusplus.com/reference/string/</a></li></ul><h1 id="2-boost中string-algo库"><a href="#2-boost中string-algo库" class="headerlink" title="2.boost中string_algo库"></a>2.boost中string_algo库</h1><p><code>string_algo</code>库的出现改变了这个局面。它是一个非常全面的字符串算法库，提供了大量的字符串操作函数，如大小写比较、修剪、特定模式的字符串查找等，<code>string_algo</code>库可以在不使用正则表达式的情况下处理大多数字符串的相关问题。string_algo库位于名字空间<code>boost::algorithm</code>，需要包含的头文件如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;boost/algorithm/string.hpp&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost;<br></code></pre></td></tr></table></figure><p><code>string_algo</code>库中的算法命名遵循了标准库的惯例，算法名均为大小写形式，并使用不同的词缀来区分不同的版本，命名规则如下</p><ul><li>词缀i:大小写不敏感(忽略大小写)，否则大小写敏感的。</li><li>后缀_copy:不变动输入，返回处理结果的拷贝，否则原地处理，输入即输出。</li><li>后缀_if:需要一个作为判断式的谓词函数对象，否则使用默认的判断准则。</li></ul><p><code>string_algo</code>库提供的算法共有五大类：</p><ul><li>大小写转换</li><li>判断式与分类</li><li>修剪</li><li>查找与替换</li><li>分割与合并</li></ul><h2 id="2-1大小写转换"><a href="#2-1大小写转换" class="headerlink" title="2.1大小写转换"></a>2.1大小写转换</h2><p><code>string_algo</code>库可以高效地实现字符串的大小写转换，包括两组算法：<code>to_upper（）</code>和<code>to_lower（）</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">to_upper</span><span class="hljs-params">(T &amp;Input)</span></span>;<span class="hljs-comment">//大写，改变原来字符串</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">to_lower</span><span class="hljs-params">(T &amp;Input)</span></span>;<span class="hljs-comment">//小写，改变原来字符串</span><br><span class="hljs-function">T <span class="hljs-title">to_upper_copy</span><span class="hljs-params">(T &amp;Input)</span></span>;<span class="hljs-comment">//大写，不改变原字符串</span><br><span class="hljs-function">T <span class="hljs-title">to_lower_copy</span><span class="hljs-params">(T &amp;Input)</span></span>;<span class="hljs-comment">//小写，不改变原字符串</span><br></code></pre></td></tr></table></figure><p>示例代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//大小写转换</span><br>string str = <span class="hljs-string">&quot;abcABC&quot;</span>;<br><span class="hljs-built_in">to_upper</span>(str);  <span class="hljs-comment">//改变原字符串</span><br>cout&lt;&lt;<span class="hljs-string">&quot;字符串&quot;</span>&lt;&lt;str&lt;&lt;endl; <span class="hljs-comment">//ABCABC</span><br><span class="hljs-built_in">to_lower</span>(str);<br>cout &lt;&lt; <span class="hljs-string">&quot;字符串&quot;</span> &lt;&lt; str &lt;&lt; endl;  <span class="hljs-comment">//abcabc</span><br><br>string str1 = <span class="hljs-built_in">to_upper_copy</span>(str);   <span class="hljs-comment">//不改变原字符串</span><br>cout &lt;&lt; <span class="hljs-string">&quot;原字符串&quot;</span> &lt;&lt; str &lt;&lt; endl;   <span class="hljs-comment">//abcabc</span><br>cout &lt;&lt; <span class="hljs-string">&quot;转换后字符串&quot;</span> &lt;&lt; str1 &lt;&lt; endl;  <span class="hljs-comment">//ABCABC</span><br><br>string str2 = <span class="hljs-built_in">to_lower_copy</span>(str);<br>cout &lt;&lt; <span class="hljs-string">&quot;原字符串&quot;</span> &lt;&lt; str &lt;&lt; endl;   <span class="hljs-comment">//abcabc</span><br>cout &lt;&lt; <span class="hljs-string">&quot;转换后字符串&quot;</span> &lt;&lt; str2 &lt;&lt; endl;  <span class="hljs-comment">//abcabc</span><br></code></pre></td></tr></table></figure><h2 id="2-2判断式-算法"><a href="#2-2判断式-算法" class="headerlink" title="2.2判断式(算法)"></a>2.2判断式(算法)</h2><ul><li><code>lexicographical_compare</code>:根据字典顺序检测一个字符是否小于另一个字符串。</li><li><code>starts_with</code>:检测字符串是否以另一个字符串为前缀。</li><li><code>ends_with</code>:检测字符串是否以另一个字符串为后缀。</li><li><code>contains</code>:检测字符串是否包含另一字符串。</li><li><code>equals</code>:检测两个字符串是否相等。</li><li><code>all</code>:检测字符串是否满足指定的判断式。</li></ul><blockquote><p>除了all,上述算法都有另一个i前缀的版本。由于它们不变动字符串，故没有<code>_copy</code>版本。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-comment">//判断式(算法)，返回bool</span><br>cout &lt;&lt; <span class="hljs-built_in">starts_with</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符串是否以另一个字符串为前缀</span><br>cout &lt;&lt; <span class="hljs-built_in">starts_with</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-built_in">ends_with</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>) &lt;&lt;endl;<span class="hljs-comment">//字符串是否以另一个字符串为后缀</span><br>cout &lt;&lt; <span class="hljs-built_in">ends_with</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;WORLD&quot;</span>)&lt;&lt;endl;<br><br>cout &lt;&lt; <span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;o w&quot;</span>)&lt;&lt;endl;<span class="hljs-comment">//字符串是否包含另一个字符串</span><br>cout &lt;&lt; <span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;o1w&quot;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-built_in">equals</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;Hello world&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">//测两个字符串是否相等</span><br>cout &lt;&lt; <span class="hljs-built_in">equals</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;Hello1world&quot;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-built_in">all</span>(<span class="hljs-string">&quot;helloworld&quot;</span>, <span class="hljs-built_in">is_lower</span>()) &lt;&lt; endl;<span class="hljs-comment">//判断每一个字符是否全部都是小写</span><br>cout &lt;&lt; <span class="hljs-built_in">all</span>(<span class="hljs-string">&quot;Helloworld&quot;</span>, <span class="hljs-built_in">is_lower</span>()) &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="2-3判断式-函数对象"><a href="#2-3判断式-函数对象" class="headerlink" title="2.3判断式(函数对象)"></a>2.3判断式(函数对象)</h2><p><code>string_algo</code>增强了标准库中的<code>equal_to</code> 和 <code>less</code> 函数对象，允许对不同类型的字符串进行比较，并提供大小写无关的形式。</p><ul><li><code>is_equal_to</code>:与<code>equals</code>算法类似，比较两个对象是否相等</li><li><code>is_less</code>:比较两个对象是否具有小于关系</li><li><code>is_not_greater</code>:比较两个对象是否具有不大于关系</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;判断式，函数对象&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">is_equal</span>()(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">//内容是否相等,i忽视大小写 1</span><br>cout &lt;&lt; <span class="hljs-built_in">is_equal</span>()(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; <span class="hljs-built_in">is_less</span>()(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">//内容是否小于 </span><br>cout &lt;&lt; <span class="hljs-built_in">is_less</span>()(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abd&quot;</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">is_not_greater</span>()(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;xyz&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">//内容是否不大于</span><br></code></pre></td></tr></table></figure><h2 id="2-4分类"><a href="#2-4分类" class="headerlink" title="2.4分类"></a>2.4分类</h2><p><code>string_algo</code>提供了一些分类函数，可以用于检测一个字符是否符合某些特性，主要是用于搭配其他算法，如<code>all</code>算法。<br><code>string_algo</code>库分类函数有下列:</p><ul><li><code>is_space</code>:字符是否为空格或制表符(tab)</li><li><code>is_alnum</code>:字符是否为字母和数字字符</li><li><code>is_alpha</code>:字符是否为字母</li><li><code>is_cntrl</code>:字符是否为控制字符</li><li><code>is_digit</code>:字符是否为十进制数字</li><li><code>is_lower</code>:字符是否为小写字符</li><li><code>is_print</code>:字符是否为打印字符</li><li><code>is_punct</code>:字符是否为标点符号字符</li><li><code>is_upper</code>:字符是否为大写字符</li><li><code>is_xdigit</code>:字符是否为十六进制数字</li><li><code>is_any_of</code>:字符是否是参数字符序列中任意字符</li><li><code>if_from_range</code>:字符是否位于指定区间内，即from&lt;=ch&lt;=to</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//分类</span><br>cout &lt;&lt; <span class="hljs-string">&quot;分类&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">is_space</span>()(<span class="hljs-string">&#x27;&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符是否为空格或制表符(tab)</span><br>cout &lt;&lt; <span class="hljs-built_in">is_alnum</span>()(<span class="hljs-string">&#x27;1&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符是否为字母和数字字符</span><br>cout &lt;&lt; <span class="hljs-built_in">is_alnum</span>()(<span class="hljs-string">&#x27;a&#x27;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-built_in">is_alpha</span>()(<span class="hljs-string">&#x27;A&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符是否为字母</span><br>cout &lt;&lt; <span class="hljs-built_in">is_cntrl</span>()(<span class="hljs-string">&#x27;\n&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符是否为控制字符</span><br>cout &lt;&lt; <span class="hljs-built_in">is_print</span>()(<span class="hljs-string">&#x27;a&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符是否为打印字符</span><br>cout &lt;&lt; <span class="hljs-built_in">is_lower</span>()(<span class="hljs-string">&#x27;a&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符是否为小写字符</span><br>cout &lt;&lt; <span class="hljs-built_in">is_upper</span>()(<span class="hljs-string">&#x27;A&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">//字符是否为大写字符</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> Boost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Boost库  4、字符串格式化format</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/</url>
      
        <content type="html"><![CDATA[<p>C+标准库提供了强大的、富有弹性的输入/输出处理,使用流可以对输出的格式进行精确的控制,如宽度,精度、精度、进制、填充字符、对齐等方面，新式流出操作符”&lt;&lt;”可以串联起任意数量的参数，限制很少。</p><h1 id="1-C-C-格式化"><a href="#1-C-C-格式化" class="headerlink" title="1.C/C++格式化"></a>1.C/C++格式化</h1><p>在字符串处理中少不了格式化字符串;C语言中经典的<code>printf()</code>、<code>sprintf()</code>,虽然它缺乏类型安全检查,还有一些其他的缺点，但是它的语法简单高效，并且被广泛地接受好使用，影响深远。   </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s:%d=%d=%d\n&quot;</span>,<span class="hljs-string">&quot;sum&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h1 id="2-Boost格式化"><a href="#2-Boost格式化" class="headerlink" title="2.Boost格式化"></a>2.Boost格式化</h1><p><code>boost::format</code>提供了一个和C语言的<code>printf</code>类似的格式化字符串语法定义，同时也保有<code>C++</code>的<code>ostraem</code>的各种优势，对于对于要格式化输出的C++程序开发人员来说，<code>boost::format</code>是一个相当好用的函数库。<code>format</code>组件位于名字空间<code>boost</code>,需要包含的头文件如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/format.hpp&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost;<br></code></pre></td></tr></table></figure><p>示例代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/format.hpp&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">using</span> boost::format;<br><span class="hljs-comment">//C/C++格式化</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s:%d=%d=%d\n&quot;</span>, <span class="hljs-string">&quot;sum&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, (<span class="hljs-number">1</span> + <span class="hljs-number">2</span>));<br><br><span class="hljs-comment">//Boost格式化:</span><br><span class="hljs-comment">//①类似于printf中的格式</span><br>cout &lt;&lt; format(<span class="hljs-string">&quot;%s:%d+%d=%d\n&quot;</span>) % <span class="hljs-string">&quot;sum&quot;</span> % <span class="hljs-number">1</span> % <span class="hljs-number">2</span> % (<span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<br><span class="hljs-comment">//②类似于C#语言，%N%乐意指示参数的位置，减少参数输入的工作-这是对printf()语法的一个改进</span><br><span class="hljs-function">format <span class="hljs-title">fmt</span><span class="hljs-params">(<span class="hljs-string">&quot;(%1%+%2%)*%2%=%3%\n&quot;</span>)</span></span>;<br>fmt % <span class="hljs-number">2</span> % <span class="hljs-number">5</span>;<br>fmt % ((<span class="hljs-number">2</span> + <span class="hljs-number">5</span>) * <span class="hljs-number">5</span>);<br>cout &lt;&lt; fmt.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//③先定义对象后使用</span><br><span class="hljs-function">format <span class="hljs-title">fmt3</span><span class="hljs-params">(<span class="hljs-string">&quot;%2%---%1%----%2%&quot;</span>)</span></span>;<span class="hljs-comment">//先声明对象</span><br>fmt3 % <span class="hljs-number">123</span>;<br>fmt3 % <span class="hljs-string">&quot;hell&quot;</span>;<br>cout &lt;&lt; fmt3.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br><br>fmt3 % <span class="hljs-number">1.23456</span>;<br>fmt3 % <span class="hljs-string">&#x27;c&#x27;</span>;<br>cout &lt;&lt; fmt3.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br><span class="hljs-comment">//④直接转为string</span><br><span class="hljs-keyword">int</span> age = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><span class="hljs-function">format <span class="hljs-title">fmt6</span><span class="hljs-params">(<span class="hljs-string">&quot;name:%1%,age:%2%&quot;</span>)</span></span>;<br>fmt6%name%age;<br>cout &lt;&lt; fmt6.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> Boost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt之交叉编译Qt项目</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<h1 id="0、Qt官方在那些平台-系统有支持？"><a href="#0、Qt官方在那些平台-系统有支持？" class="headerlink" title="0、Qt官方在那些平台/系统有支持？"></a>0、Qt官方在那些平台/系统有支持？</h1><blockquote><p>Windows、Linux、Mac</p></blockquote><h1 id="1、为什么要进行Qt移植"><a href="#1、为什么要进行Qt移植" class="headerlink" title="1、为什么要进行Qt移植"></a>1、为什么要进行Qt移植</h1><ul><li>直制系统，如BusyBox简易系统，希望能运行Qt  </li><li>厂家提供的Qt库太大，太全，占空间  </li><li>版本升级，想用其它好用的Qt版本</li></ul><h1 id="2、嵌入式Qt移植有哪几种方法"><a href="#2、嵌入式Qt移植有哪几种方法" class="headerlink" title="2、嵌入式Qt移植有哪几种方法"></a>2、嵌入式Qt移植有哪几种方法</h1><h2 id="2-1-编译Qt源码，得到Qt库文件，部署到嵌入式系统中"><a href="#2-1-编译Qt源码，得到Qt库文件，部署到嵌入式系统中" class="headerlink" title="2.1 编译Qt源码，得到Qt库文件，部署到嵌入式系统中"></a>2.1 编译Qt源码，得到Qt库文件，部署到嵌入式系统中</h2><p>查看开发板中是否已经部署Qt<code>sudo ls /usr/lib/libQt5*</code></p><h2 id="2-2-利用开源的嵌入式Linux系统自动构建框架Buildroot或者Yocto"><a href="#2-2-利用开源的嵌入式Linux系统自动构建框架Buildroot或者Yocto" class="headerlink" title="2.2 利用开源的嵌入式Linux系统自动构建框架Buildroot或者Yocto"></a>2.2 利用开源的嵌入式<code>Linux</code>系统自动构建框架<code>Buildroot</code>或者<code>Yocto</code></h2><h1 id="3、嵌入式Qt移植方法对比说明"><a href="#3、嵌入式Qt移植方法对比说明" class="headerlink" title="3、嵌入式Qt移植方法对比说明"></a>3、嵌入式Qt移植方法对比说明</h1><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230701221428.png"></p>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Boost库  3、数值转换lexical_cast</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/</url>
      
        <content type="html"><![CDATA[<p>说起数值转换，这可在我学习编程的初期一顿烦恼。字符串与文本处理曾经一直都是C++的弱项，早C++98标准仅提供了标准字符类<code>std::string</code>,相比于其他编程语言，使得它缺乏很多文本处理的高级特性。</p><h1 id="1-C-C-数值转换函数"><a href="#1-C-C-数值转换函数" class="headerlink" title="1.C/C++数值转换函数"></a>1.C/C++数值转换函数</h1><p>C/C++语言提供了几个标椎函数，可以将字符串、整数、浮点型等进行转换。</p><ul><li><code>atof()</code>：将字符串转换双精度浮点型值</li><li><code>atoi()</code>：将字符串转为整数型值</li><li><code>atol()</code>：将字符串转为长整型值</li><li><code>itoa()</code>：将字符串转为整型值</li><li><code>gcvt()</code>：将浮点型转换为字符串，取四舍五入值<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//字符串转双精度浮点值</span><br><span class="hljs-keyword">double</span> numf = <span class="hljs-built_in">atof</span>(<span class="hljs-string">&quot;3.14159&quot;</span>);<br>cout &lt;&lt; numf &lt;&lt; endl;<br><br><span class="hljs-comment">//字符串转整型值</span><br><span class="hljs-keyword">int</span> numi = <span class="hljs-built_in">atoi</span>(<span class="hljs-string">&quot;123456&quot;</span>);<br>cout &lt;&lt; numi &lt;&lt; endl;<br><br><span class="hljs-comment">//整数转字符串</span><br><span class="hljs-keyword">char</span> b[<span class="hljs-number">64</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>_itoa(<span class="hljs-number">16</span>, b, <span class="hljs-number">2</span>);<br>cout &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-comment">//浮点数转字符串</span><br><span class="hljs-keyword">char</span> d[<span class="hljs-number">64</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>_gcvt(<span class="hljs-number">1.23456</span>, <span class="hljs-number">4</span>, d);<span class="hljs-comment">//四舍五入,保留四位有效数字</span><br>cout &lt;&lt; d &lt;&lt; endl;<br></code></pre></td></tr></table></figure>执行结果：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">14159</span><br><span class="hljs-attribute">123456</span><br><span class="hljs-attribute">10000</span><br><span class="hljs-attribute">1</span>.<span class="hljs-number">235</span><br></code></pre></td></tr></table></figure><h1 id="2-Boost数值转换lexical-cast"><a href="#2-Boost数值转换lexical-cast" class="headerlink" title="2.Boost数值转换lexical_cast"></a>2.Boost数值转换lexical_cast</h1><h2 id="2-1lexical-cast用法"><a href="#2-1lexical-cast用法" class="headerlink" title="2.1lexical_cast用法"></a>2.1lexical_cast用法</h2><code>lexical_cast</code>库进行”字面值“的转换，类似C中的atoi函数，可以进行字符串与整数/浮点数之间的字面转换。<code>lexical_cast</code>位于名字空间boost中，需要包含头文件如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/lexical_cast.hpp&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost;<br></code></pre></td></tr></table></figure>示例代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/lexical_cast.hpp&gt;</span>  <span class="hljs-comment">//包含头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">using</span> boost::lexical_cast;<span class="hljs-comment">//声明，省略boost名字空间前缀</span><br><span class="hljs-keyword">using</span> boost::bad_lexical_cast;<br><span class="hljs-keyword">try</span><br>&#123;<br><span class="hljs-keyword">int</span> numi = lexical_cast&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-string">&quot;123&quot;</span>);  <span class="hljs-comment">//字符串-&gt;int</span><br><span class="hljs-keyword">bool</span> flag = lexical_cast&lt;<span class="hljs-keyword">bool</span>&gt;(<span class="hljs-string">&quot;1&quot;</span>);   <span class="hljs-comment">//字符串-&gt;bool，不能使用true/false字面值，只能使用1或0</span><br><span class="hljs-comment">//bool flagb = lexical_cast&lt;bool&gt;(&quot;true&quot;); //错误</span><br><span class="hljs-keyword">float</span> numf = lexical_cast&lt;<span class="hljs-keyword">float</span>&gt;(<span class="hljs-string">&quot;3.14159e5&quot;</span>); <span class="hljs-comment">//字符串-&gt;float</span><br><span class="hljs-keyword">double</span> numd = lexical_cast&lt;<span class="hljs-keyword">double</span>&gt;(<span class="hljs-string">&quot;3.1415&quot;</span>);  <span class="hljs-comment">//字符串-&gt;double</span><br><span class="hljs-keyword">double</span> numd_c = lexical_cast&lt;<span class="hljs-keyword">double</span>&gt;(<span class="hljs-string">&quot;1.234,x&quot;</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">//C字符串-&gt;double</span><br>cout &lt;&lt; <span class="hljs-string">&quot;数据类型转字符串&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; numi &lt;&lt; endl;<br>cout &lt;&lt; flag &lt;&lt; endl;<br>cout &lt;&lt; numf &lt;&lt; endl;<br>cout &lt;&lt; numd &lt;&lt; endl;<br>cout &lt;&lt; numd_c &lt;&lt;endl;<br><br>string strInt = lexical_cast&lt;string&gt;(<span class="hljs-number">123</span>);<br>string strFloat = lexical_cast&lt;string&gt;(<span class="hljs-number">3.1415</span>);<br>string strHex = lexical_cast&lt;string&gt;(<span class="hljs-number">0x10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;字符串转其他数据类型&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; strInt &lt;&lt;endl;<br>cout &lt;&lt; strFloat &lt;&lt; endl;<br>cout &lt;&lt; strHex &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (<span class="hljs-keyword">const</span> bad_lexical_cast &amp;e) <span class="hljs-comment">//抛出异常</span><br>&#123;<br>cout &lt;&lt;<span class="hljs-string">&quot;error:&quot;</span>&lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2错误处理"><a href="#2-2错误处理" class="headerlink" title="2.2错误处理"></a>2.2错误处理</h2>当<code>lexical_cast</code>无法执行转换操作时，会抛出异常<code>bad_lexical_cast</code>,它是<code>std::cast</code>的派生类。为了使程序更加“健壮”，在使用<code>lexical_cast</code>时，<br>我们会常使用<code>try/catch</code>快来保护代码。例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span><br>&#123;<br><span class="hljs-keyword">bool</span> flagb = lexical_cast&lt;<span class="hljs-keyword">bool</span>&gt;(<span class="hljs-string">&quot;true&quot;</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>（bad_lexical_cast&amp; e)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;error:&quot;</span>&lt;&lt;e.<span class="hljs-built_in">what</span>()&lt;&lt;end;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> Boost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Boost库  2、Windows下编译Boost库</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/</url>
      
        <content type="html"><![CDATA[<p>Boost库是一个开源免费第三方库，它是一个非常优秀的库，是C++标准的最好实践之一，因此也经常被程序员所喜爱。Boost库几乎实用任何现代操作系统，Windows、linux、UniX等。本文主要介绍在Windows下编译Boost库并使用。</p><h1 id="1-下载Boost"><a href="#1-下载Boost" class="headerlink" title="1.下载Boost"></a>1.下载Boost</h1><ul><li><input disabled="" type="checkbox"> 从<a href="https://sourceforge.net/">sourceforge</a>上下载源码。(注意下载时无法选择版本)</li><li><input checked="" disabled="" type="checkbox"> 从<a href="https://www.boost.org/">Boost官方网站</a>下载源码，自己可以选择需要的版本，这里我选择<a href="https://boostorg.jfrog.io/artifactory/main/release/1.72.0/source/">boost_1_72</a></li></ul><h1 id="2-编译安装"><a href="#2-编译安装" class="headerlink" title="2.编译安装"></a>2.编译安装</h1><p>下载后解压进入源码目录，【管理员：Ctrl+Shift+Enter】打开一个命令行,cd源码目录。</p><p>运行命令：<code>bootstrap.bat</code>，将会生成<code>b2.exe</code>和<code>bjam.exe</code>。</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/boost_bootstrap.jpg" alt="boost_bootstrap"></p><blockquote><p>使用<code>bjam.exe(或b2.exe)</code>来编译boost,这两个exe作用是一样的，bjam.exe是老版本，而b2是bjam的升级版本。</p></blockquote><h2 id="2-1默认配置"><a href="#2-1默认配置" class="headerlink" title="2.1默认配置"></a>2.1默认配置</h2><p>如果想使用默认配置，则直接在cmd执行以下命令:<code>b2.exe</code></p><blockquote><p>由于我的电脑配置低编译了半个小时。</p></blockquote><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/boost_b2.jpg" alt="boost_b2"></p><h2 id="2-2定制配置"><a href="#2-2定制配置" class="headerlink" title="2.2定制配置"></a>2.2定制配置</h2><p>参数说明：</p><ul><li><p>stage/install：<br>stage表示只生成库（dll和lib），install还会生成包含头文件的include目录。</p><p>推荐使用stage，因为install生成的这个include目录实际就是boost安装包解压缩后的boost目录（X:\boost_X_XX_X\boost，只比include目录多几个非hpp文件，都很小），所以可以直接使用，而且不同的IDE都可以使用同一套头文件，这样既节省编译时间，也节省硬盘空间。</p></li><li><p>toolset：<br>指定编译器，可选的如borland、gcc、msvc（VC6）、msvc-10.0（VS2010）、msvc-12.0（VS2013）、msvc-14.0（VS2015）等。</p></li><li><p>without/with：<br>选择不编译/编译哪些库。因为python、mpi等库我都用不着，所以排除之。还有wave、graph、math、regex、test、program_options、serialization、signals这几个库编出的静态lib都非常大，所以不需要的也可以without。这可以根据各人需要进行选择，默认是全部编译。但是需要注意，如果选择编译python的话，是需要python语言支持的，可以到python官方主页下载安装。<br>查看boost包含库的命令是<code>bjam --show-libraries</code>。</p></li><li><p>stagedir/prefix：<br>stage时使用stagedir，install时使用prefix，表示编译生成文件的路径。推荐给不同的IDE指定不同的目录，如VS2015对应的是<code>X:\boost_X_XX_X\vc10</code><br>如果使用了install参数，那么还将生成头文件目录，vc10对应的就是<br><code>X:\boost_X_XX_X\boost\bin\vc10\include\boost_X_XX_X\boost</code></p></li><li><p>build-dir：<br>编译生成的中间文件的路径。这个本人这里没用到，默认就在根目录（X:\boost_X_XX_X\boost）下，目录名为bin.v2，等编译完成后可将这个目录全部删除（没用了），所以不需要去设置。</p></li><li><p>link：<br>生成动态链接库/静态链接库。生成动态链接库需使用shared方式，生成静态链接库需使用static方式。一般boost库可能都是以static方式编译，因为最终发布程序带着boost的dll感觉会比较累赘。</p></li><li><p>runtime-link：<br>动态/静态链接C/C++运行时库。同样有shared和static两种方式，这样runtime-link和link一共可以产生4种组合方式，各人可以根据自己的需要选择编译。</p></li><li><p>threading：<br>单/多线程编译。一般都写多线程程序，当然要指定multi方式了；如果需要编写单线程程序，那么还需要编译单线程库，可以使用single方式。</p></li><li><p>debug/release：<br>编译debug/release版本。一般都是程序的debug版本对应库的debug版本，所以两个都编译。</p></li></ul><p>由于我电脑安装多个VS版本，这里指定VS2015，多线程编译同时编译debug与release版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">b2 stage --toolset=msvc-14.0 --without-python --stagedir=&quot;C:\boost_1_72_0\bin\vc14&quot; link=static runtime-link=shared runtime-link=static threading=multi debug release<br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/boost_b2_%E5%AE%9A%E5%88%B6%E7%BC%96%E8%AF%91.jpg" alt="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/boost_b2_%E5%AE%9A%E5%88%B6%E7%BC%96%E8%AF%91.jpg"></p><h1 id="3-库名规则"><a href="#3-库名规则" class="headerlink" title="3.库名规则"></a>3.库名规则</h1><p>在<code>C:\boost_1_72_0\bin\vc14\lib</code>目录下看到生成的静态库。如下图所示：</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/boost_lib.jpg" alt="boost_lib"></p><ul><li><p>lib：在 Windows上；只有普通的静态库使用lib前缀；导入库和DLL不使用;</p></li><li><p>boost_XXX：所有boost库名文件以 boost_xxx开头;</p></li><li><p>-vc141：Toolset标记：标识了构建该库所用的 toolset和版本。</p></li><li><p>-mt：Threading标记：标识构建该库启用了多线程支持。不支持多线程的库没有-mt</p></li><li><p>g：使用标准库和运行时支撑库的调试版本</p></li><li><p>d：构建代码的调试版本</p></li><li><p>s：静态链接到C++标准库和编译器运行时支撑库</p></li><li><p>y：使用 Python的特殊调试构建</p></li><li><p>p：使用 STLPort标准库而不是编译器提供的默认库</p></li><li><p>n：使用 STLPort已被弃用的”native iostreams”</p></li><li><p>-1_72：版本标记：完整的Boost发布号，下划线代替点</p></li><li><p>.lib：扩展名：取决于操作系统。.</p><ul><li>在大多数unix平台上：.a是静态库，.so是共享库。</li><li>在 Windows上：.dll表示共享库，.Iib是静态或导入库。</li></ul></li></ul><h1 id="4-Boost编译验证"><a href="#4-Boost编译验证" class="headerlink" title="4.Boost编译验证"></a>4.Boost编译验证</h1><h2 id="4-1不使用链接库"><a href="#4-1不使用链接库" class="headerlink" title="4.1不使用链接库"></a>4.1不使用链接库</h2><p>需要配置项目属性，不然无法打开源文件。配置方式（项目-&gt;属性-&gt;C/C++-&gt;常规-&gt;附加包含目录）<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/VS-boost%E9%85%8D%E7%BD%AE.jpg" alt="VS-boost配置"></p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/version.hpp&gt;</span> <span class="hljs-comment">//包含Boost头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/config.hpp&gt;</span>  <span class="hljs-comment">//包含Boost头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; BOOST_VERSION &lt;&lt; endl; <span class="hljs-comment">//Boost版本号  数字形式的版本号</span><br>cout &lt;&lt; BOOST_LIB_VERSION &lt;&lt; endl; <span class="hljs-comment">//Boost版本号 字符串形式的版本号</span><br><br>cout &lt;&lt; BOOST_PLATFORM &lt;&lt; endl; <span class="hljs-comment">//操作系统</span><br>cout &lt;&lt; BOOST_COMPILER &lt;&lt; endl; <span class="hljs-comment">//编译器</span><br>cout &lt;&lt; BOOST_STDLIB &lt;&lt; endl;   <span class="hljs-comment">//标准库</span><br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">107200</span><br><span class="hljs-number">1</span>_72<br>Win32<br>Microsoft Visual C++ version <span class="hljs-number">14.0</span><br>Dinkumware standard library version <span class="hljs-number">650</span><br></code></pre></td></tr></table></figure><blockquote><p>由于VS编译器可以自动链接到库，所有我们不需要手动添加依赖库</p></blockquote><h2 id="4-2使用编译库"><a href="#4-2使用编译库" class="headerlink" title="4.2使用编译库"></a>4.2使用编译库</h2><p>在我们使用有些库的时候就需要链接生成的静态库，下面有两种静态库的链接方式：</p><h3 id="4-2-1VS配置库目录"><a href="#4-2-1VS配置库目录" class="headerlink" title="4.2.1VS配置库目录"></a>4.2.1VS配置库目录</h3><ul><li><p>项目-&gt;属性-&gt;C/C++-&gt;常规-&gt;附加包含目录<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/VS-boost%E9%85%8D%E7%BD%AE.jpg" alt="VS-boost配置"></p></li><li><p>项目-&gt;链接器-&gt;常规-&gt;附加库依赖项<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/boost_%E9%85%8D%E7%BD%AE%E9%99%84%E5%8A%A0%E5%BA%93%E7%9B%AE%E5%BD%95.jpg" alt="VS-boost配置2"></p></li><li><p>项目-&gt;属性-&gt;链接器-&gt;输入-&gt;附加库依赖库<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/boost/boost_%E9%99%84%E5%8A%A0%E4%BE%9D%E8%B5%96%E9%A1%B9.jpg" alt="Boost输入附加库依赖库"></p></li></ul><h3 id="4-2-2预处理指令添加静态库"><a href="#4-2-2预处理指令添加静态库" class="headerlink" title="4.2.2预处理指令添加静态库"></a>4.2.2预处理指令添加静态库</h3><p>使用预处理指令的方式指出我们所需要的库。这样可以防止我们在切换编译方式的时候都需要进行配置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;libboost_date_time-vc140-mt-gd-x32-1_72.lib&quot;</span>)</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> Boost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Boost库  1、Linux下编译Boost库</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Boost/</url>
      
        <content type="html"><![CDATA[<p>Boost是一个功能强大、构件精巧、跨平台、开源并完全免费的C++程序库。它由C++标准委员会库工作组成员发起，其中有些内容经常成为下一代C++标准库的内容，在C++社区中影响甚大，是不折不扣的“准”标准库。</p><p>参考书籍：</p><ul><li><input checked="" disabled="" type="checkbox"> 《Boost程序库完全开发指南》</li><li><input disabled="" type="checkbox"> 《Boost程序库探秘》</li></ul><p>学习资料：</p><ul><li><a href="https://www.cnblogs.com/lidabo/p/9294874.html">Boost C++库 中文教程</a></li><li><a href="https://tangxing.blog.csdn.net/article/details/116393985">https://tangxing.blog.csdn.net/article/details/116393985</a></li></ul><h1 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h1><p>操作系统：<code>Ubuntu 20.04.1</code><br>Boost版本：<code>boost_1_72_0</code><br>编译器：<code>使用GCC 9.4.0</code></p><h1 id="2-Boost库源码编译安装"><a href="#2-Boost库源码编译安装" class="headerlink" title="2.Boost库源码编译安装"></a>2.Boost库源码编译安装</h1><p>Boost提供源码形式的安装包，可以从<a href="https://www.boost.org/">Boost官方网站</a>下载。</p><p>Boost_1_72_0下载,<a href="https://www.boost.org/users/history/version_1_72_0.html">https://www.boost.org/users/history/version_1_72_0.html)</a></p><h2 id="2-1下载并解压"><a href="#2-1下载并解压" class="headerlink" title="2.1下载并解压"></a>2.1下载并解压</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget -O https://boostorg.jfrog.io/artifactory/main/release/1.72.0/<span class="hljs-built_in">source</span>/boost_1_72_0.tar.gz<br>tar xzvf boost_1_72_0.tar.gz<br><span class="hljs-built_in">cd</span> boost_1_72_0/<br></code></pre></td></tr></table></figure><h2 id="2-2目录结构"><a href="#2-2目录结构" class="headerlink" title="2.2目录结构"></a>2.2目录结构</h2><p>Boost压缩包解压后有上万个文件，但是其目录结构确很清晰：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">boost_1_72_0/             #存放配置脚本和说明文件<br>boost #最重要的目录，90%以上的Boost程序库源码都在这里<br>accumulators #累加器库<br>algorithm#算法库<br>align       #内存对齐库<br>archive     #序列化库<br>asio        #异步并发库<br>assign      #赋值初始化库<br>atomic      #原子操作库<br>beast       #高级网络通信库<br>bimap       #双向关联数组<br>bind        #bind表达式<br>chrono      #时间处理库<br>...         #其他库......<br>yap         #表达式模版库<br>doc#HTML格式的文档，也可以生成PDF格式的文档<br>libs#所有组件的示例、测试、编译代码和说明文档<br>more        #库作者的相关文档<br>status      #可用于测试Boost库的各个组件<br>tools       #b2、quickbook等自带工具<br></code></pre></td></tr></table></figure><h2 id="2-3安装方式"><a href="#2-3安装方式" class="headerlink" title="2.3安装方式"></a>2.3安装方式</h2><h3 id="2-3-1快捷安装"><a href="#2-3-1快捷安装" class="headerlink" title="2.3.1快捷安装"></a>2.3.1快捷安装</h3><p>在Linux操作系统下暗转Boost很容易，直接在解压后的目录执行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">./bootstrap.sh   #编译前的配置工作<br>./b2 install #真正地编译并安装<span class="hljs-built_in">Boost</span>(快捷安装)<br></code></pre></td></tr></table></figure><p>采用上面的不指定额外选项，Boost编译release版本的库文件，而把头文件安装到“/usr/local/include”中，把库文件安装到“/usr/loacl/lib”中</p><h3 id="2-3-2完全安装"><a href="#2-3-2完全安装" class="headerlink" title="2.3.2完全安装"></a>2.3.2完全安装</h3><p>我们也可以完全编译Boost,使用buildtyp选项指定编译类型（如果不指定编译类型则默认为release模式）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">./bootstrap.sh   <span class="hljs-comment">#编译前的配置工作</span><br>./b2 --buildtype=complete install<br></code></pre></td></tr></table></figure><h3 id="2-3-3定制安装"><a href="#2-3-3定制安装" class="headerlink" title="2.3.3定制安装"></a>2.3.3定制安装</h3><p>其实我们在开发的过程中这些库并不会全部使用，只使用其中的一部分。因为我们就可以通过自己的选择来编译使用的库。</p><p>注意：</p><ul><li>在执行安装时，可以指定 prefix 参数，设定安装路径；如果不加该参数，则安装后，默认的头文件在 /usr/local/include/boost，库文件在 /usr/local/lib/ 目录.</li><li>如果运行时提示无法加载某个库文件，则把 /usr/local/lib 下所有 boost 的库文件拷贝到 /usr/lib 目录即可.</li><li>boost 库的卸载，直接将 /usr/local/include/boost 和 /usr/local/lib 中和 boost 有关的文件删除即可.</li></ul><h1 id="3-Boost编译验证"><a href="#3-Boost编译验证" class="headerlink" title="3.Boost编译验证"></a>3.Boost编译验证</h1><h2 id="3-1Boost版本查看"><a href="#3-1Boost版本查看" class="headerlink" title="3.1Boost版本查看"></a>3.1Boost版本查看</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cat /usr/local/include/boost/version.hpp | grep <span class="hljs-string">&quot;BOOST_LIB_VERSION&quot;</span><br>#输出如：<br><span class="hljs-comment">//  BOOST_LIB_VERSION must be defined to be the same as BOOST_VERSION</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BOOST_LIB_VERSION <span class="hljs-meta-string">&quot;1_72&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-2Boost程序测试"><a href="#3-2Boost程序测试" class="headerlink" title="3.2Boost程序测试"></a>3.2Boost程序测试</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/version.hpp&gt;</span>  <span class="hljs-comment">//包含 Boost 头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/config.hpp&gt;</span>  <span class="hljs-comment">//包含 Boost 头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; BOOST_VERSION &lt;&lt; endl;  <span class="hljs-comment">//Boost 版本号</span><br>    cout &lt;&lt; BOOST_LIB_VERSION &lt;&lt; endl;  <span class="hljs-comment">//Boost 版本号</span><br>    cout &lt;&lt; BOOST_PLATFORM &lt;&lt; endl;  <span class="hljs-comment">//操作系统</span><br>    cout &lt;&lt; BOOST_COMPILER &lt;&lt; endl;  <span class="hljs-comment">//编译器</span><br>    cout &lt;&lt; BOOST_STDLIB &lt;&lt; endl;  <span class="hljs-comment">//标准库</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用g++编译：<br><code>g++ -o a.out test.cpp</code></p><h1 id="4-卸载Boost库"><a href="#4-卸载Boost库" class="headerlink" title="4.卸载Boost库"></a>4.卸载Boost库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">卸载旧版本</span><br><span class="hljs-meta">#</span><span class="bash"> uninstall dpkg</span><br>sudo apt --purge remove libboost-dev<br>sudo apt --purge remove libboost-all-dev<br>sudo apt --purge autoremove libboost-all-dev<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 卸载我们从源代码安装的版本</span>  <br>sudo rm -rf /usr/lib/libboost_*<br>sudo rm -rf /usr/include/boost<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> Boost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用FastGithub进行GitHub加速访问</title>
      <link href="/posts/%E7%89%88%E6%9C%AC%E5%BA%93/GitHub/"/>
      <url>/posts/%E7%89%88%E6%9C%AC%E5%BA%93/GitHub/</url>
      
        <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h1><p>用到<code>Github</code>的都知道，网速那叫做一个卡。本质原因在于<code>GitHub</code>的服务器在美国，在国内我们访问外网那个速度可想而知。若你嫌弃<code>GitHub</code>可以移步到<code>Gitee</code>（码云）是开源中国社区推出的代码托管协作开发平台。</p><h1 id="2-FastGithub"><a href="#2-FastGithub" class="headerlink" title="2.FastGithub"></a>2.FastGithub</h1><ol><li>下载<a href="https://github.com/dotnetcore/FastGithub/releases">https://github.com/dotnetcore/FastGithub/releases</a> ，解压运行FastGithub.exe软件。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/FastGithub.jpg" alt="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/FastGithub.jpg"></li><li>到导入证书，在下载的目录下找到<code>FastGithub\CACert\FastGithub.cer</code>傻瓜式安装即可。</li><li>为了方便直接将此软件设置为开机自启动模式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 版本库 </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之笔记本安装Ubuntu 20.04设置盒盖不休眠</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在家有一台闲置的老笔记本打算用来做私有云服务器，于是给安装了Ubuntu 20.04。希望能够合上盖子，让在角落里默默地发挥余热。</p><h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><p>修改Login配置文件 </p><ul><li><p>打开终端,编辑文档： </p><p><code>sudo vim /etc/systemd/logind.conf</code></p></li><li><p>找到其中一行</p><p><code>#HandleLidSwitch=suspend</code></p></li><li><p>把前面#删除，将<code>suspend</code>更改为<code>ignore</code>: <code>HandleLidSwitch=ignore</code> </p></li><li><p>保存。然后重启服务：</p><p><code>sudo systemctl restart systemd-logind</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之安装ssh服务器</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>用Xshell连接虚拟机（Liunx）时，发生了这一项错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Connecting to 192.168.198.141:22...<br>Could not connect to &#x27;192.168.198.141&#x27; (port 22): Connection failed.<br></code></pre></td></tr></table></figure><h1 id="二、解决问题"><a href="#二、解决问题" class="headerlink" title="二、解决问题"></a>二、解决问题</h1><h2 id="2-1-判断是否安装ssh服务"><a href="#2-1-判断是否安装ssh服务" class="headerlink" title="2.1 判断是否安装ssh服务"></a>2.1 判断是否安装ssh服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -e|grep ssh<br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706222443.png"></p><h2 id="2-2-安装ssh服务器"><a href="#2-2-安装ssh服务器" class="headerlink" title="2.2 安装ssh服务器"></a>2.2 安装ssh服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706222521.png"></p><h2 id="2-3-判断是否启动"><a href="#2-3-判断是否启动" class="headerlink" title="2.3 判断是否启动"></a>2.3 判断是否启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -e|grep ssh<br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706222730.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之Ubuntu 20.04卸载不常用的软件</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu在安装后直接卸载Firefox浏览器、LibreOffic办公四件套安装平替软件Googe浏览器与WPS。</p><h1 id="一、卸载Firefox浏览器"><a href="#一、卸载Firefox浏览器" class="headerlink" title="一、卸载Firefox浏览器"></a>一、卸载Firefox浏览器</h1><p>参考：<code>https://blog.csdn.net/liuyuekelejic/article/details/106013185</code></p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg --get-selections  | grep firefox<br>sudo apt-get purge  firefox firefox-locale-en firefox-locale-zh-hans<br></code></pre></td></tr></table></figure><p>操作过程，如图所示：</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706212805.png"></p><h1 id="二、卸载-LibreOffice"><a href="#二、卸载-LibreOffice" class="headerlink" title="二、卸载 LibreOffice"></a>二、卸载 LibreOffice</h1><p>参考： <code>https://www.linuxmi.com/ubuntu-20-04-xiezai-libreoffice.html</code></p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt remove libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer  #卸载libreoffice表格、libreoffice绘图、幻灯片工具、word文档工具<br>sudo apt remove libreoffice* #把其它libreoffice相关的都卸载了<br>sudo apt purge libreoffice*  #清除libreoffice配置文件<br>sudo apt autoremove<br><br></code></pre></td></tr></table></figure><h1 id="三、清理Ubuntu系统缓存"><a href="#三、清理Ubuntu系统缓存" class="headerlink" title="三、清理Ubuntu系统缓存"></a>三、清理Ubuntu系统缓存</h1><p>参考：<code>https://zhuanlan.zhihu.com/p/569657780</code><br>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo du -sh /var/cache/apt/archives  //得到你的 Apt 缓存<br>sudo apt-get clean  //清理 Apt 缓存<br>sudo apt-get autoremove --purge      //删除旧的内核<br>sudo apt install bleachbit  //安装GUI清除工具<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之Ubuntu 20.04安装常用工具</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<p>在我们使用Linux时，需要安装一个必备的工具，但是有时候又记不住命令，一条一条的安装太麻烦了。那有没有什么方式可以方便的安装。使用linux的都知道使用<code>make</code>来构建和管理自己的工程。<br>至于有关Makefile的详细学习可以参考其他文章，此处不作介绍。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs shell">install:<br>sudo apt-get update #更新软件列表<br>sudo apt-get upgrade #更新软件<br>sudo apt-get install aptitude #安装另外一个与apt-get功能相近的下载工具<br>sudo apt-get install rpm #安装Centos的rpm安装包<br>sudo apt-get install net-tools #网络工具 ifconfig<br>sudo apt-get install htop #htop是top的升级版,允许用户监视系统上运行的进程<br>sudo apt-get install ncdu #ncdu命令是对传统du命令功能上的增强<br>sudo apt-get install rar   #解压工具 <br>sudo apt-get install tree  #以树形状显示当前文件和目录<br>sudo apt-get install lrzsz #上传文件  #sz下载，rz上传<br><br>sudo apt-get install vim   #vim编译器<br>sudo apt-get install gcc<br>sudo apt-get install g++<br>sudo apt-get install gdb  #gdb调试器<br>sudo apt-get install make <br><br>sudo apt-get install cloc #代码量统计工具<br><br>sudo apt-get install openssh-server #安装ssh服务器，启动服务sudo systemctl start ssh<br>ftp:<br>sudo apt-get install vsftpd<br>sudo apt-get install lftp<br>sudo apt-get install openssh-server #安装ssh服务器（否则无法使用ssh），启动服务sudo systemctl start ssh<br>sudo apt-get install nfs-kernel-server<br>software:<br>sudo apt-get install flameshot #截图工具 设置-&gt;键盘快捷键中添加<br>sudo apt-get install vlc #播放器<br><span class="hljs-meta">#</span><span class="bash">apt-cache policy wine <span class="hljs-comment"># 查看最新版本</span></span><br>sudo apt-get install wine #安装默认的wine<br>mysqll:<br><span class="hljs-meta">#</span><span class="bash">Ubuntu 20.04 源仓库中最新的 MySQL 版本号是 MySQL 8.0</span><br>sudo apt install mysql-server<br>sudo systemctl status mysql #想要验证 MySQL 服务器正在运行<br><span class="hljs-meta">#</span><span class="bash">sudo mysql_secure_installation  <span class="hljs-comment">#MySQL 安装文件附带了一个名为mysql_secure_installation的脚本，它允许你很容易地提高数据库服务器的安全性。</span></span><br>mysql-5.7:<br><span class="hljs-meta">#</span><span class="bash"> 安装mysql5.7服务端</span><br>sudo apt-get install mysql-server-5.7<br><span class="hljs-meta">#</span><span class="bash"> 安装mysql5.7客户端</span><br>sudo apt-get install mysql-client-5.7<br><span class="hljs-meta">#</span><span class="bash"> 使用c/c++等语言操作mysql的动态链接库，如果不需要可不安装</span><br>sudo apt install libmysqlclient-dev<br><span class="hljs-meta">#</span><span class="bash">ubuntu安装MySQL的可视化管理工具</span><br>sudo apt-get install mysql-workbench<br>mysql-5.7-remove:<br><span class="hljs-meta">#</span><span class="bash"> 卸载mysql：</span><br><span class="hljs-meta">#</span><span class="bash">sudo apt-get autoremove mysql* --purge</span><br>sudo apt-get remove mysql-server<br>sudo apt-get remove mysql-common<br><span class="hljs-meta">#</span><span class="bash"> 清理残留数据</span><br>sudo dpkg -l |grep mysql|awk &#x27;&#123;print $2&#125;&#x27; |sudo xargs dpkg -P<br>sudo rm -rf /etc/mysql/<br>sudo rm -rf /var/lib/mysql<br><span class="hljs-meta">#</span><span class="bash"> 检查是否删除完毕</span><br>whereis mysql<br>sudo find / -name mysql<br>git:<br>sudo apt-get install git<br>git --version #查看git的版本<br>git config --global user.name &quot;Aurora811&quot; #配置个人的用户名<br>git config --global user.email 15029502113@163.com #配置个人的邮箱地址<br>git config --global user.name  <br>git config --global user.email<br>git config --list #查看已有的配置信息<br>svnn:<br>sudo apt-get install subversion #安装svn<br>svn --version<br>clean:<br>sudo apt-get clean #清理所有安装包<br>remove:<br>sudo apt-get remove tree<br>wan:<br>sudo apt-get install sl #跑火车,使用时sl<br>sudo apt-get install libaa-bin #在终端黑色界面上看到火..,使用aafire<br>sudo apt-get install fortune #输出一句话<br>sudo apt-get install cowsay #用ASCII字符串打印动物,使用coway www.zhiguoxin.cn<br>sudo apt-get install cmatrix #有黑客帝国效果,使用cmatrix<br>sudo apt-get install figlet #艺术字生成器 使用figlet fuck you <br>sudo apt-get install toilet #使用 toilet i love you<br>sudo apt-get install oneko #桌面会生成一个喵星人，使用oneko<br>sudo apt-get install screenfetch #查看系统，主题信息,使用screenfetch<br>sudo apt-get install linuxlogo #显示linux版本logo图片系统信息 使用linux_logo<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之Ubuntu 20.04下安装常用软件</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%B8%80%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6">一、安装常用的软件</a><ul><li><a href="#11vs-code%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%99%A8">1.1VS code代码编译器</a></li><li><a href="#2dbeaver%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6">2、DBeaver数据库管理软件</a></li><li><a href="#3utools%E5%B7%A5%E5%85%B7">3、utools工具</a></li><li><a href="#4wps">4、wps</a></li><li><a href="#5%E7%81%AB%E7%84%B0%E6%88%AA%E5%9B%BEflameshot">5、火焰截图(flameshot)</a></li><li><a href="#6google">6、Google</a></li><li><a href="#7%E6%92%AD%E6%94%BE%E5%99%A8vlc">7、播放器(vlc)</a></li></ul></li></ul><!-- /TOC --><p>安装一些Ubuntu桌面系统常用的软件</p><h1 id="一、安装常用的软件"><a href="#一、安装常用的软件" class="headerlink" title="一、安装常用的软件"></a>一、安装常用的软件</h1><h2 id="1-1VS-code代码编译器"><a href="#1-1VS-code代码编译器" class="headerlink" title="1.1VS code代码编译器"></a>1.1VS code代码编译器</h2><blockquote><p>注意：不要在Ubuntu自带的商店安装，可能出现无法输入中文的bug。建议直接在官方下载<code>deb</code>包</p></blockquote><p>从<a href="https://code.visualstudio.com/Download">官网下载界面</a>下载deb包，并安装直接执行下面命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i code_1.62.3-1637137107_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="2、DBeaver数据库管理软件"><a href="#2、DBeaver数据库管理软件" class="headerlink" title="2、DBeaver数据库管理软件"></a>2、DBeaver数据库管理软件</h2><p>从<a href="https://dbeaver.io/download/">官网下载页面</a>下载 <code>DBeaver Community Edition</code> 的 <code>deb</code> 包，并安装直接执行下面命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i dbeaver-ce_21.3.0_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="3、utools工具"><a href="#3、utools工具" class="headerlink" title="3、utools工具"></a>3、utools工具</h2><p>从<a href="https://u.tools/">官网下载页面</a>下载deb包，并安装直接执行下面命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i utools_1.3.3_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="4、wps"><a href="#4、wps" class="headerlink" title="4、wps"></a>4、wps</h2><p>从<a href="https://linux.wps.cn/">官网下载网页</a>下载deb包，并安装<br>安装完成后打开wps,提示系统缺失字体<br>寻找一台 Windows 电脑，将 C:\Windows\Fonts 中对应的字体复制到 Ubuntu 的 /usr/share/fonts/wps-office/ 目录下，重新启动 WPS 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i wps-office_11.1.0.10702_amd64.deb<br></code></pre></td></tr></table></figure><h2 id="5、火焰截图-flameshot"><a href="#5、火焰截图-flameshot" class="headerlink" title="5、火焰截图(flameshot)"></a>5、火焰截图(flameshot)</h2><p><code>sudo apt-get install flameshot</code></p><h2 id="6、Google"><a href="#6、Google" class="headerlink" title="6、Google"></a>6、Google</h2><p>在<a href="https://www.google.com/intl/zh-CN/chrome/">官网下载网页</a>下载deb包，并安装直接执行下面命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">直接使用命令下载安装</span><br>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb<br>sudo apt-get install ./google-chrome-stable_current_amd64.deb<br><span class="hljs-meta">#</span><span class="bash">也可以使用dpkg命令进行安装</span><br>sudo dpkg -i google-chrome-stable_current_amd64.deb<br>rm google-chrome-stable_current_amd64.deb  //删除安装包<br></code></pre></td></tr></table></figure><h2 id="7、播放器-vlc"><a href="#7、播放器-vlc" class="headerlink" title="7、播放器(vlc)"></a>7、播放器(vlc)</h2><p><code>sudo apt-get install vlc</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之Ubuntu 20.04下安装宝塔面板</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%B8%80%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94">一、安装宝塔</a></li><li><a href="#%E4%BA%8C%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">二、宝塔面板管理常用命令</a></li></ul><!-- /TOC --><h1 id="一、安装宝塔"><a href="#一、安装宝塔" class="headerlink" title="一、安装宝塔"></a>一、安装宝塔</h1><p><a href="https://www.bt.cn/bbs/thread-19376-1-1.html">安装宝塔</a><br>我使用的是Ubuntu系统,在命令行输入如下的连接：<br>(其他的系统参考安装宝塔的链接)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; sudo bash install.sh<br></code></pre></td></tr></table></figure><h1 id="二、宝塔面板管理常用命令"><a href="#二、宝塔面板管理常用命令" class="headerlink" title="二、宝塔面板管理常用命令"></a>二、<a href="https://www.bt.cn/btcode.html">宝塔面板管理常用命令</a></h1><p>在root用户下，输入以下命令：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy">sudo bt <span class="hljs-comment">//宝塔工具箱</span><br><span class="hljs-regexp">/etc/</span>init.d<span class="hljs-regexp">/bt stop  /</span>/停止<br><span class="hljs-regexp">/etc/</span>init.d<span class="hljs-regexp">/bt start  /</span>/启动<br><span class="hljs-regexp">/etc/</span>init.d<span class="hljs-regexp">/bt restart /</span>/重启<br><span class="hljs-regexp">/etc/</span>init.d<span class="hljs-regexp">/bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f /</span>etc<span class="hljs-regexp">/init.d/</span>bt &amp;&amp; rm -rf <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel /</span>/卸载<br>cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/port.pl  /</span>/ 查看当前面板端口<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio使用技巧</title>
      <link href="/posts/%E5%B7%A5%E5%85%B7/Visual-Studio/"/>
      <url>/posts/%E5%B7%A5%E5%85%B7/Visual-Studio/</url>
      
        <content type="html"><![CDATA[<h1 id="1-VS各个版本比较"><a href="#1-VS各个版本比较" class="headerlink" title="1.VS各个版本比较"></a>1.VS各个版本比较</h1><p>对于<a href="https://blog.csdn.net/ljsant/article/details/80887501">VS版本优点和发展</a>请参考此篇文章。</p><h2 id="1-1选择VS版本"><a href="#1-1选择VS版本" class="headerlink" title="1.1选择VS版本"></a>1.1选择VS版本</h2><p>这里推荐尽量使用VS 2013以后的版本。</p><h2 id="1-2下载地址"><a href="#1-2下载地址" class="headerlink" title="1.2下载地址"></a>1.2下载地址</h2><ul><li>点击<a href="https://msdn.itellyou.cn/"> MSDN</a>,选择<strong>开发人员工具</strong></li><li><a href="https://my.visualstudio.com/Downloads?q=visual%20studio%202017&wt.mc_id=o~msft~vscom~older-downloads">Microsoft官网</a></li></ul><h2 id="1-3VS使用技巧"><a href="#1-3VS使用技巧" class="headerlink" title="1.3VS使用技巧"></a>1.3VS使用技巧</h2><p><a href="https://tangxing.blog.csdn.net/article/details/111545664?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.no_search_link">VS使用技巧</a></p><h1 id="2-VS必备插件"><a href="#2-VS必备插件" class="headerlink" title="2.VS必备插件"></a>2.VS必备插件</h1><h2 id="2-1Visual-Assist番茄助手"><a href="#2-1Visual-Assist番茄助手" class="headerlink" title="2.1Visual Assist番茄助手"></a>2.1Visual Assist番茄助手</h2><p><a href="https://blog.csdn.net/xmcy001122/article/details/113833494">Visual Assist番茄助手使用教程</a></p><h2 id="2-2AStyle代码格式化"><a href="#2-2AStyle代码格式化" class="headerlink" title="2.2AStyle代码格式化"></a>2.2AStyle代码格式化</h2><ol><li>下载<a href="https://marketplace.visualstudio.com/items?itemName=Lukamicoder.AStyleExtension2017">AStyle代码格式化</a>插件</li><li>双击AStyleExtension.vsix安装插件</li><li>VS2017菜单-&gt;工具-&gt;选项，出现ASytle Formatter代表成功</li><li>点击Edit，把下面配置粘贴进去。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">--style=google --indent=spaces=<span class="hljs-number">4</span> --align-pointer=type --indent-classes --indent-namespaces --<span class="hljs-keyword">break</span>-blocks --<span class="hljs-keyword">break</span>-blocks=all --pad-oper --pad-header --mode=c--style=google --indent=spaces=<span class="hljs-number">4</span> --align-pointer=type --indent-classes --indent-namespaces --<span class="hljs-keyword">break</span>-blocks --<span class="hljs-keyword">break</span>-blocks=all --pad-oper --pad-header --mode=c<br></code></pre></td></tr></table></figure></li><li>勾选”Format on Save“，即保存文件时，自动格式化，无需按快捷键。</li><li>任意打开文件，按Ctrl + S保存，查看格式化效果。<blockquote><p>补充说明：<br>–style=google代表使用google c++代码风格，可以看到格式化前{}单独占一行，格式化后则第一个{和函数名在同一行。google c++代码规范可以参考这里：<br><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/">Google 开源项目风格指南 (中文版) C++ 风格指南</a></p></blockquote></li></ol><h2 id="2-3qt-VS插件"><a href="#2-3qt-VS插件" class="headerlink" title="2.3qt-VS插件"></a>2.3qt-VS插件</h2><p>请参考<a href="https://aurora811.gitee.io/posts/5cba155b/">Qt环境搭建</a></p><h2 id="2-4CodeMaid"><a href="#2-4CodeMaid" class="headerlink" title="2.4CodeMaid"></a>2.4CodeMaid</h2><p><a href="http://www.codemaid.net/">CodeMaid</a> 快速整理代码文件，规范你的代码，提高代码阅读体验。 代码自动对齐，格式化代码.</p><p>推荐理由：我非常喜欢他的一点就是代码自动格式化，良好的代码前提是整理好你的代码，在团队协作开发时，提交代码容易不小心改动一行或者一个空格， 这个工具可有效避免。</p><h2 id="2-5Indent-Guides"><a href="#2-5Indent-Guides" class="headerlink" title="2.5Indent Guides"></a>2.5Indent Guides</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=SteveDowerMSFT.IndentGuides">Indent Guides</a> 在Visual Studio文本编辑器窗口中显示缩进和页面宽度 代码结构一目了然，提高代码阅读体验。 只对VS2015和VS2013有用，VS2017之后的版本已经自带该功能了。</p><p>推荐理由：可规范代码风格，提高阅读体验。VS2017之后的版本已经自带该功能了</p><h2 id="2-6Output-enhancer"><a href="#2-6Output-enhancer" class="headerlink" title="2.6Output enhancer"></a>2.6Output enhancer</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=NikolayBalakin.Outputenhancer">Output enhancer </a>将output窗口的输出的文字添加样式 值得赶紧试试的插件，给输出内容着色。</p><p>推荐理由：调试bug的时候，不同的文字颜色，有利于快速识别，良心插件，值得推荐</p><h2 id="1-7JSON-Viewer"><a href="#1-7JSON-Viewer" class="headerlink" title="1.7JSON Viewer"></a>1.7JSON Viewer</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=MykolaTarasyuk.JSONViewer">SON Viewer</a> 用于显示和处理JSON数据。安装后，可以在主菜单中找到它：工具-&gt; JSON Viewer。 能够从剪贴板打开初步格式的JSON数据 可以打开空的临时JSON文件 比较两个JSON数据的能力 评估JSONPath表达式的能力</p><p>推荐理由:处理json数据非常方便。</p><p>更多好用插件移步此文章<a href="https://blog.csdn.net/kebi007/article/details/103735669">https://blog.csdn.net/kebi007/article/details/103735669</a></p><h1 id="3-VS常用快捷键"><a href="#3-VS常用快捷键" class="headerlink" title="3.VS常用快捷键"></a>3.VS常用快捷键</h1><p>注释：<code>ctrl+k+c</code><br>取消注释：<code>ctrl+k+u</code><br>复制、剪贴、粘贴某行：<code>ctrl+c,ctrl+x,ctrl+v</code><br>删除整行：<code>ctrl+l</code><br>交换上下行：<code>shift+alt+t</code><br>格式化部分代码：<code>选中部分-&gt;ctrl+k,ctrl+f</code><br>整篇代码格式化：<code>ctrl+k，ctrl+d</code><br>跳转到指定行：<code>ctrl+G</code><br>查找“{}”：<code>ctrl+[</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Visual Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之Ubuntu 20.04版本更新软件源为国内源</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、备份配置文件"><a href="#一、备份配置文件" class="headerlink" title="一、备份配置文件"></a>一、备份配置文件</h1><p><code>sudo cp /etc/apt/sources.list  /etc/apt/sources.list.bak</code></p><h1 id="二、编辑配置文件"><a href="#二、编辑配置文件" class="headerlink" title="二、编辑配置文件"></a>二、编辑配置文件</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo apt-get install vim  <span class="hljs-regexp">//</span>安装vim<br>sudo  vim <span class="hljs-regexp">/etc/</span>apt/sources.list<br></code></pre></td></tr></table></figure><blockquote><p>注：阿里云镜像源、清华大学镜像源、网易镜像源、中科大镜像源中任选择一个</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp">#阿里云镜像源<br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><br>#清华大学镜像源<br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><br>#网易镜像源<br>deb http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br>deb http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br>deb-src http:<span class="hljs-comment">//mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><br>#中科大镜像源<br>deb https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse </span><br>deb https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse </span><br>deb https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse </span><br>deb https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse </span><br>deb-src https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse </span><br>deb-src https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse </span><br>deb-src https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse </span><br>deb-src https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse </span><br>deb-src https:<span class="hljs-comment">//mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><h1 id="三、更新软件列表与软件"><a href="#三、更新软件列表与软件" class="headerlink" title="三、更新软件列表与软件"></a>三、更新软件列表与软件</h1><p>编译文件完成后，执行下面命令更新</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> update #更新软件列表<br>sudo apt-<span class="hljs-builtin-name">get</span><span class="hljs-built_in"> upgrade </span>#更新软件<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系列之VMware 16安装Ubuntu 20.04</title>
      <link href="/posts/Linux/Ubuntu/"/>
      <url>/posts/Linux/Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>记录一下在VMware下安装Ubuntu的过程，以及使用过程。</p><h1 id="二、提前准备"><a href="#二、提前准备" class="headerlink" title="二、提前准备"></a>二、提前准备</h1><ul><li><p>VMware 虚拟机软件</p><p> 这里可以自行选择，建议选择比较高的版本。这里我选择是<code>VMware Workstation 14 Pro </code></p></li><li><p>Ubuntu系统镜像</p><p>这里我选择是<code>ubuntu-20.04.6-desktop-amd64.iso</code>,你也可以选择其他版本的镜像文件，操作过程几乎一样。</p></li></ul><h1 id="三、安装Ubuntu系统到虚拟机"><a href="#三、安装Ubuntu系统到虚拟机" class="headerlink" title="三、安装Ubuntu系统到虚拟机"></a>三、安装Ubuntu系统到虚拟机</h1><h2 id="3-1打开虚拟机软件"><a href="#3-1打开虚拟机软件" class="headerlink" title="3.1打开虚拟机软件"></a>3.1打开虚拟机软件</h2><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705213456.png"></p><h2 id="3-2新建虚拟机"><a href="#3-2新建虚拟机" class="headerlink" title="3.2新建虚拟机"></a>3.2新建虚拟机</h2><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706190912.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191002.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191125.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191325.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191534.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191623.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191757.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191907.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706191938.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192028.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192107.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192213.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192241.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192313.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192350.png"></p><h2 id="3-2在虚拟中安装Ubuntu系统"><a href="#3-2在虚拟中安装Ubuntu系统" class="headerlink" title="3.2在虚拟中安装Ubuntu系统"></a>3.2在虚拟中安装Ubuntu系统</h2><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192529.png"></p><p>等待加载镜像文件<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192617.png"></p><p>这里可以选择系统的语言这里我选择中文，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192842.png"></p><p>默认无需更改，直接回车<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706192911.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706193120.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706193510.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706193644.png"></p><p>设置系统的名字(Ubuntu)和密码(123456)，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706193845.png"></p><p>等待系统安装<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706194202.png"></p><p>安装完成如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706195203.png"></p><p>重启之后进入系统，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706200350.png"></p><h3 id="3-3-配置root权限"><a href="#3-3-配置root权限" class="headerlink" title="3.3 配置root权限"></a>3.3 配置root权限</h3><p>Ubuntu刚安装后，不能在terminal中运行su命令，因为root没有默认密码，需要手动设定.<br>以安装Ubuntu时输入的用户名登陆，该用户在admin组中，有权限给root设定密码.</p><p>给root用户设置密码的具体步骤：</p><ul><li>打开一个terminal，然后输入下面的命令</li></ul><p>　  　<code>sudo passwd root</code></p><p>回车后会让你输入密码和确认密码，这样你的root的密码设置好了.</p><h3 id="3-4-安装VMware-tools"><a href="#3-4-安装VMware-tools" class="headerlink" title="3.4 安装VMware tools"></a>3.4 安装VMware tools</h3><p>安装过程参考<strong>国产系统(一)：Kylin系统搭建与虚拟机安装</strong>中的VMware Tools安装。</p><p>将VMwareTools-10.1.15-6627299.tar.gz复制到桌面上，执行下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo tar -xzvf VMwareTools-10.1.15-6627299.tar.gz<br>cd vmware-tools-distrib/<br>sudo ./vmware-install.pl <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏杆编程</title>
      <link href="/posts/%E6%9D%82%E9%A1%B9/%E6%B8%B8%E6%88%8F%E6%9D%86%E7%BC%96%E7%A8%8B/"/>
      <url>/posts/%E6%9D%82%E9%A1%B9/%E6%B8%B8%E6%88%8F%E6%9D%86%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近由于项目需要进行joystick游戏杆编程。</p></blockquote><h1 id="1-需求概述"><a href="#1-需求概述" class="headerlink" title="1.需求概述"></a>1.需求概述</h1><p>采集模拟飞机器中驾驶杆、油门和脚蹬的数据异机驱动<code>X-plane</code>(<a href="https://baike.baidu.com/item/X-plane/6724143?fr=aladdin">模拟飞行软件</a>)。</p><h1 id="2-需求思考"><a href="#2-需求思考" class="headerlink" title="2.需求思考"></a>2.需求思考</h1><p>经查阅资料知道操纵杆、油门和脚蹬都属于输入设备，而飞行模拟类游戏使用飞行杆，绝大多数是直接采用飞机飞行控制杆作为原型去设计的，可以说具有很强的仿真度，游戏摇杆利用前后左右拨动直接影响着飞行游戏中的飞行状态。</p><blockquote><p>什么是游戏杆？<br>游戏杆属于输入设备<code>（Input Device）</code>是人或外部计算机进行交互的一种装备，用于把原始数据和处理这些数据的程序输入到计算机中。键盘，鼠标，摄像头，扫描仪，光笔，手写输入板，游戏杆，语音输入装置等都属于输入设备。</p></blockquote><p>而采集模拟飞行器中驾驶杆、油门和脚蹬的数据需要进行<strong>游戏杆编程</strong>，在驱动<code>X-plane</code>的过程中采用开源的<a href="https://gitee.com/mirrors/xplaneconnect?_from=gitee_search">xplaneconnect</a></p><h1 id="3-JoyStick游戏杆编程方法"><a href="#3-JoyStick游戏杆编程方法" class="headerlink" title="3.JoyStick游戏杆编程方法"></a>3.JoyStick游戏杆编程方法</h1><p>获取游戏杆输入的方式有<code>4</code>种:</p><h2 id="3-1-基于底层操作直接操作游戏手柄"><a href="#3-1-基于底层操作直接操作游戏手柄" class="headerlink" title="3.1 基于底层操作直接操作游戏手柄"></a>3.1 基于底层操作直接操作游戏手柄</h2><p>   通过底层开发接口<code>DDK</code>或者读取<code>USB</code>设备直接访问。这样的操作比较复杂，但也未必能够达到所需要的结果。直接放弃</p><h2 id="3-2-使用Windows下的-API"><a href="#3-2-使用Windows下的-API" class="headerlink" title="3.2 使用Windows下的 API"></a>3.2 使用<code>Windows</code>下的<code> API</code></h2><p>   这种方式是直接使用<code>VS</code>来读取<code>JoyStick</code>的C++代码程序，而游戏手柄相关的函数都封装在 Winmm.dll 中。相应的头文件是 Mmsystem.h， 链接时需要链接 Winmm.lib。这里大家可以直接访问<a href="https://docs.microsoft.com/en-us/windows/win32/api/joystickapi/">官网</a>或者访问<a href="https://blog.csdn.net/qq_17525633/category_9865804.html">https://blog.csdn.net/qq_17525633/category_9865804.html</a> 这里已经总结好了。</p><p>缺点：使用<code>Winmm.lib</code>中的<code>Multimedia Joystick Functions</code>有一些弊端，就是<code>Multimedia Joystick Functions</code>只能获取<code>1，2，3，4</code>四个按钮的按键的消息，不能获取<code>8</code>个<code>POV</code>方向键的消息。如果不获取按键的状态使用它就很方便了。</p><h2 id="3-3-使用Directlnput或者XInput技术"><a href="#3-3-使用Directlnput或者XInput技术" class="headerlink" title="3.3 使用Directlnput或者XInput技术"></a>3.3 使用<code>Directlnput</code>或者<code>XInput</code>技术</h2><p>   <code>DirectInput</code>是微软提供的一个输入设备的<code>API</code>，用于结合键盘、鼠标、摇杆，或其它的游戏控制器。如果是想要在Windows平台下使用摇杆的，可以参考<a href="https://blog.csdn.net/e295166319/article/details/78404213">Directlnput</a>和<a href="https://link.csdn.net/?target=https://www.cnblogs.com/wolfmvp/p/6908585.html">XInput</a>这两篇文章。<br>   如果是游戏开发，可能对操纵杆或者输入设备的操作比较复杂，而且对兼容性要求较高，而<code>DirectInput</code>和<code>XInput</code>提供的接口比较全面，而且和<code>direct X</code>的技术结合紧密。所以这个技术应该是开发<code>Windows</code>平台游戏的不二选择了。</p><h2 id="3-4-使用joystick接口库"><a href="#3-4-使用joystick接口库" class="headerlink" title="3.4 使用joystick接口库"></a>3.4 使用<code>joystick</code>接口库</h2><ul><li><p><a href="https://github.com/Tasssadar/libenjoy">libenjoy</a>。这是一个简单的<code>JoyStick</code>操作接口库，使用C语言实现，可以与C++应用程序一起使用。</p></li><li><p><a href="https://github.com/SDL-mirror/SDL">SDL-mirror/SDL</a>。这个是一个全面的跨平台媒体/游戏开发库。</p></li></ul><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p>对游戏杆编程有了新的认识，并介绍了几种读取<code>JoyStick</code>游戏杆输入的方式。<br>个人比较喜欢<code>joystick</code>接口库，使用造好的轮子很方便。但是<code>Windows</code>平台微软提供的库也很方便。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> 游戏杆编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏杆编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRC校验原理及其C语言实现</title>
      <link href="/posts/%E6%9D%82%E9%A1%B9/CRC%E6%A0%A1%E9%AA%8C/"/>
      <url>/posts/%E6%9D%82%E9%A1%B9/CRC%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>最近在工作中，要实现对通信数据的<code>CRC</code>校验过程，又认真系统的学习了一下。<br>发现有一个篇文章写的很好。链接请点击下面：</p><p><a href="https://cloud.tencent.com/developer/article/1704685">https://cloud.tencent.com/developer/article/1704685</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> CRC校验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAN总线学习</title>
      <link href="/posts/%E6%9D%82%E9%A1%B9/CAN%E6%80%BB%E7%BA%BF/"/>
      <url>/posts/%E6%9D%82%E9%A1%B9/CAN%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>现场总线是近 20年发展起来的新技术 , CAN 总线是一种应用广泛的现场总线 ,在工业测控和工业自动化等领域有很大的应用前景。   </p><h1 id="1-CAN简介"><a href="#1-CAN简介" class="headerlink" title="1.CAN简介"></a>1.<a href="https://baike.baidu.com/item/can/4698193">CAN</a>简介</h1><p><code>CAN</code>是<code>Controller Area Network</code>的缩写（以下称为<code>CAN</code>），是<code>ISO</code>国际标准化的串行通信协议。</p><h1 id="2-CAN协议的特点"><a href="#2-CAN协议的特点" class="headerlink" title="2.CAN协议的特点"></a>2.CAN协议的特点</h1><h2 id="2-1、多主控制"><a href="#2-1、多主控制" class="headerlink" title="2.1、多主控制"></a>2.1、多主控制</h2><p>在总线空闲时，所有单元都可以发送消息(多主控制)，如果有两个以上的单元同时开始发送消息时，根据标识符(<code>ID</code>)决定优先权。 <code>ID</code>并不是表示发送的目的地址，而是表示访问总线的消息的优先级。两个以上的单元同时开始发送消息时，对各消息<code>ID</code>的每一位进行逐个仲裁比较。仲裁获胜（被判定为优先级最高）的单元可继续发送消息，仲裁失利的单元则立即停止发送而进行接收工作。</p><h2 id="2-2、系统的柔性"><a href="#2-2、系统的柔性" class="headerlink" title="2.2、系统的柔性"></a>2.2、系统的柔性</h2><p><code>CAN</code>在与总线相连的单元没有类似于“地址”的信息。因此在总线上增加单元时，连接在总线上的其他单元的软硬件地址及其应用层都不需要改变。</p><h2 id="2-3、通信速度较快，通信距离远"><a href="#2-3、通信速度较快，通信距离远" class="headerlink" title="2.3、通信速度较快，通信距离远"></a>2.3、通信速度较快，通信距离远</h2><p>最高<code>1Mbps</code>(距离小于<code>40M</code>)，最远可达<code>10KM</code>（速率低于<code>5Kbps</code>）。</p><h2 id="2-4、具有错误检测、错误通知和错误恢复功能"><a href="#2-4、具有错误检测、错误通知和错误恢复功能" class="headerlink" title="2.4、具有错误检测、错误通知和错误恢复功能"></a>2.4、具有错误检测、错误通知和错误恢复功能</h2><p>所有单元都可以检测错误（错误检测功能），检测出错误的单元会立即同时通知其他所有单元（错误通知功能），正在发送消息的单元一旦检测出错误，会强制结束当前的发送。强制结束发送的单元会不断反复地重新发送此消息直到成功发送为止（错误恢复功能）。</p><h2 id="2-5、故障封闭功能"><a href="#2-5、故障封闭功能" class="headerlink" title="2.5、故障封闭功能"></a>2.5、故障封闭功能</h2><p><code>CAN</code>可以判断出错误的类型是总线上暂时的数据错误（如外部噪声等）还是持续的数据错误（如单元内部故障、驱动器故障、断线等）。由此功能，当总线上发生持续数据错误时，可将引起此故障的单元从总线上隔离出去。</p><h2 id="2-6、连接节点多"><a href="#2-6、连接节点多" class="headerlink" title="2.6、连接节点多"></a>2.6、连接节点多</h2><p><code>CAN</code>总线是可同时连接多个单元的总线。可连接的单元总数理论上是没有限制的。但实际上可连接的单元数受总线上的时间延迟及电气负载的限制。降低通信速度，可连接的单元数增加；提高通信速度，则可连接的单元数减少。<br>正是由于<code>CAN</code>协议的这些特点，使得<code>CAN</code>特别受到欢迎。</p><h1 id="3-CAN通信网络结构"><a href="#3-CAN通信网络结构" class="headerlink" title="3.CAN通信网络结构"></a>3.CAN通信网络结构</h1><h2 id="3-1基本参照模型"><a href="#3-1基本参照模型" class="headerlink" title="3.1基本参照模型"></a>3.1基本参照模型</h2><p>实际上，在<code>CAN</code>总线底层只采用了<code>OSI</code>基本参照模型中的数据链路层、传输层。而在<code>CAN</code>网络高层采用了<code>OSI</code>:<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/CAN/CAN.png" alt="CAN模型">   </p><h2 id="3-2CAN协议网络层次"><a href="#3-2CAN协议网络层次" class="headerlink" title="3.2CAN协议网络层次"></a>3.2<code>CAN</code>协议网络层次</h2><p>在<code>CAN</code>协议中，<code>ISO</code>标准只对数据链路层和物理层做了规定。对于数据链路层和物理层的一部分。对于数据链路层和物理层的一部分，<code>ISO11898</code>和<code>ISO11519-2</code>的规定是相同，但是在物理层的<code>PMD</code>子层和<code>MDI</code>子层是不同的。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/CAN/CAN.png" alt="CAN协议"></p><p>在<code>CAN</code>总线中，没一层协议中定义的事项如下：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/CAN/CAN%E5%8D%8F%E8%AE%AE%E5%AE%9A%E4%B9%89.png" alt="CAN协议定义"></p><h1 id="4-CAN协议解析"><a href="#4-CAN协议解析" class="headerlink" title="4.CAN协议解析"></a>4.<code>CAN</code>协议解析</h1><p><code>CAN</code>通信协议共分为数据帧、远程帧、错误帧、过载帧和帧间隔五种类型。</p><h2 id="4-1显行隐形电平"><a href="#4-1显行隐形电平" class="headerlink" title="4.1显行隐形电平"></a>4.1显行隐形电平</h2><p><code>CAN-bus</code>发布了<code>ISO11898</code>和<code>ISO11519</code>两个通信标准，此两个标准中差分电平的特性不相同。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/CAN/CAN%E2%80%94bus.png" alt="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/CAN/CAN%E2%80%94bus.png"></p><ul><li>显性电平:<br>总线上只要有1个节点驱动为显性，则总线表现为显性位电平，逻辑解析为“0”。</li><li>隐形电平：<br>只有总线上的各节点都不将总线驱动成显性电平，总线才表现为隐形位对应的电平，逻辑解析为“1”。</li><li>位填充：<br>位填充是为防止突发错误而设定的功能。当同样的电平持续 5 位时，则添加一个位的反型数据。</li></ul><h2 id="4-2数据帧"><a href="#4-2数据帧" class="headerlink" title="4.2数据帧"></a>4.2数据帧</h2><p>数据帧结构上由<code>7</code>个段组成，其中根据仲裁段ID码长度的不同，分为标准帧<code>（CAN2.0A）</code>和扩展帧<code>（CAN2.0B）</code>。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/CAN/%E6%95%B0%E6%8D%AE%E5%B8%A7%E7%BB%93%E6%9E%84.png" alt="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/CAN/%E6%95%B0%E6%8D%AE%E5%B8%A7%E7%BB%93%E6%9E%84.png"></p><p>这里慢慢学习更新:smile: </p><p>这篇文章很:+1:参考<a href="https://blog.csdn.net/u013606261/article/details/112513278">https://blog.csdn.net/u013606261/article/details/112513278</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> CAN总线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GL Studio虚拟仪表开发工具</title>
      <link href="/posts/%E5%B7%A5%E5%85%B7/GL-Studio/"/>
      <url>/posts/%E5%B7%A5%E5%85%B7/GL-Studio/</url>
      
        <content type="html"><![CDATA[<p>有关<code>GL Studio</code>的学习资料可以去<a href="https://wenku.baidu.com/">百度文库</a>、<a href="https://www.doc88.com/">道客巴巴</a>和<a href="https://www.cnki.net/">知网</a>中查找资料。</p><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p><code>GL Studio</code>是美国<code>DiSTI</code>公司的旗舰产品，它是一个独立平台的快速原型工具，用来创建实时的、照片级别的、可交互的图形界面，既可以用于仿真，又可以用于实际装备。照片级别的图形显示界面的创建需要人们有两种不同类型的技能：图形艺术家和软件开发者。<code>DiSTI</code>设计了对图形艺术家和软件开发者都非常友好的<code>GL Studio</code>。<code>GL Studio</code>生成的<code>c++</code>和<code>opengl</code>源代码可以单独运行，也可以嵌入其他应用中;它能运行于<code>Windows、Linux、Vxworks</code>等操作系统上。<code>GL Studio</code>是目前世界上最先进的人机接口（<code>HMI</code>）开发工具，它非常专业，因此做得非常优秀。</p><blockquote><p><a href="http://www.hirain.com/sts/241/497">GL Studio — 符合ISO 26262 标准的HMI 开发工具</a></p></blockquote><h1 id="2-GL-Studio特点"><a href="#2-GL-Studio特点" class="headerlink" title="2.GL Studio特点"></a>2.<code>GL Studio特点</code></h1><h2 id="2-1GL-Studio具有极强的软件重用性"><a href="#2-1GL-Studio具有极强的软件重用性" class="headerlink" title="2.1GL Studio具有极强的软件重用性"></a>2.1<code>GL Studio</code>具有极强的软件重用性</h2><p><code>GL Studio</code>是世界上第一个采用面向对象方法的人机接口开发工具包，其生成的<code>HMI</code>支持对象重用。其任何设计的对象或者由对象组成的新的对象，都可以作为一个新的重用对象。    </p><h2 id="3-2GL-Studio不仅支持3D仪表而且支持场景中的3D仪表显示"><a href="#3-2GL-Studio不仅支持3D仪表而且支持场景中的3D仪表显示" class="headerlink" title="3.2GL Studio不仅支持3D仪表而且支持场景中的3D仪表显示"></a>3.2<code>GL Studio</code>不仅支持<code>3D</code>仪表而且支持场景中的<code>3D</code>仪表显示</h2><p><code>GL Studio</code>是第一个实现<code>3D</code>的<code>HMI</code>开发工具包，它开发的<code>HMI</code>都是<code>3D</code>的，而且它可以导入<code>3D</code>模型，把<code>HMI</code>布置在<code>3D</code>模型上，实现场景中的三维仪表显示。    </p><h2 id="3-3GL-Studio开发HMI时可以实现一次开发多次发布"><a href="#3-3GL-Studio开发HMI时可以实现一次开发多次发布" class="headerlink" title="3.3GL Studio开发HMI时可以实现一次开发多次发布"></a>3.3<code>GL Studio</code>开发<code>HMI</code>时可以实现一次开发多次发布</h2><p>用户开发<code>HMI</code>软件主要是应用于以下几个方面：</p><ul><li>原型设计 (侧重考虑人机工程因素，用于产品的原型设计与验证)</li><li>使用训练 (各种与人机接口相关的培训，既可用于操作训练，又可用于维护训练)</li><li>课件制作 (用于本地教学和远程教育)</li><li>嵌入式应用(应用于真实的设备中)</li></ul><h2 id="3-4GL-Studio提供开放的对外接口"><a href="#3-4GL-Studio提供开放的对外接口" class="headerlink" title="3.4GL Studio提供开放的对外接口"></a>3.4<code>GL Studio</code>提供开放的对外接口</h2><p><code>GL Studio</code>是完善的<code>HMI</code>开发工具，因此其不仅提供了<code>HMI</code>开发平台，而且提供了开放的对外接口。</p><h1 id="3-GL-studio的主界面"><a href="#3-GL-studio的主界面" class="headerlink" title="3.GL studio的主界面"></a>3.<code>GL studio</code>的主界面</h1><p>这里我使用的是<code>GL Studio 5.1</code>版本，界面如下：  </p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/GL-Studio-5.1.jpg" alt="GL-Studio-5"></p><h1 id="4-GL-studio的市场"><a href="#4-GL-studio的市场" class="headerlink" title="4.GL studio的市场"></a>4.<code>GL studio</code>的市场</h1><h2 id="4-1汽车"><a href="#4-1汽车" class="headerlink" title="4.1汽车"></a>4.1汽车</h2><p>GL Studio 通过一个方便的平台生产<a href="https://glstudio.disti.com/automotive/">汽车行业</a>内最高质量的仪表和控件。使用卓越的 UI 策略设计仪表盘、平视显示器、信息娱乐装置、后座娱乐系统和联网汽车移动应用程序。  </p><ul><li>仪表组</li><li>驾驶员信息模块 (DIM)</li><li>车载信息娱乐系统 (IVI)</li><li>平视显示器 (HUD)</li><li>增强现实 HUD</li><li>后座娱乐系统 (RSE)</li></ul><h2 id="4-2航空航天与国防工业应用"><a href="#4-2航空航天与国防工业应用" class="headerlink" title="4.2航空航天与国防工业应用"></a>4.2航空航天与国防工业应用</h2><p>全球的行业领导者都依赖 GL Studio 的高保真 HMI，用于<a href="https://glstudio.disti.com/aerospace-defense/">航空航天、航空电子</a>、国防、模拟和培训。</p><ul><li>飞机仪表原型和航空电子设备</li><li>飞行模拟器</li><li>炮手站/准星</li><li>无人机地面控制站</li><li>海上桥梁模拟器</li><li>飞船显示原型、航空电子设备和模拟器</li><li>移动地图模拟器</li><li>地面车辆控制和模拟器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> GL Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GL Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt事件</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<p>事件（event）是由系统或者 Qt 本身在不同的时刻发出的。当用户按下鼠标、敲下键盘，或者是窗口需要重新绘制的时候，都会发出一个相应的事件。一些事件在对用户操作做出响应时发出，如键盘事件等；另一些事件则是由系统自动发出，如计时器事件。<br>在Qt中所有事件类都继承于<code>QEvent</code>。</p><h1 id="1-鼠标事件"><a href="#1-鼠标事件" class="headerlink" title="1.鼠标事件"></a>1.鼠标事件</h1><p>键盘事件虚要添加头文件<code>#include &lt;QMouseEvent&gt;</code></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs arduino">在mylable.h中<br><span class="hljs-keyword">protected</span>: <span class="hljs-comment">//保护</span><br>    <span class="hljs-comment">//鼠标点击事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mousePressEvent</span><span class="hljs-params">(QMouseEvent *event)</span></span>; <span class="hljs-comment">//虚函数按F1没有反应，需在基类进行查看</span><br>    <span class="hljs-comment">//鼠标释放事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mouseReleaseEvent</span><span class="hljs-params">(QMouseEvent *event)</span></span>;<br>    <span class="hljs-comment">//鼠标移动事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mouseMoveEvent</span><span class="hljs-params">(QMouseEvent *event)</span></span>;<br>    <span class="hljs-comment">//进入窗口区域</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enterEvent</span><span class="hljs-params">(QEvent *event)</span></span>;<br>    <span class="hljs-comment">//离开窗口区域</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">leaveEvent</span><span class="hljs-params">(QEvent *event)</span></span>;<br><br>    <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mylabel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QMouseEvent&gt;</span> <span class="hljs-comment">//鼠标事件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QDebug&gt;</span> <span class="hljs-comment">//打印</span></span><br>MyLabel::<span class="hljs-built_in">MyLabel</span>(QWidget *parent) : <span class="hljs-built_in">QLabel</span>(parent)<br>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setMouseTracking</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//是否追踪鼠标</span><br>&#125;<br><span class="hljs-comment">//鼠标点击事件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyLabel::mousePressEvent</span><span class="hljs-params">(QMouseEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = event-&gt;<span class="hljs-built_in">x</span>();<br>    <span class="hljs-keyword">int</span> y = event-&gt;<span class="hljs-built_in">y</span>();<br>    <span class="hljs-comment">//格式化输出 sprintf</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * QString str = QString(&quot;abc %1  ^_^ %2&quot;).arg(123).arg(&quot;make&quot;);</span><br><span class="hljs-comment">     * str = abc 123 ^_^ make</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">//判断为那个键</span><br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">button</span>() == Qt::LeftButton)<br>    &#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Left&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">button</span>() == Qt::RightButton)<br>    &#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Reght&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">button</span>() ==Qt::MidButton)<br>    &#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Mid&quot;</span>;<br>    &#125;<br>    QString text = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Mouse Press:(%1 %2)&lt;/h1&gt;&lt;/center&gt;&quot;</span>)<br>            .<span class="hljs-built_in">arg</span>(i).<span class="hljs-built_in">arg</span>(y);<br><br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setText</span>(text);<br>&#125;<br><br><span class="hljs-comment">//鼠标释放事件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyLabel::mouseReleaseEvent</span><span class="hljs-params">(QMouseEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Mouse Release:(%1 %2)&lt;/h1&gt;&lt;/center&gt;&quot;</span>).<span class="hljs-built_in">arg</span>(QString::<span class="hljs-built_in">number</span>(event-&gt;<span class="hljs-built_in">x</span>()),<br>    QString::<span class="hljs-built_in">number</span>(event-&gt;<span class="hljs-built_in">y</span>())));<br><br>&#125;<br><br><span class="hljs-comment">//鼠标移动事件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyLabel::mouseMoveEvent</span><span class="hljs-params">(QMouseEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>   QString msg;<br>   msg.<span class="hljs-built_in">sprintf</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Mouse Move:(%d %d)&lt;/h1&gt;&lt;/center&gt;&quot;</span>,event-&gt;<span class="hljs-built_in">x</span>(),event-&gt;<span class="hljs-built_in">y</span>());<br>   <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setText</span>(msg);<br><br>&#125;<br><br><span class="hljs-comment">//进入窗口</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyLabel::enterEvent</span><span class="hljs-params">(QEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    QString text = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Mouse enter&lt;/h1&gt;&lt;/center&gt;&quot;</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setText</span>(text);<br>&#125;<br><br><span class="hljs-comment">//离开窗口</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyLabel::leaveEvent</span><span class="hljs-params">(QEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    QString text = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Mouse leave&lt;/h1&gt;&lt;/center&gt;&quot;</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setText</span>(text);<br>&#125;<br>    <br></code></pre></td></tr></table></figure><h1 id="2-键盘事件"><a href="#2-键盘事件" class="headerlink" title="2.键盘事件"></a>2.键盘事件</h1><p>键盘事件虚要添加头文件<code>#include &lt;QKeyEvent&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-comment">//键盘按下事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">keyPressEvent</span><span class="hljs-params">(QKeyEvent *event)</span></span>;<br>    <span class="hljs-comment">// 重写event事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">event</span><span class="hljs-params">(QEvent *)</span></span>;<br> <br><span class="hljs-comment">//键盘事件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::keyPressEvent</span><span class="hljs-params">(QKeyEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;(<span class="hljs-keyword">char</span>)event-&gt;<span class="hljs-built_in">key</span>();<span class="hljs-comment">//转换为char</span><br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>() == Qt::Key_A)<br>    &#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Qt::Key_A&quot;</span>;<br>    &#125;<br>&#125;   <br><br><br><span class="hljs-comment">// 重写event事件</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">logWidget::event</span><span class="hljs-params">(QEvent *e)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">if</span>(e-&gt;<span class="hljs-built_in">type</span>() == QEvent::KeyPress)<br>    &#123;<br>        <span class="hljs-comment">//类型转换</span><br>        QKeyEvent *env = <span class="hljs-keyword">static_cast</span>&lt;QKeyEvent *&gt;(e);<br>        <span class="hljs-keyword">if</span>((env-&gt;<span class="hljs-built_in">key</span>() == Qt::Key_Return)  || (env-&gt;<span class="hljs-built_in">key</span>() == Qt::Key_Enter)) <span class="hljs-comment">//大键盘回车Key_Return   小键盘回车Key_Enter</span><br>        &#123;<br>            logWidget::<span class="hljs-built_in">on_logBt_clicked</span>();<br>            <span class="hljs-keyword">return</span> QWidget::<span class="hljs-built_in">event</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> QWidget::<span class="hljs-built_in">event</span>(e);<br>        <span class="hljs-comment">//return false;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-定时器事件"><a href="#3-定时器事件" class="headerlink" title="3.定时器事件"></a>3.定时器事件</h1><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xl">protected:<br>    <span class="hljs-comment">//定时器事件</span><br>    void timerEvent(QTimerEvent *event);<br>private:<br>    int timerId; <span class="hljs-comment">//定时器ID</span><br>    int timerId2;<br>    <br><span class="hljs-comment">//拷贝构造中启动定时器    </span><br>    <span class="hljs-function"><span class="hljs-title">timerId</span> = this-&gt;</span>startTimer(<span class="hljs-number">1000</span>);<span class="hljs-comment">//启动定时器 以毫秒为单位 每隔一秒触发一次定时器</span><br>    <span class="hljs-function"><span class="hljs-title">timerId2</span> = this-&gt;</span>startTimer(<span class="hljs-number">1000</span>);<br><br><span class="hljs-comment">//定时器</span><br>void Widget::timerEvent(QTimerEvent *event)<br>&#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(event-&gt;</span><span class="hljs-function"><span class="hljs-title">timerId</span>() == this-&gt;</span>timerId)<br>    &#123;<br>        static int sec =<span class="hljs-number">10</span>;<br>        sec--;<br>        <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">label</span>-&gt;</span>setText(QString(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;time out: %1&lt;h1&gt;&lt;center&gt;&quot;</span>).arg(sec));<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">3</span> == sec)<br>        &#123;<br><br>            <span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">killTimer</span>(this-&gt;</span>timerId); <span class="hljs-comment">//写this是为了提示</span><br>            <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">label</span>-&gt;</span>setText(<span class="hljs-string">&quot;晚安&quot;</span>);<br>            <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">label</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;QLabel&#123;color:red&#125;&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(event-&gt;</span><span class="hljs-function"><span class="hljs-title">timerId</span>() == this-&gt;</span>timerId2)<br>    &#123;<br>        static int sec2 =<span class="hljs-number">0</span>;<br>        sec2++;<br>        <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">label_2</span>-&gt;</span>setText(QString(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;time out: %1&lt;h1&gt;&lt;center&gt;&quot;</span>).arg(sec2));<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">10</span> == sec2)<br>        &#123;<br><br>            <span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">killTimer</span>(this-&gt;</span>timerId2); <span class="hljs-comment">//写this是为了提示</span><br>            <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">label_2</span>-&gt;</span>setText(<span class="hljs-string">&quot;我爱你&quot;</span>);<br>            <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">label_2</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;QLabel&#123;color:rgb(0,0,255)&#125;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;    <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt版本的选择与开发环境搭建</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<p>Qt版本选择与开发方式选择：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/Qt%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E9%80%89%E6%8B%A9.png" alt="Qt版本选择与开发方式选择"></p><h1 id="1-Qt安装"><a href="#1-Qt安装" class="headerlink" title="1.Qt安装"></a>1.Qt安装</h1><blockquote><p>注意：Qt官方的下载很慢(不解释大家都懂)，所以我们一般使用国内镜像网站:</p></blockquote><p>清华大学开源软件镜像站:<a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn</a></p><p>中国互联网络信息中心:<a href="https://mirrors.cnnic.cn/">https://mirrors.cnnic.cn</a></p><p>中国科技技术大学:<a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn</a></p><p><code>Qt5.9</code>以上的Qt安装程序可以在安装的时候选择mingw版本和VS版本等，但是每个版本对mingw和VS、32位和64位的支持都有点不太一样。</p><p>这里我选择<code>Qt 5.12.2</code>。</p><blockquote><p>Qt 5.12.2有mingw32、64版，VS 2017有32位和64位，VS 2015只有64位。<br><code>Qt 5.12.2</code>下载地址(<code>Windows</code>):<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.12/5.12.2/qt-opensource-windows-x86-5.12.2.exe">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.12/5.12.2/qt-opensource-windows-x86-5.12.2.exe</a></p></blockquote><h1 id="2-VS-2017安装"><a href="#2-VS-2017安装" class="headerlink" title="2.VS 2017安装"></a>2.VS 2017安装</h1><p><code>VS 2017</code>下载地址:<a href="https://my.visualstudio.com/Downloads?q=visual%20studio%202017&wt.mc_id=o~msft~vscom~older-downloads">点这里</a><br>具体的安装过程不做介绍，可参考<a href="https://blog.csdn.net/zyhse/article/details/105362609">Visual Studio Community 2017安装步骤</a></p><h1 id="3-MSVC调试器安装"><a href="#3-MSVC调试器安装" class="headerlink" title="3.MSVC调试器安装"></a>3.MSVC调试器安装</h1><p>通过<code>Windows SDK</code>工具安装调试器。<br>工具下载地址：<a href="https://download.microsoft.com/download/4/2/2/42245968-6A79-4DA7-A5FB-08C0AD0AE661/windowssdk/winsdksetup.exe">Winsdksetup.exe</a><br>(1)下载完成运行，默认安装，选择<code>“Next”</code><br>(2)默认，选择<code>&quot;Next&quot;</code><br>(3)默认，选择<code>“Accept”</code><br>(4)只需要选择<code>“Debugging Toolsfor Windows”</code>，点击<code>“Install”</code>（需要联网下载）。<br>(5)安装完毕  </p><h1 id="4-配置Qt-Creator编译器和调试器"><a href="#4-配置Qt-Creator编译器和调试器" class="headerlink" title="4.配置Qt Creator编译器和调试器"></a>4.配置Qt Creator编译器和调试器</h1><p>(1)打开<code>Qt Creator</code>，选择“工具”-&gt;“选项”，在选择”Kits”-&gt;”编译器”,就可以看到Qt已经自动检测到的<code>MSVC</code>编译器了。<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E6%A3%80%E6%B5%8BMSVC%E7%BC%96%E8%AF%91%E5%99%A8.png" alt="检测MSVC编译器"><br>同时在<code>“Kits”-&gt;“Debuggers”</code>下，也自动检测到调试器了。<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8.png" alt="自动检测的编译器"><br>(2)选择“Kits”-&gt;“构建套件”，然后选择<code>“Desktop Qt 5.12.2 MSVC 2017 32bit”</code>,详细配置如图所示。<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/MSVC.png" alt="MSVC"><br>(3)建个测试工程，打个断点，F5调试，断点停住，好了，环境搭建成功。</p><blockquote><p>注意：在这里<code>Qt Creator</code>的两种编译方式就配置成功。</p></blockquote><h1 id="5-安装qt-VS插件"><a href="#5-安装qt-VS插件" class="headerlink" title="5.安装qt-VS插件"></a>5.安装qt-VS插件</h1><p>1、插件下载<br>在线下载：点击工具-&gt;扩展和更新-&gt;联机-&gt;搜索Qt，下载安装后重启即可。(不推荐太慢)<br>离线下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.7.1/qt-vsaddin-msvc2017-2.7.1.vsix">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.7.1/qt-vsaddin-msvc2017-2.7.1.vsix</a>这里我下载最新版本2.7.1<br>2、配置<code>Qt MSVC</code>目录，安装好会有<code>Qt VS Tools</code>，点击<code>Qt Options</code>，将32位和64位目录设置好。<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/VS-Qt.png" alt="VS-Qt"><br>3、新建个项目测试，成功。</p><blockquote><p>注意：在这里VS+Qt混合编程环境配置成功.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt应用程序框架介绍和常用的快捷键</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Qt应用程序框架"><a href="#1-Qt应用程序框架" class="headerlink" title="1.Qt应用程序框架"></a>1.Qt应用程序框架</h1><blockquote><p>注意：在用别人的代码时，需要删除项目代码中的*.pro.user文件。此文件是保存，项目的的构建目录每一个人使用的项目构建路径不一样</p></blockquote><h1 id="2-项目-pro文件"><a href="#2-项目-pro文件" class="headerlink" title="2.项目.pro文件"></a>2.项目.pro文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">#模版<br>QT       += core gui<br><br>#高于<span class="hljs-number">4</span>版本，添加QT+=widgets,为了兼容Qt4<br><span class="hljs-built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="hljs-number">4</span>): QT += widgets<br><br>#应用程序的名字<br>TARGET = make<br><br>#指定mekefile的类型，app<br>TEMPLATE = app<br><br>#源文件 .cpp文件<br>SOURCES += main.cpp\<br>        mywidget.cpp<br>#头文件 .h文件<br>HEADERS  += mywidget.h<br></code></pre></td></tr></table></figure><h1 id="3-main-cpp主函数"><a href="#3-main-cpp主函数" class="headerlink" title="3.main.cpp主函数"></a>3.main.cpp主函数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mywidget.h&quot;</span></span><br><span class="hljs-comment">//QApplication应用程序类</span><br><span class="hljs-comment">//Qt头文件没有.h</span><br><span class="hljs-comment">//头文件和类名一样</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QApplication&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//有且只有一个应用程序类的对象</span><br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    <br>    <span class="hljs-comment">//MyWidget继承与QWindget,QWidget是一个窗口基类</span><br>    <span class="hljs-comment">//所以MyWidget也是窗口基类</span><br>    <br>    MyWidget w;<span class="hljs-comment">//w就是窗口对象</span><br>    w.<span class="hljs-built_in">show</span>(); <span class="hljs-comment">//窗口穿件默认是隐藏，需要人为显示</span><br>    <br>    <span class="hljs-comment">//让程序一直执行，等待用户操作</span><br>    <span class="hljs-comment">//等待时间的发生</span><br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-常用的快捷键"><a href="#4-常用的快捷键" class="headerlink" title="4.常用的快捷键"></a>4.常用的快捷键</h1><ol><li><p>帮助文件：<code>F1</code> （光标在函数名字或类名上，按 <code>F1</code> 即可跳转到对应帮助文档，查看其详细用法）</p></li><li><p>.h 文件和对应.cpp 文件切换：F4</p></li><li><p>编译并运行：<code>Ctrl + R</code></p></li><li><p>函数声明和定义(函数调用和定义)切换：<code>F2</code></p></li><li><p>代码注释取消注释：<code>Ctrl + / </code>（选中代码再按快捷键）</p></li><li><p>字体变大变小：<code>Ctrl + 鼠标滚轮向上向下</code></p></li><li><p>移动代码：选中所要移动的代码 -&gt; 按住 ctrl + shift -&gt; 键盘方向键</p></li><li><p>查找替换关键字：<code>ctrl + f</code></p></li><li><p>快速打开代码所在目录：编辑模式下 -&gt; 选中项目文件 -&gt; 右击 -&gt; 选择“显示包含的目录”，即可显示项目所在目录（此方法同样可以打开代码文件所在目录）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt基础:使用qDebug()函数输出日志</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<h1 id="1-log输出"><a href="#1-log输出" class="headerlink" title="1.log输出"></a>1.log输出</h1><blockquote><p>在Qt中我们需要输出某一些变量,一般不使用C语言中的<code>printf</code>,也不使用C++中的<code>cout</code>,而Qt框架提供了专门用于日志输出的类，头文件为<code>#include&lt;QDebug&gt;</code>,使用方式如下：</p></blockquote><h1 id="2-调试窗口输出日志"><a href="#2-调试窗口输出日志" class="headerlink" title="2.调试窗口输出日志"></a>2.调试窗口输出日志</h1><p>1、将字符串当做参数传给qDebug()函数</p><blockquote><p>这种方式不需要添加<code>#include&lt;QDebug&gt;</code>头文件</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> x=<span class="hljs-number">20</span>;<br><span class="hljs-built_in">qDebug</span>(<span class="hljs-string">&quot;x：%d&quot;</span>,x);<br></code></pre></td></tr></table></figure><p>2、使用数据流的方式输出多个字符串</p><blockquote><p>此方式需要添加<code>#include&lt;QDebug&gt;</code>头文件</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Date:&quot;</span> &lt;&lt; QDate::<span class="hljs-built_in">currentDate</span>();<br><span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Types:&quot;</span> &lt;&lt; <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;String&quot;</span>) &lt;&lt; <span class="hljs-built_in">QChar</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>日志信息在IDE的调试窗口输出</p></blockquote><h1 id="3-终端窗口中输出日志"><a href="#3-终端窗口中输出日志" class="headerlink" title="3.终端窗口中输出日志"></a>3.终端窗口中输出日志</h1><blockquote><p>在使用的上面的方式中，如果不是通过<code>IDE</code>进行程序调试，而直接执行编译的<code>可执行程序</code>在这种情况下是没有日志输出的，因此也看不到任何的日志输出。<br>默认情况下日志信息是不会打印到终端窗口的，如果想要实现这样的效果，必须在项目文件中添加相关的属性信息</p></blockquote><p>①打开项目文件(*.por)找到配置项<code>config</code>,添加<code>consle</code>控制台属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">CONFIG += c++11 console<br></code></pre></td></tr></table></figure><blockquote><p>项目属性添加完毕，重新编译项目直接执行编译的<code>可执行程序</code>日志信息就可以打印到终端窗口了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号与槽机制</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<p>当某个事件发生之后,比如,按钮检测到自己被点击了一下,它就会发出一个信号<code>signal</code>。这种发出是没有目的的，类似广播。<br>如果有对象对这个信号感兴趣 ，它就会使用连接<code>connect</code>函数,意思是,将想要 处理的信号和自己的一个函数为槽<code>slot</code>绑定来处理这个信号。<br>也就是说，当信号发出时，被连接的槽函数会自动被回调。</p><h1 id="1-信号和槽"><a href="#1-信号和槽" class="headerlink" title="1.信号和槽"></a>1.信号和槽</h1><h2 id="1-1Qt5的书写方式"><a href="#1-1Qt5的书写方式" class="headerlink" title="1.1Qt5的书写方式"></a>1.1Qt5的书写方式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">connect</span>(&amp;b1,&amp;QPushButton::pressed,<span class="hljs-keyword">this</span>,&amp;Widget::close);<br><span class="hljs-comment">/* &amp;b1:信号发出者，指针类型</span><br><span class="hljs-comment"> * &amp;QPushButton::pressed：处理的信号， &amp;发出者的类名::信号名字</span><br><span class="hljs-comment"> * this:信号接受者</span><br><span class="hljs-comment"> * &amp;Widget::close:槽函数，信号处理函数  &amp;发出者的类名::信号名字</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="1-1-1处理子窗口的信号不带参数"><a href="#1-1-1处理子窗口的信号不带参数" class="headerlink" title="1.1.1处理子窗口的信号不带参数"></a>1.1.1处理子窗口的信号不带参数</h3><blockquote><p>注意这样会产生二义性</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">connect</span>(&amp;subWin,&amp;SubWideget::mySignal,<span class="hljs-keyword">this</span>,&amp;Widget::dealSub);<br><span class="hljs-built_in">connect</span>(&amp;subWin,&amp;SubWideget::mySignal,<span class="hljs-keyword">this</span>,&amp;Widget::dealSlot);<br></code></pre></td></tr></table></figure><h3 id="1-1-2处理子窗口的信号带参数-使用函数指针"><a href="#1-1-2处理子窗口的信号带参数-使用函数指针" class="headerlink" title="1.1.2处理子窗口的信号带参数(使用函数指针)"></a>1.1.2处理子窗口的信号带参数(使用函数指针)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in"><span class="hljs-keyword">void</span></span> (SubWideget::*funSignal)() = &amp;SubWideget::mySignal;<br><span class="hljs-built_in">connect</span>(&amp;subWin,funSignal,<span class="hljs-keyword">this</span>,&amp;Widget::dealSub);<br><br><span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(SubWideget::*testSignal)(<span class="hljs-keyword">int</span>,QString) = &amp;SubWideget::mySignal;<br><span class="hljs-built_in">connect</span>(&amp;subWin,testSignal,<span class="hljs-keyword">this</span>,&amp;Widget::dealSlot);<br></code></pre></td></tr></table></figure><h2 id="1-2Qt4的书写方式"><a href="#1-2Qt4的书写方式" class="headerlink" title="1.2Qt4的书写方式"></a>1.2Qt4的书写方式</h2><blockquote><p>Qt4信号连接:</p><ol><li>使用了LSIGNAL和TSLOT这两个宏，将两个函数名转换成了字符串。</li><li>不方便检查错误</li></ol></blockquote><p>格式：<code>connect(信号的发出者(指针类型),             处理的信号(SIGNAL(信号名字)),            信号的接受者，            信号处理的函数(SLOT(槽函数)));</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">connect</span>(&amp;subWin,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">mySignal</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">dealSub</span>()));  <span class="hljs-comment">//不带参数</span><br><span class="hljs-built_in">connect</span>(&amp;subWin,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">mySignal</span>(<span class="hljs-keyword">int</span>,QString)),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">dealSlot</span>(<span class="hljs-keyword">int</span>,QString))); <span class="hljs-comment">//带参数</span><br></code></pre></td></tr></table></figure><h2 id="1-3Lambda表达式-匿名函数对象"><a href="#1-3Lambda表达式-匿名函数对象" class="headerlink" title="1.3Lambda表达式(匿名函数对象)"></a>1.3Lambda表达式(匿名函数对象)</h2><p>C++11中添加的新特性，需要在项目文件.pro中添加：<code>CONFIG += C++11</code><br>在Qt中配合信号一起使用，非常方便</p><h2 id="1-3-1不带参数"><a href="#1-3-1不带参数" class="headerlink" title="1.3.1不带参数"></a>1.3.1不带参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">QPushButton *b4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-keyword">this</span>);<br>b4-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Lambda表达式&quot;</span>);<br>b4-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">400</span>,<span class="hljs-number">300</span>);<br><span class="hljs-keyword">int</span> a =<span class="hljs-number">10</span>,b=<span class="hljs-number">100</span>;<br><span class="hljs-built_in">connect</span>(b4,&amp;QPushButton::released,<br>            <span class="hljs-comment">//[]里面可以传一个变量也可以传多个变量 [b4,a,b]</span><br>            <span class="hljs-comment">//=:把外部所有的局部变量、类中所有成员以值传递方式</span><br>            <span class="hljs-comment">//this :类中所有成员以值传递方式</span><br>            <span class="hljs-comment">//&amp;：把外部所有局部变量，引用符号</span><br>            [=]()<br>            &#123;<br>                b4-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;你好&quot;</span>;<br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;a&lt;&lt;b;<br>            &#125;<br>            );<br></code></pre></td></tr></table></figure><h3 id="1-3-2带参数"><a href="#1-3-2带参数" class="headerlink" title="1.3.2带参数"></a>1.3.2带参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">connect</span>(b4,&amp;QPushButton::clicked,<br>            [=](<span class="hljs-keyword">bool</span> isCheck)<br>            &#123;<br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;isCheck;<br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;a&lt;&lt;b;<br><br>            &#125;<br>            );<br></code></pre></td></tr></table></figure><h1 id="2-自定义信号槽"><a href="#2-自定义信号槽" class="headerlink" title="2.自定义信号槽"></a>2.自定义信号槽</h1><h2 id="2-1信号"><a href="#2-1信号" class="headerlink" title="2.1信号"></a>2.1信号</h2><ol><li>信号必须有<code>singnals</code>关键字来声明          </li><li>信号没有返回值，但可以有参数          </li><li>信号就是函数的声明，只需声明，无需定义          </li><li>使用<code>emit</code>在恰当的位置发信号     </li><li>信号可以重载  </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">signals:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySignal</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySignal</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,QString)</span></span>;<span class="hljs-comment">//QString是Qt中的字符串</span><br></code></pre></td></tr></table></figure><h2 id="2-2槽"><a href="#2-2槽" class="headerlink" title="2.2槽"></a>2.2槽</h2><ol><li>槽函数是普通函数，作为成员函数，会受到<code>public,private,protected</code>的影响</li><li>槽函数需要和信号一致(参数和返回值)</li><li>由于信号没有返回值，则槽函数也没有返回值</li><li>任意成员函数，普通全局函数，静态函数，Lambda表达式都可以作为槽函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt基础</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1.Lambda表达式"></a>1.Lambda表达式</h1><p>Lambda为C++ 11增加的新特性，需要在项目文件(*.pro)中添加：CONFIG += C++11<br>Lambda表达式为匿名函数对象信号一起使用，非常方便</p><h2 id="1-1没有参数"><a href="#1-1没有参数" class="headerlink" title="1.1没有参数"></a>1.1没有参数</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">QPushButton *b4 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QPushButton(<span class="hljs-params">this</span>)</span>;<br>b4-&gt;set<span class="hljs-constructor">Text(<span class="hljs-string">&quot;Lambda表达式&quot;</span>)</span>;<br>b4-&gt;move(<span class="hljs-number">400</span>,<span class="hljs-number">300</span>);<br><span class="hljs-built_in">int</span> a =<span class="hljs-number">10</span>,b=<span class="hljs-number">100</span>;<br><br>connect(b4,&amp;QPushButton::released,<br>        <span class="hljs-comment">//[]里面可以传一个变量也可以传多个变量 [b4,b2]</span><br>        <span class="hljs-comment">//=:把外部所有的局部变量、类中所有成员以值传递方式</span><br>        <span class="hljs-comment">//this :类中所有成员以值传递方式</span><br>        <span class="hljs-comment">//&amp;：把外部所有局部变量，引用符号</span><br>        <span class="hljs-literal">[=]</span><span class="hljs-literal">()</span><br>        &#123;<br>            b4-&gt;set<span class="hljs-constructor">Text(<span class="hljs-string">&quot;123&quot;</span>)</span>;<br>            q<span class="hljs-constructor">Debug()</span>&lt;&lt;<span class="hljs-string">&quot;你好&quot;</span>;<br>            q<span class="hljs-constructor">Debug()</span>&lt;&lt;a&lt;&lt;b;<br>        &#125;<br>        );<br></code></pre></td></tr></table></figure><h2 id="1-2有参数"><a href="#1-2有参数" class="headerlink" title="1.2有参数"></a>1.2有参数</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">QPushButton *b4 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QPushButton(<span class="hljs-params">this</span>)</span>;<br>   b4-&gt;set<span class="hljs-constructor">Text(<span class="hljs-string">&quot;Lambda表达式&quot;</span>)</span>;<br>   b4-&gt;move(<span class="hljs-number">400</span>,<span class="hljs-number">300</span>);<br>   <span class="hljs-built_in">int</span> a =<span class="hljs-number">10</span>,b=<span class="hljs-number">100</span>;<br>   <br>    connect(b4,&amp;QPushButton::clicked,<br>           <span class="hljs-literal">[=]</span>(<span class="hljs-built_in">bool</span> isCheck)<br>           &#123;<br>               q<span class="hljs-constructor">Debug()</span>&lt;&lt;isCheck;<br>               qDebug++++<span class="hljs-literal">()</span>&lt;&lt;a&lt;&lt;b;<br><br>           &#125;<br>           );<br><br></code></pre></td></tr></table></figure><h1 id="2-坐标系系统"><a href="#2-坐标系系统" class="headerlink" title="2.坐标系系统"></a>2.坐标系系统</h1><p>对于父窗口（主窗口），坐标系统相对于屏幕</p><blockquote><p>原点：相对于屏幕左上角<br>x:往右递增<br>y:往下递增</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">move</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h1 id="3-内存回收机制"><a href="#3-内存回收机制" class="headerlink" title="3.内存回收机制"></a>3.内存回收机制</h1><ol><li>指定父对象后  </li><li>直接或者间接继承于Object</li></ol><blockquote><ul><li>子对象如果是动态分配空间的new,不需要手动释放delete</li><li>系统会自动释放的</li></ul></blockquote><h1 id="4-菜单栏工具"><a href="#4-菜单栏工具" class="headerlink" title="4.菜单栏工具"></a>4.菜单栏工具</h1><p>PC端使用QMainWindow比较多，触屏设备不常用。</p><h1 id="5-模态对话框和非模态对话框"><a href="#5-模态对话框和非模态对话框" class="headerlink" title="5.模态对话框和非模态对话框"></a>5.模态对话框和非模态对话框</h1><ul><li>模态对话框<br>只能操作当前对话框<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lisp">QMenu *menu = mBar-&gt;addMenu(<span class="hljs-string">&quot;对话框&quot;</span>)<span class="hljs-comment">;</span><br>QAction *p1 = menu-&gt;addAction(<span class="hljs-string">&quot;模态对话框&quot;</span>)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">p1</span>,<span class="hljs-symbol">&amp;QAction</span>:<span class="hljs-symbol">:triggered</span>,<br>        [=]()<br>        &#123;<br>            QDialog dlg<span class="hljs-comment">;</span><br>            dlg.exec()<span class="hljs-comment">;</span><br>            qDebug()&lt;&lt;<span class="hljs-string">&quot;模态对话框&quot;</span><span class="hljs-comment">;</span><br>        &#125;<br>        )<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>非模态对话框<br>可以操作当前窗口也可以操作后面窗口<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lisp">QAction *p2 = menu-&gt;addAction(<span class="hljs-string">&quot;非模态对话框&quot;</span>)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">p2</span>,<span class="hljs-symbol">&amp;QAction</span>:<span class="hljs-symbol">:triggered</span>,<br>        [=]()<br>        &#123;<br>            /*1）QDialog dlg<span class="hljs-comment">;在当局部变量时，在显示非模态对话框时，直接退出。</span><br>             QDialog dlg<span class="hljs-comment">;</span><br>             dlg.show()<span class="hljs-comment">;</span><br>            */<br><br>            /*<span class="hljs-number">2</span>）QDialog dlg<span class="hljs-comment">;在当全局变量时，在显示非模态对话框时出。</span><br>            dlg.show()<span class="hljs-comment">; </span><br>            qDebug()&lt;&lt;<span class="hljs-string">&quot;非模态对话框&quot;</span><span class="hljs-comment">;</span><br>            */<br><br>            QDialog *p = new QDialog(<span class="hljs-name">this</span>)<span class="hljs-comment">; //此方式在程序结束时，进行释放</span><br>            p-&gt;setAttribute(<span class="hljs-name">Qt</span>:<span class="hljs-symbol">:WA_DeleteOnClose</span>)<span class="hljs-comment">;</span><br>            p-&gt;show()<span class="hljs-comment">;</span><br>            p-&gt;resize(<span class="hljs-number">300</span>,<span class="hljs-number">200</span>)<span class="hljs-comment">;</span><br>        &#125;<br>        )<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="6-标准对话框和文件对话框"><a href="#6-标准对话框和文件对话框" class="headerlink" title="6.标准对话框和文件对话框"></a>6.标准对话框和文件对话框</h1>标准对话框常用于弹出关于和问题。<br>使用Lamda表达式进行信号连接。<h2 id="6-1-关于对话框"><a href="#6-1-关于对话框" class="headerlink" title="6.1 关于对话框"></a>6.1 关于对话框</h2>添加头文件<code>#include &lt;QMessageBox&gt; </code><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lisp">QAction *p3 = menu-&gt;addAction(<span class="hljs-string">&quot;关于对话框&quot;</span>)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">p3</span>,<span class="hljs-symbol">&amp;QAction</span>:<span class="hljs-symbol">:triggered</span>,<br>        [=]()<br>        &#123;<br>           //静态成员调用  类名::函数名 about(父对象,父标题,内容)<br>           QMessageBox:<span class="hljs-symbol">:about</span>(<span class="hljs-name">this</span>,<span class="hljs-string">&quot;aboot&quot;</span>,<span class="hljs-string">&quot;关于Qt&quot;</span>)<span class="hljs-comment">;</span><br>        &#125;<br>        )<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="6-2问题对话框"><a href="#6-2问题对话框" class="headerlink" title="6.2问题对话框"></a>6.2问题对话框</h2>添加头文件<code>#include &lt;QMessageBox&gt; </code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">QAction *p4 = menu-&gt;addAction(<span class="hljs-string">&quot;问题对话框&quot;</span>);<br>connect(p4,&amp;QAction::triggered,<br>        [=]()<br>        &#123;<br>           <span class="hljs-keyword">int</span> ret = QMessageBox::question(this,<span class="hljs-string">&quot;question&quot;</span>,<span class="hljs-string">&quot;Are you ok?&quot;</span>,QMessageBox::Yes,QMessageBox::Cancel);<br>           <span class="hljs-keyword">switch</span>(ret)<br>           &#123;<br>                <span class="hljs-keyword">case</span> QMessageBox::Yes:<br>                qDebug()&lt;&lt;<span class="hljs-string">&quot;I am ok&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> QMessageBox::Cancel:<br>                qDebug()&lt;&lt;<span class="hljs-string">&quot;I am Cancel&quot;</span>;<br>                     <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>           &#125;<br>        &#125;<br>        );<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="6-3文件对话框"><a href="#6-3文件对话框" class="headerlink" title="6.3文件对话框"></a>6.3文件对话框</h2><p>添加头文件<code>#include &lt;QFileDialog&gt;</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">QAction *p5 = menu-&gt;addAction(<span class="hljs-string">&quot;文件对话框&quot;</span>);<br>connect(p5,&amp;QAction::triggered,<br>        [=]()<br>        &#123;<br>          QString path = QFileDialog::getOpenFileName(<br>                      this,  <span class="hljs-regexp">//</span>指定父对象<br>                      <span class="hljs-string">&quot;Open&quot;</span>, <span class="hljs-regexp">//</span>打开的标题<br>                      <span class="hljs-string">&quot;../&quot;</span>, <span class="hljs-regexp">//</span>打开文件的路径<br>                      <span class="hljs-string">&quot;souce(*.cpp *.h);;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml);;all(*.*)&quot;</span> <span class="hljs-regexp">//</span>过滤打开文件的格式<br>                       );<br>          qDebug()&lt;&lt;path;<br>        &#125;<br>        );<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt基础之读文件与写文件操作</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<h1 id="1-读文件"><a href="#1-读文件" class="headerlink" title="1.读文件"></a>1.读文件</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arduino">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::on_pushButton_Read_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QString path = QFileDialog::<span class="hljs-built_in">getOpenFileName</span>(<span class="hljs-keyword">this</span>,<br>                       <span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;../&quot;</span>,<span class="hljs-string">&quot;TXT(*.txt)&quot;</span>);<br>    <span class="hljs-keyword">if</span>(path.<span class="hljs-built_in">isEmpty</span>() == <span class="hljs-literal">false</span>)<br>    &#123;<br>        <span class="hljs-comment">//文件对象</span><br>        <span class="hljs-function">QFile <span class="hljs-title">file</span><span class="hljs-params">(path)</span></span>;<br><br>        <span class="hljs-comment">//打开文件  只读模式</span><br>        <span class="hljs-keyword">bool</span> isOK = file.<span class="hljs-built_in">open</span>(QIODevice::ReadOnly);<span class="hljs-comment">//以只读的方式打开</span><br>        <span class="hljs-keyword">if</span>(isOK == <span class="hljs-literal">true</span>)<br>        &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0</span><br>            <span class="hljs-comment">//读文件 （一次全部读，默认只识别utf8编码）</span><br>            QByteArray array = file.<span class="hljs-built_in">readAll</span>(); <span class="hljs-comment">//返回字节数组</span><br>            <span class="hljs-comment">//显示到编辑区</span><br>            ui-&gt;textEdit-&gt;<span class="hljs-built_in">setText</span>(array);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>            QByteArray array;<span class="hljs-comment">//字节数组</span><br>            <span class="hljs-keyword">while</span>(file.<span class="hljs-built_in">atEnd</span>() == <span class="hljs-literal">false</span>)<br>            &#123;<br>              <span class="hljs-comment">//读一行</span><br>              array += file.<span class="hljs-built_in">readLine</span>();<br>            &#125;<br>            ui-&gt;textEdit-&gt;<span class="hljs-built_in">setText</span>(array);<br>        &#125;<br>        file.<span class="hljs-built_in">close</span>();<span class="hljs-comment">//关闭文件</span><br><br>        <span class="hljs-comment">//获取文件信息</span><br>        <span class="hljs-function">QFileInfo <span class="hljs-title">info</span><span class="hljs-params">(path)</span></span>;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt;<span class="hljs-string">&quot;文件名字&quot;</span>&lt;&lt;info.<span class="hljs-built_in">fileName</span>().<span class="hljs-built_in">toUtf8</span>().<span class="hljs-built_in">data</span>();<br>        <span class="hljs-comment">//qDebug() &lt;&lt;&quot;文件路径&quot;&lt;&lt;info.filePath();</span><br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt;<span class="hljs-string">&quot;文件的大小&quot;</span>&lt;&lt;info.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt;<span class="hljs-string">&quot;文件的后缀&quot;</span>&lt;&lt;info.<span class="hljs-built_in">suffix</span>();<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt;<span class="hljs-string">&quot;文件创建的时间&quot;</span>&lt;&lt;<br>             info.<span class="hljs-built_in">created</span>().<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;yyyy-MM-ddd hh:mm:ss&quot;</span>); <span class="hljs-comment">//创建时间</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-写文件"><a href="#2-写文件" class="headerlink" title="2.写文件"></a>2.写文件</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs awk">void Widget::on_pushButton_Write_clicked()<br>&#123;<br>    QString path = QFileDialog::getSaveFileName(this,<span class="hljs-string">&quot;save&quot;</span>,<span class="hljs-string">&quot;../&quot;</span>,<span class="hljs-string">&quot;TXT(*.txt&quot;</span>);<br>    <span class="hljs-keyword">if</span>(path.isEmpty() == false)<br>    &#123;<br>        <span class="hljs-regexp">//</span>创建文件对象<br>        QFile file;<br>        file.setFileName(path);<br><br>        <span class="hljs-regexp">//</span>打开文件，只写方式<br>        bool isOK = file.open(QIODevice::WriteOnly);<br>        <span class="hljs-keyword">if</span>(isOK<br>                == true)<br>        &#123;<br>            <span class="hljs-regexp">//</span>获取编辑框的内容<br>            QString str = ui-&gt;textEdit-&gt;toPlainText();<br>            <span class="hljs-regexp">//</span>写文件<br>            <span class="hljs-regexp">//</span>QString转换为QByteArray<br>            <span class="hljs-regexp">//</span>file.write(str.toUtf8());<br><br>            <span class="hljs-regexp">//</span>QString→C++ string → char *<br>            <span class="hljs-regexp">//</span>file.write(str.toStdString().data());<br><br>            <span class="hljs-regexp">//</span>转换本地平台编码<br>            file.write(str.toLocal8Bit());<br><br>            <span class="hljs-regexp">//</span>QString → QByteArray<br><span class="hljs-regexp">//</span>            QString buf =<span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-regexp">//</span>            QByteArray Array = buff.toUtf8();<span class="hljs-regexp">//</span>中文<br><span class="hljs-regexp">//</span>            Array= buf.toLocal8Bit()<span class="hljs-regexp">//</span>本地编码<br><br>            <span class="hljs-regexp">//</span>QByteArray → char *<br>            <span class="hljs-regexp">//</span>char *b = a.data();<br><br>            <span class="hljs-regexp">//</span>char * → QString<br>            <span class="hljs-regexp">//</span>char *p = <span class="hljs-string">&quot;abc&quot;</span>;<br>            <span class="hljs-regexp">//</span>QString c=QString(p);<br><br>        &#125;<br>        file.close();<span class="hljs-regexp">//</span>关闭文件<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt控件系列之QLineEdit(单行文本编辑器)</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<h1 id="1-QLineEdit"><a href="#1-QLineEdit" class="headerlink" title="1.QLineEdit"></a>1.QLineEdit</h1><p>QlineEdit为Qt的单行文本编辑器。</p><h2 id="1-1设置获取内容"><a href="#1-1设置获取内容" class="headerlink" title="1.1设置获取内容"></a>1.1设置获取内容</h2><ul><li>获取编辑器框内容使用text()<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl">QS<span class="hljs-function"><span class="hljs-title">tring</span> str =ui-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit</span>-&gt;</span><span class="hljs-keyword">text</span>();<br>qDebug()<span class="hljs-string">&lt;&lt;str;</span><br></code></pre></td></tr></table></figure></li><li>设置编辑框内容使用setText()<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit</span>-&gt;</span>setText(<span class="hljs-string">&quot;123&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-2设置内容显示的间隔"><a href="#1-2设置内容显示的间隔" class="headerlink" title="1.2设置内容显示的间隔"></a>1.2设置内容显示的间隔</h2><p>我们在使用QLineEdit显示文本的时候，希望在左侧流出一些空白位置，这个时候就需要我们使用QLineEdit提供的setTextMargins函数：<br>函数声明：<code>void QLineEdit::setTextMargins(int left, int top, int right, int bottom)</code><br>此函数可以指定显示的文本与输入框上下左右边界的像素数</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit</span>-&gt;</span>setTextMargins(<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">//这里的间距是以像素点为单位</span><br></code></pre></td></tr></table></figure><h2 id="1-3设置显示的模式"><a href="#1-3设置显示的模式" class="headerlink" title="1.3设置显示的模式"></a>1.3设置显示的模式</h2><p>我们使用QLineEdit类的setEchoMode()函数来进行设置文本的显示模式，函数的声明：<br><code>void setEchoMode(EchoMode)</code><br>EchoMode是一个枚举类型,一共定义了四种显示模式:       </p><ul><li>QLineEdit::Normal     模式显示方式，按照输入的内容显示。        </li><li>QLineEdit::NoEcho    不显示任何内容，此模式下无法看到用户的输入。       </li><li>QLineEdit::Password    密码模式，输入的字符会根据平台转换为特殊字符。  </li><li>QLineEdit::PasswordEchoOnEdit    编辑时显示字符否则显示字符作为密码。    <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit</span>-&gt;</span>setEchoMode(QLineEdit::Password); <br></code></pre></td></tr></table></figure><h2 id="1-4设置输入提示"><a href="#1-4设置输入提示" class="headerlink" title="1.4设置输入提示"></a>1.4设置输入提示</h2>我们想输入一个或者几个字符，下边就会列出和我们输出的字符相匹配的字符串，QLineEdit要实现这样的功能可以使用该类的成员函数setComleter()函数来实现:<br><code>void QLineEdit::setCompleter(QCompleter *c) </code>   <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">QStringList <span class="hljs-built_in">list</span>; <span class="hljs-comment">//需要#include &lt;QStringList&gt; 字符串链表头文件</span><br><span class="hljs-built_in">list</span>&lt;&lt;<span class="hljs-string">&quot;Hello&quot;</span>&lt;&lt;<span class="hljs-string">&quot;How are you!&quot;</span>&lt;&lt;<span class="hljs-string">&quot;hehe&quot;</span>;<br>QCompleter *com = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QCompleter(<span class="hljs-params">list</span>,<span class="hljs-params">this</span>)</span>;  <span class="hljs-comment">//需要#include &lt;QCompleter&gt;</span><br>com-&gt;set<span class="hljs-constructor">CaseSensitivity(Qt::CaseInsensitive)</span>;<br>ui-&gt;lineEdit-&gt;set<span class="hljs-constructor">Completer(<span class="hljs-params">com</span>)</span>;<br></code></pre></td></tr></table></figure>QCompleter类的setCaseSensitivity()函数可以设置是否区分大小写，它的参数是一个枚举类型：    </li><li>Qt::CaseInsensitive    不区分大小写         </li><li>Qt::CaseSensitive    区分大小写  </li></ul><p>如果不设置该属性，默认匹配字符串时是区分大小写的。              </p>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt下使用MD5机密</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1.MD5"></a>1.MD5</h1><p>MD5的典型应用是对一段信息（Message）产生信息摘要（Message-Digest），以防止被篡改。<br>MD5就可以为任何文件（不管其大小、格式、数量）产生一个同样独一无二的“数字指纹”，如果任何人对文件名做了任何改动，其MD5值也就是对应的“数字指纹”都会发生变化。<br>MD5 加密后的位数有两种：16 位与 32 位。16 位实际上是从 32 位字符串中取中间的第 9 位到第 24 位的部分。</p><h1 id="2-qt下进行MD5加密"><a href="#2-qt下进行MD5加密" class="headerlink" title="2.qt下进行MD5加密"></a>2.qt下进行MD5加密</h1><p>核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">头文件：<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QCryptographicHash&gt;</span> <span class="hljs-comment">//MD5加密类</span></span><br><br>    QString pwd= ui-&gt;lineEdit-&gt;<span class="hljs-built_in">text</span>();<br><br>    QString MD5;<span class="hljs-comment">//加密后字符串</span><br>    QByteArray ba,bb;<br>    <span class="hljs-comment">//实例QCryptographicHash</span><br>    <span class="hljs-function">QCryptographicHash <span class="hljs-title">md</span><span class="hljs-params">(QCryptographicHash::Md5)</span></span>;<br>    ba.<span class="hljs-built_in">append</span>(pwd);<br>    md.<span class="hljs-built_in">addData</span>(ba);<br>    bb=md.<span class="hljs-built_in">result</span>();<br>    MD5.<span class="hljs-built_in">append</span>(bb.<span class="hljs-built_in">toHex</span>());<br>    <span class="hljs-comment">//MD5号称是不可逆推，所以暂时没有解密</span><br><br>    <span class="hljs-comment">//输出加密后字符串</span><br>    ui-&gt;lineEdit_2-&gt;<span class="hljs-built_in">setText</span>(MD5);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt软件打包与发布(windeployqt工具）</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Qt/</url>
      
        <content type="html"><![CDATA[<p>使用Qt官方自带的<code>windeployqt</code>工具来打包我们的项目。</p><h1 id="1-查看windeloyqt工具在哪"><a href="#1-查看windeloyqt工具在哪" class="headerlink" title="1.查看windeloyqt工具在哪"></a>1.查看<code>windeloyqt</code>工具在哪</h1><p>我的Qt安装在D盘，所以我知道到的目录在<code>D:\Qt\Qt5.8.0\5.8\mingw53_32\bin</code>,同理你也可以自己去找自己的Qt安装目录</p><h1 id="2-生成项目的release文件"><a href="#2-生成项目的release文件" class="headerlink" title="2.生成项目的release文件"></a>2.生成项目的<code>release</code>文件</h1><p>打开你的项目，选择<code>release</code>版本，点击运行，就能够生成项目的<code>release</code>版本的可执行程序了。</p><h1 id="3-打开Qt的控制台，打包"><a href="#3-打开Qt的控制台，打包" class="headerlink" title="3.打开Qt的控制台，打包"></a>3.打开Qt的控制台，打包</h1><blockquote><p>注意是Qt的控制台，不是dos界面。</p></blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/DF8E8FBD58B34012BDFA99EBAA33E6FD?method=download&shareKey=8ac24e1553be865a0fc0cdba6c1205d6" alt="qt的控制台"></p><p>将你生成的Release版的可执行程序移动到一个新的文件夹中，切换到当前的目录下，接下来使用<code>windeployqt 程序名</code>命令，就可以对程序进行打包操作，如图：</p><p><img src="https://note.youdao.com/yws/api/personal/file/0CDF5BA8B10248AE8DA0BA62FBF93417?method=download&shareKey=c215cc7c7ac20720a23f5b0605f86fa8" alt="windeployqt命令"></p><h1 id="4-软件更换图标"><a href="#4-软件更换图标" class="headerlink" title="4.软件更换图标"></a>4.软件更换图标</h1><p>QT是跨平台的程序设计库，程序往往想要有一个好看的图标，方法如下：</p><ol><li>准备个ICO图标。例如：<code>first.ico</code></li><li>在.pro文件（项目文件）里写：<code>RC_ICONS = first.ico</code></li><li>保存，重新编译程序</li></ol>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee Tree浏览项目目录结构</title>
      <link href="/posts/%E5%B7%A5%E5%85%B7/Gitee-Tree/"/>
      <url>/posts/%E5%B7%A5%E5%85%B7/Gitee-Tree/</url>
      
        <content type="html"><![CDATA[<p>我们一般在访问Github和Gite时，点击需要查看项目下的目录时需要点击才能能够进行跳转。这样每次的跳转每次都需要刷新界面，并且很不方便。    </p><blockquote><p>使用<code>Gitee Tree</code>浏览器插件可以在<code>Gitee</code>、<code>GitHub</code>上显示代码树。不需要<code>clone</code>到本地就可以查看项目结构。特性：    </p><ul><li>就像在IDE一样简单易用的代码树      </li><li>快速浏览文件，不同刷新界面     </li><li>支持私有人存储库     </li></ul></blockquote><h1 id="1-拉取Gitee-Tree项目"><a href="#1-拉取Gitee-Tree项目" class="headerlink" title="1.拉取Gitee Tree项目"></a>1.拉取Gitee Tree项目</h1><p>登录自己的码云账号，在搜索区输入<code>Gitee Tree</code>来进行搜索项目。</p><p><img src="https://note.youdao.com/yws/api/personal/file/5A56CB008C7545F49B332D85F4667188?method=download&shareKey=8c7db13a747945491bc34b4cb0a497c4" alt="Gitee Tree项目界面"></p><p>在自己的本地建立一个文件夹进入，鼠标右键<code>Git bash Here</code>来进行拉取。</p><p><img src="https://note.youdao.com/yws/api/personal/file/CBBBA8EF18C04DE1BF1047A04D237B17?method=download&shareKey=a10a28a9b94d4e738596f308418b0fff" alt="Clone Gitee Tree"></p><h1 id="2-在Chrome安装"><a href="#2-在Chrome安装" class="headerlink" title="2.在Chrome安装"></a>2.在Chrome安装</h1><p>在克隆下来的项目中找到<code>dist</code>文件夹，我的目录时<code>C:\Users\Salt\Desktop\Gitee Tree\GitCodeTree\dist</code>,自己的因人而异。解压<code>dist</code>下的<code>chrome.zip</code>压文件,<br>打开<code>Chome浏览器</code>的扩展程序，进行加载已解压的扩展程序。安装完成就入下图一样：</p><p><img src="https://note.youdao.com/yws/api/personal/file/88E81F81C0A146819AEADAA7CD55B41C?method=download&shareKey=52727bbbeb5892cbc4c6cfe3e6bce75d" alt="安装完成Gitee Tree"></p><h1 id="3-显示界面"><a href="#3-显示界面" class="headerlink" title="3.显示界面"></a>3.显示界面</h1><p>使用快键键<code>Ctrl+shift+s</code>来快速打开左侧的代码树,展示效果如下：</p><p><img src="https://note.youdao.com/yws/api/personal/file/C5D873B9937545299517FC735E2CF037?method=download&shareKey=910dacf25c793bc34030004af28ae9fb" alt="插件展示效果"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Gitee Tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装MySQL</title>
      <link href="/posts/Linux/CentOS7/"/>
      <url>/posts/Linux/CentOS7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MySQL的下载"><a href="#1-MySQL的下载" class="headerlink" title="1.MySQL的下载"></a>1.MySQL的下载</h1><ul><li>MySQL的下载地址:<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></li></ul><blockquote><p>这里我下载MySQL 8.0.26</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/yum_MySQL%E4%B8%8B%E8%BD%BD.jpg" alt="yum_MySQL下载"></p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><h2 id="2-1安装MySQL依赖库"><a href="#2-1安装MySQL依赖库" class="headerlink" title="2.1安装MySQL依赖库"></a>2.1安装MySQL依赖库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装MySQL依赖[perl net-tools]</span><br>yum install perl net-tools -y<br></code></pre></td></tr></table></figure><h2 id="2-2卸载mariabd"><a href="#2-2卸载mariabd" class="headerlink" title="2.2卸载mariabd"></a>2.2卸载mariabd</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -qa | grep mariadb<br>rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64<br></code></pre></td></tr></table></figure><h2 id="2-3安装MySQL8-0-18"><a href="#2-3安装MySQL8-0-18" class="headerlink" title="2.3安装MySQL8.0.18"></a>2.3安装MySQL8.0.18</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装MySQL8.0.18</span><br>tar -xvf mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar<br><span class="hljs-meta">#</span><span class="bash">此次执行安装</span><br>rpm -ivh mysql-community-common-8.0.18-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-8.0.18-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-8.0.18-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-server-8.0.18-1.el7.x86_64.rpm<br><span class="hljs-meta">#</span><span class="bash">启动mysql</span><br>systemctl start mysqld<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">查找密码并登录MySQL</span><br>cat /var/log/mysqld.log | grep password<br>mysql -u root -p<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">修改MySQL的密码8.0版本输入命令:</span><br>set global validate_password.policy=LOW;<br>set global validate_password.length=6;  <br><span class="hljs-meta">#</span><span class="bash">更改用户的加密方式</span><br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27; PASSWORD EXPIRE NEVER;<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#刷新权限</span></span><br>FLUSH PRIVILEGES;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#修改MySQL密码5.7版本输入命令:</span></span><br>set global validate_password_policy=LOW;<br>set global validate_password_length=6;<br>alter user root@localhost identifed by &#x27;123456&#x27;;<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 修改MySQL链接地址方便远程连接</span></span><br>use mysql;<br>update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;<br>commit;<br>exit;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">重启MySQL服务</span><br>systemctl restart mysqld<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">使用连接工具连接,Navicat连接MySQL</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装Python3</title>
      <link href="/posts/Linux/CentOS7/"/>
      <url>/posts/Linux/CentOS7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CentOS7安装-Python3"><a href="#1-CentOS7安装-Python3" class="headerlink" title="1.CentOS7安装 Python3"></a>1.CentOS7安装 Python3</h1><p>当前最新的 CentOS 7 默认安装的是 Python 2 ，并且默认的官方 yum 源中不提供 Python 3 的安装包，因此记录备用。</p><h2 id="1-1查看-Python-命令的位置"><a href="#1-1查看-Python-命令的位置" class="headerlink" title="1.1查看 Python 命令的位置"></a>1.1查看 Python 命令的位置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">whereis python<br></code></pre></td></tr></table></figure><h2 id="1-2安装-Python3-的相关依赖包"><a href="#1-2安装-Python3-的相关依赖包" class="headerlink" title="1.2安装 Python3 的相关依赖包"></a>1.2安装 Python3 的相关依赖包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make<br></code></pre></td></tr></table></figure><p>通过以上命令即可安装了 python3 所用的相关依赖。</p><h2 id="1-3下载-Python3-的源码包"><a href="#1-3下载-Python3-的源码包" class="headerlink" title="1.3下载 Python3 的源码包"></a>1.3下载 Python3 的源码包</h2><p>通过<a href="https://www.python.org/ftp/python/">https://www.python.org/ftp/python/</a> 寻找需要安装那个版本。此处以3.8.1为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">下载：</span><br>wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tar.xz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">解压缩：</span><br>tar -xf Python-3.8.1.tar.xz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">进入解压后的目录手动编译</span><br>cd Python-3.8.1<br>./configure prefix=/usr/local/python3<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h2 id="1-4添加软件链接"><a href="#1-4添加软件链接" class="headerlink" title="1.4添加软件链接"></a>1.4添加软件链接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">备份原来的链接</span><br>mv /usr/bin/python /usr/bin/python.bak<br><span class="hljs-meta">#</span><span class="bash">添加python3的软链接(删除原来的python链接)</span><br>ln -s /usr/local/python3/bin/python3.8 /usr/bin/python<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">或者直接添加为python3的软链接，避免冲突</span><br>ln -s /usr/local/python3/bin/python3.8 /usr/bin/python3<br></code></pre></td></tr></table></figure><blockquote><p>建议使用后者，这样可以避免冲突</p></blockquote><h2 id="1-5查看Python的版本"><a href="#1-5查看Python的版本" class="headerlink" title="1.5查看Python的版本"></a>1.5查看Python的版本</h2><p>通过 python -V 即可查看当前 python 版本为 2.7.5,python3 -V 即可查看当前 python 版本为 3.8.1。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@CentOS7 bin]# python -V<br>Python 2.7.5<br>[root@CentOS7 bin]# python3 -V<br>Python 3.8.1<br></code></pre></td></tr></table></figure><h1 id="2-安装Python3后引发问题"><a href="#2-安装Python3后引发问题" class="headerlink" title="2.安装Python3后引发问题"></a>2.安装Python3后引发问题</h1><h2 id="2-1yum不能使用"><a href="#2-1yum不能使用" class="headerlink" title="2.1yum不能使用"></a>2.1yum不能使用</h2><p>在安装完Python3后,使用yum会有如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@CentOS7 ~]# yum clean all<br>  File &quot;/usr/bin/yum&quot;, line 30<br>    except KeyboardInterrupt, e:<br>                            ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure><p>产生原因:    </p><p>由于yum采用Python作为命令解释器，原来系统自带的Python解释器是Python2.7。</p><p>解决方式：    </p><p>修改<code>vim /usr/bin/yum</code>文件中的第一行为<code>#!/usr/bin/python2.7</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/python2.7</span><br>import sys<br>try:<br>    import yum<br>except ImportError:<br></code></pre></td></tr></table></figure><h2 id="2-2firewall-cmd查看防火墙状态"><a href="#2-2firewall-cmd查看防火墙状态" class="headerlink" title="2.2firewall-cmd查看防火墙状态"></a>2.2<code>firewall-cmd</code>查看防火墙状态</h2><p>在安装完Python3后,执行<code>firewall-cmd --state</code>错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@CentOS7 ~]# firewall-cmd --state<br>Traceback (most recent call last):<br>  File &quot;/usr/bin/firewall-cmd&quot;, line 24, in &lt;module&gt;<br>    from gi.repository import GObject<br>ModuleNotFoundError: No module named &#x27;gi&#x27;<br></code></pre></td></tr></table></figure><p>产生原因:     </p><p>出现这个问题是，更新了系统Python版本,并且version&gt;=Python3,而CentOS7自带的是Python2.7，所以会出现这个错误。</p><p>解决方式:    </p><p>修改 <code>/usr/bin/firewall-cmd</code>文件，在 python 后面添加数字 2.7 即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/python2.7 -Es</span><br><span class="hljs-meta">#</span><span class="bash"> -*- coding: utf-8 -*-</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment"># Copyright (C) 2009-2016 Red Hat, Inc.</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装系统磁盘目录分析工具ncdu</title>
      <link href="/posts/Linux/CentOS7/"/>
      <url>/posts/Linux/CentOS7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Centos系统磁盘目录分析工具-Ncdu"><a href="#1-Centos系统磁盘目录分析工具-Ncdu" class="headerlink" title="1.Centos系统磁盘目录分析工具-Ncdu"></a>1.Centos系统磁盘目录分析工具-Ncdu</h1><p><code>ncdu</code>命令是对传统<code>du</code>命令功能上的增强，不需要像<code>du</code>那样输入大量的命令，就可以计算文件及目录大小并可以按照大小或文件名进行排序。</p><h1 id="2-Yum安装"><a href="#2-Yum安装" class="headerlink" title="2.Yum安装"></a>2.Yum安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum search ncdu  //搜索所需要的包名<br>yum -y install epel-release<br>yum -y install ncdu<br></code></pre></td></tr></table></figure><h1 id="3-ncdu使用方法"><a href="#3-ncdu使用方法" class="headerlink" title="3.ncdu使用方法"></a>3.ncdu使用方法</h1><p>执行<code>ncdu</code>命令回车，即可列出当前目录下的文件及目录的大小，默认按照大小进行排序</p><p>键盘操作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">n — 按文件名排序（升序/降序）<br>s — 按文件大小排序（升序/降序）<br>C – 按项目数排序（升序/降序）<br>d – 删除选定的文件或目录<br>t — 排序时将目录放在文件前面<br>g – 以图形方式显示百分比<br>i – 显示当前文件/目录信息<br><br>最后输入q可以退出<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国产系统(二)：Kylin系统安装Qt5.9.9开发环境</title>
      <link href="/posts/Linux/Kylin/"/>
      <url>/posts/Linux/Kylin/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><code>Kylin</code>系统V4自带了<code>Qt 4.8.7</code>，而我们在<code>Kylin</code>中进行软件开发Qt4这个版本太低了我们需要安装高版本。</p><h1 id="二、版本检查"><a href="#二、版本检查" class="headerlink" title="二、版本检查"></a>二、版本检查</h1><p>检查当前系统版本与Qt版本：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708212839.png"></p><h1 id="三、Qt下载"><a href="#三、Qt下载" class="headerlink" title="三、Qt下载"></a>三、Qt下载</h1><p>准备好下载好的Qt安装包，这里我使用的版本是<code>Qt5.9.9</code>  </p><h1 id="四、Qt安装"><a href="#四、Qt安装" class="headerlink" title="四、Qt安装"></a>四、Qt安装</h1><h2 id="4-1、安装过程"><a href="#4-1、安装过程" class="headerlink" title="4.1、安装过程"></a>4.1、安装过程</h2><p>在命令行执行,自动弹出安装界面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./qt-opensource-linux-x64-5.9.9.run <br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708213655.png"></p><p>Qt在安装的过程中断开网络，不然Qt必须需要登录，断开网络后则可以点击下一步选项：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708213906.png"></p><p>注意需要勾选自己所需要的组件，如下图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708214019.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708214126.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708214156.png"></p><p>等待安装过一会就好<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708214224.png"></p><p>安装完成，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708214334.png"></p><h2 id="4-2、Qt编译器启动"><a href="#4-2、Qt编译器启动" class="headerlink" title="4.2、Qt编译器启动"></a>4.2、Qt编译器启动</h2><h3 id="4-2-1、目录下启动"><a href="#4-2-1、目录下启动" class="headerlink" title="4.2.1、目录下启动"></a>4.2.1、目录下启动</h3><p>在Qt的安装目录下通过命令启动Qt软件，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708214641.png"><br>每次通过命令启动Qt软件有点繁琐，有没有其他方式方便启动呢。</p><h3 id="4-2-1、建立软链接"><a href="#4-2-1、建立软链接" class="headerlink" title="4.2.1、建立软链接"></a>4.2.1、建立软链接</h3><p>软链接文件有类似于Windows的快捷方式。包含的有另一文件的位置信息，链接之后就可以通过点击链接后的文件进行启动Qt软件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /opt/Qt5.9.9/Tools/QtCreator/bin/qtcreator /home/kylin/桌面/qtcreator<br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708215321.png"></p><h1 id="五、测试”Demo”"><a href="#五、测试”Demo”" class="headerlink" title="五、测试”Demo”"></a>五、测试”Demo”</h1><p>点击New新建一个项目，操作步骤如下：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708220614.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708220653.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708220823.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708220850.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708220945.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708221025.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708221055.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708221121.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708221156.png"></p><p>点击左边的小三角或者ctrl+r直接运行项目，如图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230708221724.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Kylin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国产系统(三)：Kylin系统下QtCreator开发IDE无法输入中文</title>
      <link href="/posts/Linux/Kylin/"/>
      <url>/posts/Linux/Kylin/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用QtCreator开发IDE的过程中发现无法输入中文，</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Kylin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 命令错误</title>
      <link href="/posts/Linux/CentOS7/"/>
      <url>/posts/Linux/CentOS7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CentOS-使用yum命令安装出现错误提示：Loaded-plugins-fastestmirror"><a href="#1-CentOS-使用yum命令安装出现错误提示：Loaded-plugins-fastestmirror" class="headerlink" title="1.CentOS 使用yum命令安装出现错误提示：Loaded plugins: fastestmirror"></a>1.CentOS 使用yum命令安装出现错误提示：Loaded plugins: fastestmirror</h1><p><code>yum install</code>的时候提示：```Loaded plugins: fastestmirror``</p><p><code>fastestmirror</code>是<code>yum</code>的一个加速插件，这里是插件提示信息是插件不能用了。</p><p>不能用就先别用呗，禁用掉，先<code>yum</code>了再说。</p><h2 id="1-1-修改插件的配置文件"><a href="#1-1-修改插件的配置文件" class="headerlink" title="1.1 修改插件的配置文件"></a>1.1 修改插件的配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/yum</span><span class="hljs-regexp">/pluginconf.d/</span>fastestmirror.conf<br><br><br>enabled = <span class="hljs-number">1</span><span class="hljs-regexp">//</span>由<span class="hljs-number">1</span>改为<span class="hljs-number">0</span>，禁用该插件<br></code></pre></td></tr></table></figure><h2 id="2-1-修改yum的配置文件"><a href="#2-1-修改yum的配置文件" class="headerlink" title="2.1 修改yum的配置文件"></a>2.1 修改yum的配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/yum</span>.conf<br>plugins=<span class="hljs-number">1</span><span class="hljs-regexp">//</span>改为<span class="hljs-number">0</span>，不使用插件<br></code></pre></td></tr></table></figure><h2 id="3-1-清除缓存并重新构建yum源"><a href="#3-1-清除缓存并重新构建yum源" class="headerlink" title="3.1 清除缓存并重新构建yum源"></a>3.1 清除缓存并重新构建<code>yum</code>源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum clean all<br>yum clean dbcache<br>yum makecache<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国产系统(一)：Kylin系统搭建与虚拟机安装</title>
      <link href="/posts/Linux/Kylin/"/>
      <url>/posts/Linux/Kylin/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>开发国产麒麟系统应用，需要用到银河麒麟系统，本次记录下虚拟机安装麒麟虚拟机的流程，这里选择安装到虚拟机是为了方便。</p><h1 id="二、提前准备"><a href="#二、提前准备" class="headerlink" title="二、提前准备"></a>二、提前准备</h1><ul><li><p>VMware 虚拟机软件</p><p> 这里可以自行选择，建议选择比较高的版本。这里我选择是<code>VMware Workstation 14 Pro </code></p></li><li><p>Kylin镜像</p><p>这里选用的是Kylin-4.0.2,镜像名称如下：</p><p>  <code>  Kylin-4.0.2-desktop-sp2_Community-20171127-x86_64.iso  </code><br>从镜像名称就可以看出为桌面系统，发布时间为2017年11月27日，x86平台。</p><p>  下载地址：<a href="thunder://QUFodHRwczovL21pcnJvcnMuaHVhd2VpY2xvdWQuY29tL3VidW50dWt5bGluL0t5bGluLTQuMC4yLWRlc2t0b3Atc3AyX0NvbW11bml0eS0yMDE3MTEyNy14ODZfNjQuaXNvWlo=/">Kylin-4.0.2-desktop-sp2</a><br>  直接打开迅雷将链接复制进去。</p></li></ul><h1 id="三、安装银河麒麟到虚拟机"><a href="#三、安装银河麒麟到虚拟机" class="headerlink" title="三、安装银河麒麟到虚拟机"></a>三、安装银河麒麟到虚拟机</h1><h2 id="3-1打开虚拟机软件"><a href="#3-1打开虚拟机软件" class="headerlink" title="3.1打开虚拟机软件"></a>3.1打开虚拟机软件</h2><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705213456.png"></p><h2 id="3-2新建虚拟机"><a href="#3-2新建虚拟机" class="headerlink" title="3.2新建虚拟机"></a>3.2新建虚拟机</h2><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705213644.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705214116.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705214257.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705214410.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705214623.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705214732.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705214830.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215014.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215100.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215138.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215224.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215340.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215419.png"></p><p>点击完成，则创建成功。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215459.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215608.png"></p><h2 id="3-3在虚拟中安装Kylin银河麒麟系统"><a href="#3-3在虚拟中安装Kylin银河麒麟系统" class="headerlink" title="3.3在虚拟中安装Kylin银河麒麟系统"></a>3.3在虚拟中安装Kylin银河麒麟系统</h2><p>这里要将虚拟机改为从镜像启动，如下图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215753.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705215857.png"></p><p>我们在VMware中安装虚拟机的过程中，安装了一个空白磁盘。</p><p>然后开启虚拟机，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705220121.png"></p><p>下图为成功启动后镜像视图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705220915.png"></p><p>下面进行银河麒麟系统选择配置安装，这里可以选择英文与中文,这里我选择中文,如下图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705221123.png"></p><p>这里选择从光盘安装：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705221312.png"></p><p>这里选择快速安装Kylin,等待你对Linux有深入了解后可以可以选择高级安装<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705221416.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705221635.png"></p><p>进行系统名和密码设置<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705221829.png"></p><p>自动安装程序，等待安装。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705222027.png"></p><p>安装完成如下图所示，直接进行重启。<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705222152.png"></p><h2 id="3-4安装完成"><a href="#3-4安装完成" class="headerlink" title="3.4安装完成"></a>3.4安装完成</h2><p>重启系统，进入系统，如下图：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705222808.png"></p><p>注意：这里无法全屏需要安装VMware Tools。</p><h2 id="3-5-安装VMware-Tools"><a href="#3-5-安装VMware-Tools" class="headerlink" title="3.5 安装VMware Tools"></a>3.5 安装VMware Tools</h2><h3 id="3-5-1-配置root权限"><a href="#3-5-1-配置root权限" class="headerlink" title="3.5.1 配置root权限"></a>3.5.1 配置root权限</h3><p>Kylin刚安装后，不能在terminal中运行su命令，因为root没有默认密码，需要手动设定。<br>以安装Kylin时输入的用户名登陆，该用户在admin组中，有权限给root设定密码.</p><p>给root用户设置密码的具体步骤：</p><ul><li>打开一个terminal，然后输入下面的命令</li></ul><p>　  　<code>sudo passwd root</code></p><p>回车后会让你输入密码和确认密码，这样你的root的密码设置好了.</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705224303.png"></p><h3 id="3-5-2-安装VMware-Tools过程"><a href="#3-5-2-安装VMware-Tools过程" class="headerlink" title="3.5.2 安装VMware Tools过程"></a>3.5.2 安装VMware Tools过程</h3><p>点击VMware虚拟机，虚拟机菜单选择安装VMware Tools<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705223305.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705223121.png"></p><p>将VMwareTools-10.1.15-6627299.tar.gz复制到桌面上，执行下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo tar -xzvf VMwareTools-10.1.15-6627299.tar.gz<br>cd vmware-tools-distrib/<br>sudo ./vmware-install.pl <br></code></pre></td></tr></table></figure><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705225051.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705225234.png"></p><p>安装完成如下图所示：</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705225404.png"></p><p>最后重启虚拟机，就可以全屏显示，同时也可以将虚拟内的文件复制到外面<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705225619.png"></p><h1 id="四、自带软件检查"><a href="#四、自带软件检查" class="headerlink" title="四、自带软件检查"></a>四、自带软件检查</h1><p>自带中文输入法,自带<code>Qt4.8.7</code> <code>Eclipse 3.8</code>，<code>gcc</code>,<code>g++</code>,<code>gdb</code>，<code>make</code>。可以快速使用</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230705230831.png"></p><blockquote></blockquote><ul><li>Qt4.8.7是Qt4的终结版本，是Qt4系列版本中最稳定最经典的（很多嵌入式板子还是用Qt4.8），其实该版本是和Qt5.5差不多时间发布的。</li><li>Qt5.12.3是最后提供mysql数据库插件的版本，往后的版本需要自行编译对应的mysql数据库插件，官方安装包不再提供。</li><li>Qt5.14.2是最后提供二进制安装包的版本，后面的版本都需要在线安装</li></ul><h1 id="五、配置agt-get网络源"><a href="#五、配置agt-get网络源" class="headerlink" title="五、配置agt-get网络源"></a>五、配置agt-get网络源</h1><p>银河麒麟4.0.2网络源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">4.0.2桌面版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2-desktop main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2-sp1桌面版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2sp1-desktop main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2-sp2桌面版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2sp2-desktop main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2服务器版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2-server main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2-sp1服务器版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2sp1-server main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2-sp2服务器版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2sp2-server main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2-sp2 FT2000+服务器版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2sp2-server-ft2000 main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2-sp3桌面版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2sp3-desktop main restricted universe multiverse<br><span class="hljs-meta">#</span><span class="bash">4.0.2-sp3服务器版本:</span><br>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 4.0.2sp3-server main restricted universe multiverse<br></code></pre></td></tr></table></figure><h2 id="5-1-命令配置"><a href="#5-1-命令配置" class="headerlink" title="5.1 命令配置"></a>5.1 命令配置</h2><p>在系统的/etc/apt/sources.list文件中，根据不同版本填入以下内容。</p><p>编辑sources.list文件根据不同版本选择网络源地址，操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/apt/sources.list<br>sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure><p>操作过程如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706163313.png"></p><h2 id="5-2-图形界面配置"><a href="#5-2-图形界面配置" class="headerlink" title="5.2 图形界面配置"></a>5.2 图形界面配置</h2><p>在界面直接选择 开始==》所有软件==》麒麟软件中心<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706162427.png"></p><p>在麒麟软件中心进行操作，先删除原来网络源，添加新的软件源，如下图所示：<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706162620.png"></p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706162745.png"></p><p>点击更新软件源后等待更新，更新完成后会提示<br><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/20230706162928.png"></p><h1 id="六、软件更新"><a href="#六、软件更新" class="headerlink" title="六、软件更新"></a>六、软件更新</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update  #从服务器获取软件列表，并在本地保存为文件。<br>sudo apt-get upgrade  #本地安装软件与本地软件列表对比，如本地安装版本低，会提示更新。<br></code></pre></td></tr></table></figure><p>参考链接：</p><ul><li><a href="https://www.oschina.net/news/91680/ubuntu-kylin-yinhe-4-0-2-sp2-released">银河麒麟操作系统社区版 4.0.2-SP2 正式发布信息</a></li><li><a href="http://www.520xiazai.com/soft/Kylin-V4-Desktop.html">银河麒麟操作系统(Kylin)V4 SP1/SP2 桌面版下载</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Kylin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章弄明白Wireshark抓包工具的用法</title>
      <link href="/posts/%E5%B7%A5%E5%85%B7/Wireshark/"/>
      <url>/posts/%E5%B7%A5%E5%85%B7/Wireshark/</url>
      
        <content type="html"><![CDATA[<h1 id="1-wireshark网络抓包工具"><a href="#1-wireshark网络抓包工具" class="headerlink" title="1.wireshark网络抓包工具"></a>1.wireshark网络抓包工具</h1><p>Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。<br>网络封包分析软件的功能可想像成 “电工技师使用电表来量测电流、电压、电阻” 的工作 - 只是将场景移植到网络上，并将电线替换成网络线。</p><p>wireshark的官方下载地址：<a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p><p>wireshark是非常流行的网络封包分析软件，功能十分强大。可以截取各种网络封包，从而显示网络封包的详细信息。</p><h1 id="2-Wireshark不能做"><a href="#2-Wireshark不能做" class="headerlink" title="2.Wireshark不能做"></a>2.Wireshark不能做</h1><p>wireshark不能够修改封包的内容或者发送封包，只能够只来查看封包。</p><h1 id="3-wireshark开始进行抓包"><a href="#3-wireshark开始进行抓包" class="headerlink" title="3.wireshark开始进行抓包"></a>3.wireshark开始进行抓包</h1><h2 id="3-1wireshark开始界面"><a href="#3-1wireshark开始界面" class="headerlink" title="3.1wireshark开始界面"></a>3.1wireshark开始界面</h2><p>wiershark是用来捕捉电脑上的某一个网卡的网络包，而电脑上具有多个网卡的时候就需要进行从着多个网卡中选择，你需要的一个网卡。<br><img src="https://img-blog.csdnimg.cn/20200328010213635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2wireshark窗口介绍"><a href="#3-2wireshark窗口介绍" class="headerlink" title="3.2wireshark窗口介绍"></a>3.2wireshark窗口介绍</h2><p><img src="https://img-blog.csdnimg.cn/20200328010233901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>WireShark 主要分为这几个界面</p><ol><li>Display Filter(显示过滤器)，  用于过滤</li><li>Packet List Pane(封包列表)， 显示捕获到的封包， 有源地址和目标地址，端口号。 颜色不同，代表</li><li>Packet Details Pane(封包详细信息), 显示封包中的字段</li><li>Dissector Pane(16进制数据)</li><li>Miscellanous(地址栏，杂项)</li></ol><h2 id="3-3-wireshark显示过滤"><a href="#3-3-wireshark显示过滤" class="headerlink" title="3.3.wireshark显示过滤"></a>3.3.wireshark显示过滤</h2><p>使用显示过滤的原因，在我们者初次使用wireshark时，将会产生大量的冗余数据，想想这么多的数据让我们在其中找到我们需要的部分，这样就显得非常的难。<br>相对而言过滤器就会在大量的数据中能够让我们从中找到我们所需要的数据信息。<br>过滤器有两种：</p><ol><li><p>显示过滤器，就是主界面上那个，用于在捕获的记录中找到所需要的记录</p></li><li><p>捕获过滤器：用来过滤捕获的封 包，以避免捕获的太多记录。在捕获→捕获过滤器</p><h2 id="3-4过滤表达式的规则"><a href="#3-4过滤表达式的规则" class="headerlink" title="3.4过滤表达式的规则"></a>3.4过滤表达式的规则</h2></li><li><p>协议过滤<br><code>TCP</code>    只显示TCP协议。</p></li><li><p>IP 过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip.src ==192.168.1.102显示源地址为192.168.1.102<br>ip.dst==192.168.1.102目标地址为192.168.1.102<br></code></pre></td></tr></table></figure></li><li><p>端口过滤</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcp</span>.port == <span class="hljs-number">80</span>端口为<span class="hljs-number">80</span>的       <br><span class="hljs-attribute">tcp</span>.srcport == <span class="hljs-number">80</span>只显示TCP协议的愿端口为<span class="hljs-number">80</span>的。<br></code></pre></td></tr></table></figure></li><li><p>Http模式过滤</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">http.request.method==<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>只显示HTTP GET方法的。<br>request.method==<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>只显示HTTP GET方法的。<br></code></pre></td></tr></table></figure></li><li><p>逻辑运算符为 AND/ OR</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Wireshark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于多线程实现TCP服务器</title>
      <link href="/posts/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP/"/>
      <url>/posts/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在网络通信的过程中，经过分析引起程序阻塞的函数，分别是:</p><ul><li><code>accept()</code>:如果服务端没有新客户端连接，阻塞当前进程/线程，如果检测到新的连接解除阻塞，建立连接</li><li><code>read()</code>:如果通信的套接字对应的读缓冲区没有数据，阻塞当前进程/线程，检测到数据解除阻塞，接收数据</li><li><code>write()</code>:如果通信的的套接字写缓冲区写满了，阻塞当前进行/线程（一般这种情况很少不常见）</li></ul><p>经过分析在单线程/单进程场景下,服务器是无法处理多连接的，解决方案:</p><ul><li>使用多线程使用</li><li>使用多进程实现 （不常用）</li><li>使用IO多路转接(复用)实现</li><li>使用IO多路转接-多线程实现</li></ul><h1 id="多线程并发"><a href="#多线程并发" class="headerlink" title="多线程并发"></a>多线程并发</h1><p>实现代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//使用C标准库实现TCP服务器  </span><br><span class="hljs-comment">//多线程实现TCP服务器,支持出客户端连接</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span><span class="hljs-comment">//多线程头文件</span></span><br><br><span class="hljs-comment">//信息结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SockInfo</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>    <span class="hljs-keyword">int</span> fd;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SockInfo</span> <span class="hljs-title">infos</span>[521];</span><span class="hljs-comment">//可接收512个客户端</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">working</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* arg)</span></span>;<span class="hljs-comment">//声明子线程函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1、创建监听的套接字</span><br>    <span class="hljs-comment">//参数一：AFINET使用IPV4格式的IP地址  </span><br>    <span class="hljs-comment">//参数二：SOCK_STREAM：使用流式的传输协议 SOCK_DGRAM：使用报文的传输协议</span><br>    <span class="hljs-keyword">int</span> lfd=<span class="hljs-built_in">socket</span>(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == lfd)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建监听的套接字成功&quot;</span>);<br>    <span class="hljs-comment">//2、将socket()返回值和本地IP端口绑定到一起</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>    addr.sin_family=AF_INET;<br>    addr.sin_port=<span class="hljs-built_in">htons</span>(<span class="hljs-number">10000</span>);  <span class="hljs-comment">//大端端口   网络字节序</span><br>    addr.sin_addr.s_addr=INADDR_ANY;<span class="hljs-comment">//INADDR_ANY代表本机所有IP  0.0.0.0</span><br>    <span class="hljs-keyword">int</span> ret=<span class="hljs-built_in">bind</span>(lfd,(struct sockaddr*)&amp;addr,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr));<br>    <span class="hljs-keyword">if</span>( <span class="hljs-number">-1</span> == ret)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;bind&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//3、设置监听</span><br>    ret=<span class="hljs-built_in">listen</span>(lfd,<span class="hljs-number">128</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;listen&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//初始化结构体数组</span><br>    <span class="hljs-keyword">int</span> max=<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(infos)/<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(infos[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;max;++i)<br>    &#123;<br>        <span class="hljs-comment">//bzero(void *s, int n) 与 memset((void*)s, 0,size_tn)是等价的，</span><br>        <span class="hljs-comment">//都是用来将内存块的前 n 个字节清零，但是 s 参数为指针，又很奇怪的位于 string.h 文件中，也可以用来清零字符串。</span><br>        <span class="hljs-built_in">bzero</span>(&amp;infos[i],<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(infos[i]));<br>        infos[i].fd=<span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//4、阻塞等待并接受客户端链接</span><br>    <span class="hljs-keyword">int</span> clilen=<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct sockaddr_in);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SockInfo</span>* <span class="hljs-title">pinfo</span>;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;max;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(infos[i].fd == <span class="hljs-number">-1</span>)<br>            &#123;<br>                pinfo = &amp;infos[i];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> cfd=<span class="hljs-built_in">accept</span>(lfd,(struct sockaddr*)&amp;pinfo-&gt;addr,&amp;clilen);<span class="hljs-comment">//通信套接字cfd</span><br>        pinfo-&gt;fd = cfd;<br>        <span class="hljs-keyword">if</span>(cfd == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;accept&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//创建子线程</span><br>        <span class="hljs-keyword">pthread_t</span> tid;<br>        <span class="hljs-built_in">pthread_create</span>(&amp;tid,<span class="hljs-literal">NULL</span>,working,pinfo);<br>        <span class="hljs-built_in">pthread_detach</span>(tid);<span class="hljs-comment">//主线程与子线程分离</span><br>    &#125;<br>    <span class="hljs-built_in">close</span>(lfd);<span class="hljs-comment">//关闭监听套接字</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;    <br><br><span class="hljs-comment">//子线程   ==》主线程需要给子线程传递多个参数，目前子线程只接收一个参数使用 结构体</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">working</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SockInfo</span>* <span class="hljs-title">pinfo</span>=</span>(struct SockInfo*)arg;<br>    <span class="hljs-comment">//连接建立成功,打印客户端信息的IP和端口信息</span><br>    <span class="hljs-keyword">char</span> ip[<span class="hljs-number">32</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端的IP地址：%s,端口：%d\n&quot;</span>,<br>                <span class="hljs-built_in">inet_ntop</span>(AF_INET,&amp;pinfo-&gt;addr.sin_addr.s_addr,ip,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ip)),<br>                <span class="hljs-built_in">ntohs</span>(pinfo-&gt;addr.sin_port)<br>    );<br><br><br>    <span class="hljs-comment">//5、和客户端通信</span><br>    <span class="hljs-keyword">int</span> number=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">char</span> buff[<span class="hljs-number">1024</span>];<br>        <span class="hljs-built_in">memset</span>(buff,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buff));<br><br>        <span class="hljs-comment">//int len=read(pinfo-&gt;fd,buff,sizeof(buff)); //read等价于recv</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">recv</span>(pinfo-&gt;fd,buff,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buff),<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收客户端数据len:%d\n&quot;</span>,len);<br>        <span class="hljs-keyword">if</span>(len &gt;<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端say:%s\n&quot;</span>,buff);<br>            <span class="hljs-built_in">sprintf</span>(buff,<span class="hljs-string">&quot;你好,客户端...%d\n&quot;</span>,number++);<br>            <span class="hljs-comment">//write(cfd,buff,len);   //write等价于send</span><br>            <span class="hljs-built_in">send</span>(pinfo-&gt;fd,buff,len,<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端断开了连接...\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;read&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-built_in">close</span>(pinfo-&gt;fd);<span class="hljs-comment">//关闭通信套接字</span><br>    pinfo-&gt;fd=<span class="hljs-number">-1</span>;<span class="hljs-comment">//将通信套接字初始化为-1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//编译:gcc tcp_server_thread.c -pthread -o tcp_server_thread</span><br><span class="hljs-comment">//运行:./tcp_server_thread</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
          <category> TCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于多线程实现TCP服务器</title>
      <link href="/posts/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP/"/>
      <url>/posts/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP/</url>
      
        <content type="html"><![CDATA[<h1 id="0、什么是IO多路复用"><a href="#0、什么是IO多路复用" class="headerlink" title="0、什么是IO多路复用"></a>0、什么是IO多路复用</h1><p>可以理解:单线程或单进程同时监测若干个文件描述符是否可以执行IO操作的能力。</p><h1 id="1、解决什么问题"><a href="#1、解决什么问题" class="headerlink" title="1、解决什么问题"></a>1、解决什么问题</h1><p>IO多路复用解决的本质问题是在用更少的资源完成更多的事</p><h1 id="2、具体怎么用"><a href="#2、具体怎么用" class="headerlink" title="2、具体怎么用"></a>2、具体怎么用</h1><p>IO多路复用在Linux下包括了三种，select、poll、epoll，抽象来看，他们功能是类似的，但具体细节各有不同：首先都会对一组文件描述符进行相关事件的注册，然后阻塞等待某些事件的发生或等待超时。</p><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机制，一个进程可以监视多个描述符（socket），一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p><h2 id="2-1-select"><a href="#2-1-select" class="headerlink" title="2.1 select"></a>2.1 select</h2><p>select函数监视文件描述符，调用后select函数会阻塞，直到有描述符就绪，或者超时，函数返回，当select函数返回后，就可以遍历描述符，找到就绪的描述符。</p><p>select的一个缺点在于单个进程能够监视的文件描述符的数量也存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制。但是这样也会造成效率的降低。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/select.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> &#123;</span><br>    <span class="hljs-keyword">time_t</span>         tv_sec;     <span class="hljs-comment">/* seconds */</span><br>    <span class="hljs-keyword">suseconds_t</span>    tv_usec;    <span class="hljs-comment">/* microseconds */</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">select</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class="hljs-params"><span class="hljs-function">                  fd_set *exceptfds, struct timeval *timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>函数参数:</p><ul><li><code>nfds</code>:委托内核检测这三个集合最大的文件描述符+1<ul><li>在<code>Window</code>中这个参数是无效的，指定为-1即可</li></ul></li><li><code>readfds</code>:文件描述符的集合,内核只检测这个集合中文件描述符对应的读缓冲区<ul><li>传入传出参数,读集合一般情况下都是需要检测的，这样才知道通过哪个文件描述符进行接收数据 </li></ul></li><li><code>writefds</code>:文件描述符的集合,内核只检测这个集合中文件描述符对应的<ul><li>传入参数，如果不需要使用这个参数可以指定为NULL </li></ul></li><li><code>exceptfds</code>:    </li><li><code>timeout</code>:超时时长,用来</li></ul><h2 id="2-2-poll"><a href="#2-2-poll" class="headerlink" title="2.2 poll"></a>2.2 poll</h2><p>没有最大限制（但是数量过大后性能也是会下降）。和select函数一样，poll返回后，需要轮询来获取就绪的描述符。</p><p>select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在同一时刻可能只有很少的就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p><h2 id="2-3-epoll"><a href="#2-3-epoll" class="headerlink" title="2.3 epoll"></a>2.3 epoll</h2><p>相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符。</p><p>1、平台:select可以跨平台;poll,epoll只能在linux使用<br>2、效率层次:epoll底层使用的红黑树，select和poll是线性表<br>3、select最大监视文件描述符1024,poll,epoll看硬件配置配置越高（linux下使用ulimit -n查看）</p><p>参考:<a href="https://zhuanlan.zhihu.com/p/115220699">https://zhuanlan.zhihu.com/p/115220699</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
          <category> TCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle中scott用户的解锁和密码的修改</title>
      <link href="/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/"/>
      <url>/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/</url>
      
        <content type="html"><![CDATA[<h1 id="1-在DOS界面输入命令："><a href="#1-在DOS界面输入命令：" class="headerlink" title="1.在DOS界面输入命令："></a>1.在DOS界面输入命令：</h1><ol><li>进入管理员用户：sqlplus /nolog</li><li>连接管理员用户：connect /as sysdba</li><li>解锁：alter user scott account unlock;<br>  加锁：alter user scott account lock;</li><li>修改scott用户的密码：alter user scott identified by tiger;</li><li>进行用户的连接：connect scott/tiger</li><li>最后进行查看连接的用户：show user;</li></ol><p> 实践过程的如下：<br><img src="https://img-blog.csdnimg.cn/20200214215810387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>整理几个指令：<br>host  cls;     清屏<br>set linesize 100; 设置一页中显示的行数<br>set  pagesize 100;设置一行中显示的字符数<br>show linesize; 查看行数<br>show pagesize;查看页数</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle表空间</title>
      <link href="/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/"/>
      <url>/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建Oracle表空间"><a href="#1-创建Oracle表空间" class="headerlink" title="1.创建Oracle表空间"></a>1.创建Oracle表空间</h1><ol><li>创建一个简单表空间：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create tablespace 新表空间名 datafile  表空间对应的数据文件的完整路径  size数据文件的初始大小<br><br>例如：create tablespace user1 datafile &#x27;d:\database\oracle\user1_data.dbf&#x27; size 20M<br></code></pre></td></tr></table></figure><ol start="2"><li>指定数据文件的可扩展性</li></ol><p>在创建表空间时加上autoextend 选项,当值为on是代表表空间是可以进行扩展的，而当值为off时表示关闭自动扩展功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">例如：create tablespace user1 datafile &#x27;d:\database\oracle\user1_data.dbf&#x27; size 20M autoextend on<br></code></pre></td></tr></table></figure><ol start="3"><li>指定数据文件的最大尺寸</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">例如：create tablespace user1 datafile &#x27;d:\database\oracle\user1_data.dbf&#x27; size 20M autoextend on maxsize 500M<br>create tablespace user1 datafile &#x27;d:\database\oracle\user1_data.dbf&#x27; size 20M autoextend unlimited //unlimited代替实际值<br></code></pre></td></tr></table></figure><ol start="4"><li>查看表空间是否创建成功</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">selct file_name,tablespace_name from dba_data_file order by file_name;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之在Windows安装MySQL 5.7</title>
      <link href="/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>MySQL安装文件分为两种：一种为msi格式的，一种是zip格式的。<br>说明：</p><ul><li>如果是msi格式的可以直接点击安装，安装提示进行安装，一般MySQL将会安装在<code>C:\Program Files\MySQL Server 5.7</code>;</li><li>如果是zip格式的，其实MySQL就可以使用了，但是还需要做一些配置。</li></ul><h1 id="2-安装方式"><a href="#2-安装方式" class="headerlink" title="2.安装方式"></a>2.安装方式</h1><h2 id="2-1解压缩版"><a href="#2-1解压缩版" class="headerlink" title="2.1解压缩版"></a>2.1解压缩版</h2><p>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>(1)、进行解压<br>(2)、将目录拷贝到C盘下，目录C:\mysql-5.7.35-winx64<br>(3)、在目录新建my.ini配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[client]<br><span class="hljs-meta">#</span><span class="bash"> 设置mysql客户端默认字符集</span><br>default-character-set=utf8<br> <br>[mysqld]<br><span class="hljs-meta">#</span><span class="bash"> 设置3306端口</span><br>port = 3306<br><span class="hljs-meta">#</span><span class="bash"> 设置mysql的安装目录</span><br>basedir=C:\\mysql-5.7.35-winx64<br><span class="hljs-meta">#</span><span class="bash"> 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br>datadir=C:\\mysql-5.7.35-winx64\\sqldata<br><span class="hljs-meta">#</span><span class="bash"> 允许最大连接数</span><br>max_connections=200<br><span class="hljs-meta">#</span><span class="bash"> 服务端使用的字符集默认为8比特编码的latin1字符集</span><br>character-set-server=utf8<br><span class="hljs-meta">#</span><span class="bash"> 创建新表时将使用的默认存储引擎</span><br>default-storage-engine=INNODB<br></code></pre></td></tr></table></figure><p>(4)、添加系统环境变量</p><h2 id="2-2安装版"><a href="#2-2安装版" class="headerlink" title="2.2安装版"></a>2.2安装版</h2><h3 id="2-2-1安装MySQL-5-7-35"><a href="#2-2-1安装MySQL-5-7-35" class="headerlink" title="2.2.1安装MySQL 5.7.35"></a>2.2.1安装<code>MySQL 5.7.35</code></h3><p>(1)、进入官网找到自己所需要的版本安装包:<br><a href="https://downloads.mysql.com/archives/installer/">https://downloads.mysql.com/archives/installer/</a>这里我选择5.7.35</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/MySQL5.7.35_msi.6mb6njb45xc0.png" alt="MySQL5"><br>(2)、双击下载好的<code>mysql-installer-community-5.7.35.0.msi</code>,然后等待。<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E8%BF%90%E8%A1%8CMySQL-Install.png" alt="运行MySQL-Install"><br>(3)、运行之后，进入欢迎的界面，选择我同样协议，进行下一步。<br>(4)、进入类型选择页面，这里我选择(开发者默认)，将会安装mysql开发所必须的所有产品</p><ul><li><code>developer default（开发者默认）</code>：安装mysql开发所需的所有产品</li><li><code>server only（服务器）</code>：只安装mysql服务器产品</li><li><code>client only（客户端）</code>：只安装没有服务器的mysql客户端产品</li><li><code>full（完全）</code>：安装所有包含的mysql产品和功能</li><li><code>custom（手动）</code>：手动选择系统上应安装的产品</li></ul><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/MySQL%E5%AE%89%E8%A3%85%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9.png" alt="MySQL安装类型选择"></p><p>(5)、在安装的所选界面能够看到我们接下来需要安装的程序，点击<code>execute</code></p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%BC%80%E5%8F%91%E8%80%85%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85.png" alt="开发者默认安装"></p><p>(6)、安装程序进度界面，安装需要一些时间。点击dide tails能看到安装日志</p><p>(7)、程序安装完成之后，点击next</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="安装完成"></p><p>(8)、在<code>Product Configuration</code>(产品配置)页能够看到需要配置的程序，点击next</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E4%BA%A7%E5%93%81%E9%85%8D%E7%BD%AE.png" alt="产品配置"></p><p>(9)、设置服务器配置类型以及连接端口,然后点击next</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E8%AE%BE%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%9E%8B.png" alt="设置服务器配置类型"></p><p>(10)、配置root的密码(需要记住：那就简单一点123456)，系统会提示密码虚弱</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E9%85%8D%E7%BD%AEroot%E5%AF%86%E7%A0%81.png" alt="配置root密码"></p><p>(11)、添加其他管理员，点击add User输入需要需添加的账户和密码点击ok即可，返回点击next<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%AE%A1%E7%90%86%E5%91%98%E7%94%A8%E6%88%B7.png" alt="添加新管理员用户"></p><p>(12)、配置mysql在Windows系统中的名字，这里我选择默认MySQL57，点击<code>next</code></p><p>(13)、Apply Configuration(应用配置页面)，点击execute进行安装配置，配置完成点击<code>finish</code></p><p>(14)、安装完成后安装程序有返回到<code>product configutration</code>（产品配置）页面,此时我们看到mysql server安装显示成功，点击next</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%AE%8C%E6%88%90mysql_server%E7%9A%84%E5%AE%89%E8%A3%85.png" alt="完成mysql_server的安装"></p><p>(15)、接下来是配置mysql router，由于暂时没有用到Router,直接点击<code>finish</code>,直接又返回到<code>product configutration</code>（产品配置）页面，点击<code>next</code></p><blockquote><p>MySQL Router是一个介于应用层和DB层之间的开源的轻量级中间件，它能够将前端应用的请求分析转发给后端DB服务器处理，从而实现DB的负载均衡，可以说它是先前MySQL Proxy的替代品，我们可以在Github找到它的源码。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E4%B8%80%E3%80%81%E4%BA%A7%E5%93%81%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2Router%E4%B8%8D%E9%9C%80%E8%A6%81.png" alt="十一、产品配置界面Router不需要"></p><p>(16)、检测root密码，输入root密码之后点击检查，点击next</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E4%BA%8C%E8%BF%9E%E6%8E%A5mysql_server.png" alt="十二连接mysql_server"></p><p>(17)、安装一些server，点击execute，完成点击finish</p><p>(18)、程序回到产品配置页面，点击next</p><p>(19)、完成安装，点击<code>finish</code><br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E4%B8%89%E5%AE%8C%E6%88%90%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%85.png" alt="十三完成程序安装"></p><p>(20)、在开始下找到MySQL&gt;&gt;MySQL Installer - Community&gt;&gt;MySQL Installer - Community点击运行，能看到我们所安装的产品</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E5%9B%9B%E3%80%81mysql_installer.png" alt="十四、mysql_installer"></p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E4%BA%94%E6%9F%A5%E7%9C%8B%E5%AE%89%E8%A3%85%E7%9A%84mysql%E4%BA%A7%E5%93%81.png" alt="十五查看安装的mysql产品"></p><h5 id="2-2-配置mysql环境变量"><a href="#2-2-配置mysql环境变量" class="headerlink" title="2.2 配置mysql环境变量"></a>2.2 配置mysql环境变量</h5><p>①此电脑右键属性》高级系统设置》环境变量》(系统变量)新建<br>变量名：<code>MYSQL_HOME</code><br>变量值：<code>C:\Program Files\MySQL\MySQL Server 5.7\bin</code></p><p>②path编辑：新建输入<code>%MYSQL_HOME%\bin</code><br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E5%85%AD%E7%BC%96%E8%BE%91path%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="十六编辑path环境变量"><br>`</p><h5 id="2-3-连接MySQL5-7-35"><a href="#2-3-连接MySQL5-7-35" class="headerlink" title="2.3 连接MySQL5.7.35"></a>2.3 连接<code>MySQL5.7.35</code></h5><p>①通过cmd命令行连接<code>MySQL5.7.35</code><br>打开cmd,输入<code>mysql -u root -p</code></p><p>输入root密码<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E5%85%AB%E3%80%81cmd%E8%BF%9E%E6%8E%A5mysql.png" alt="十八、cmd连接mysql"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">select version();   //5.7.35-log<br>status;          //查看MySQL服务器的状态信息<br></code></pre></td></tr></table></figure><p>②通过<code>Navicat Premium 12</code>连接MySQL5.7.35</p><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E5%8D%81%E4%B8%83%E3%80%81Navicat%E8%BF%9E%E6%8E%A5MySQL.png" alt="十七、Navicat连接MySQL"></p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>一般情况我们安装MySQL建议使用<strong>安装版</strong>安装。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++动态库和静态库的用法</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>库分为静态库和动态库。而静态库和动态库从字面意思来看，区别就是静态和动态。而这里的静态和动态指的是库的链接阶段。</p><ul><li>静态库：在链接阶段库将会与目标汇编后的目标文件.o一起打包生成可执行文件。成为可执行文件的一部分，后续此库就可以消失了。也就是说在编译的最后一步（链接阶段），如果程序需要使用静态库，在这一步都会一起打包到可执行文件中。</li><li>动态库：而动态库在编译阶段都不会有什么动作，只有在程序运行时才被加载，也就是动态库的链接是发生在程序运行时期的，它可执行文件是分开的，只是可执行在运行的某个时期调用它。</li></ul><h2 id="二、优缺点"><a href="#二、优缺点" class="headerlink" title="二、优缺点"></a>二、优缺点</h2><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>静态库</td><td>1、使可执行文件依赖项少，已经被打包到可执行文件中了2、编译阶段完成链接，执行期间代码装载速度快</td><td>1、使可执行文件变大  2、若作为其他库的依赖库，将会造成多余的副本，因为必须与目标文件打包 3、升级不方便必须重新编译</td></tr><tr><td>动态库</td><td>1、动态库可以实现进程之间资源共享，有一份就行2、升级程序简单不需要重新编译</td><td>1、运行期间在加载，将会减慢代码执行速度2、增加程序的依赖项，必须跟着可执行文件一起</td></tr></tbody></table><h2 id="三、文件形式"><a href="#三、文件形式" class="headerlink" title="三、文件形式"></a>三、文件形式</h2><table><thead><tr><th>Tables</th><th>Windows</th><th>Linux</th></tr></thead><tbody><tr><td>静态库</td><td>.lib</td><td>Libxxx.a</td></tr><tr><td>动态库</td><td>.dll和.lib</td><td>libxxx.so</td></tr></tbody></table><h2 id="四、制作的方式"><a href="#四、制作的方式" class="headerlink" title="四、制作的方式"></a>四、制作的方式</h2><p>有<code>Windows</code>和<code>Linux</code>下两种。这里主要介绍<code>Windows</code>下的使用。</p><h3 id="4-1、静态库"><a href="#4-1、静态库" class="headerlink" title="4.1、静态库"></a>4.1、静态库</h3><p>已<code>VS 2010</code>为例，文件》新建》项目》<code>Win 32</code>项目》<code>Win 32</code>向导界面(只勾选静态库和空项目)点击完成：</p><img src="https://gitee.com/Aurora811/image/raw/master/win%2032%20lib.png" alt="win 32项目向导界面" style="zoom: 80%;" /><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">头文件：<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>  TESTLIB_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  TESTLIB_H</span><br><span class="hljs-comment">//防止头文件重复包含</span><br><span class="hljs-comment">//条件编译</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>源文件：<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;testlib.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span>  a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态库的使用：</p><ol><li>将静态库头文件拷贝到项目路径下</li><li>将生成的静态库拷贝到项目路径下</li><li>设置项目属性》链接器》常规附加库目录（添加项目路径）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;testlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;testlib.lib&quot;</span>)  <span class="hljs-comment">//加载静态库</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个整数，计算两数之和：&quot;</span>);<br><span class="hljs-keyword">int</span> a,b;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br><span class="hljs-keyword">int</span> num =<span class="hljs-built_in">add</span>(a,b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：<br>静态编译：会使静态库会嵌入到<code>exe</code>中，会使<code>exe</code>体积变大。</p></blockquote><h3 id="4-2、动态库"><a href="#4-2、动态库" class="headerlink" title="4.2、动态库"></a>4.2、动态库</h3><p>优点：使用灵活、软件的升级(替换更新的模块)</p><p><code>Dependency Walker</code>是一个免费的实用程序，它可以扫描任何32位或<code>64</code>位<code>Windows</code>模块（<code>exe，dll，ocx，sys</code>等），并构建所有从属模块的分层树形图。</p><p><a href="http://www.dependencywalker.com/">准备工具depenecy</a></p><h4 id="4-2-1、动态库的建立"><a href="#4-2-1、动态库的建立" class="headerlink" title="4.2.1、动态库的建立"></a>4.2.1、动态库的建立</h4><h4 id="4-2-2、动态库的静态调用"><a href="#4-2-2、动态库的静态调用" class="headerlink" title="4.2.2、动态库的静态调用"></a>4.2.2、动态库的静态调用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">将动态库头文件添加到测试程序中，并将.lib文件以及.dll文件拷贝到测试程序的Debug目录下。<br></code></pre></td></tr></table></figure><blockquote><p>注意:这里的.lib为导入库，而并非静态链接库，其实际上代码位于动态库中，导入库只包含了地址符表等，前提条件是程序找到对应的一些基本地址信息。</p></blockquote><h4 id="4-2-3、动态库的动态调用"><a href="#4-2-3、动态库的动态调用" class="headerlink" title="4.2.3、动态库的动态调用"></a>4.2.3、动态库的动态调用</h4><p>只需要一个.dll文件即可完成动态调用。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>静态库与可执行文件打包，动态库与可执行文件独立。静态库加载需要.lib和.h文件。动态库隐式加载需要.dll、.h、.lib文件，显示加载只需要.dll文件。</p>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装好的C++ md5类</title>
      <link href="/posts/%E5%BC%80%E6%BA%90%E5%BA%93/MD5/"/>
      <url>/posts/%E5%BC%80%E6%BA%90%E5%BA%93/MD5/</url>
      
        <content type="html"><![CDATA[<p>什么是MD5？<br>MD5的全称是Message-Digest Algorithm 5，在90年代初由MIT的计算机科学实验室和RSA Data Security Inc 发明，由 MD2/MD3/MD4 发展而来的。MD5的实际应用是对一段Message(字节串)产生fingerprint(指纹)，可以防止被“篡改”。</p><span id="more"></span><h3 id="1-Md5-h"><a href="#1-Md5-h" class="headerlink" title="1.Md5.h"></a>1.Md5.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _MD5_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _MD5_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> <span class="hljs-meta-keyword">warning</span>(disable:4786)<span class="hljs-comment">//来逗下</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MD5_DATA</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> data[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> MD5_DATA&amp; p) <span class="hljs-keyword">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">memcmp</span>(data, p.data, <span class="hljs-number">4</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">long</span>)) &gt; <span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMD5</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> uint8  unsigned char</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> uint32 unsigned long int</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">md5_context</span></span><br><span class="hljs-class">&#123;</span><br>uint32 total[<span class="hljs-number">2</span>];<br>uint32 state[<span class="hljs-number">4</span>];<br>uint8 buffer[<span class="hljs-number">64</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">md5_starts</span><span class="hljs-params">(struct md5_context *ctx)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">md5_process</span><span class="hljs-params">(struct md5_context *ctx, uint8 data[<span class="hljs-number">64</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">md5_update</span><span class="hljs-params">(struct md5_context *ctx, uint8 *input, <span class="hljs-keyword">size_t</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">md5_finish</span><span class="hljs-params">(struct md5_context *ctx, uint8 digest[<span class="hljs-number">16</span>])</span></span>;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//! construct a CMD5 from any buffer</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateMD5</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* buffer, <span class="hljs-keyword">size_t</span> bufferlen)</span></span>;<br><span class="hljs-comment">//! to str md5</span><br><span class="hljs-function">string <span class="hljs-title">md5</span><span class="hljs-params">(string str)</span></span>;<br><span class="hljs-comment">//! construct a CMD5</span><br><span class="hljs-built_in">CMD5</span>();<br><br><span class="hljs-comment">//! construct a md5src from char *</span><br><span class="hljs-built_in">CMD5</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * md5src);<br><br><span class="hljs-comment">//! construct a CMD5 from a 16 bytes md5</span><br><span class="hljs-built_in">CMD5</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>* md5src);<br><br><span class="hljs-comment">//! add a other md5</span><br>CMD5 <span class="hljs-keyword">operator</span> +(CMD5 adder);<br><br><span class="hljs-comment">//! just if equal</span><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> ==(CMD5 cmper);<br><br><span class="hljs-comment">//! give the value from equer</span><br><span class="hljs-comment">// void operator =(CMD5 equer);</span><br><br><span class="hljs-comment">//! to a string</span><br><span class="hljs-function">string <span class="hljs-title">ToString</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> m_data[<span class="hljs-number">4</span>];<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* md5.h */</span></span><br></code></pre></td></tr></table></figure><h3 id="2-Md5-cpp"><a href="#2-Md5-cpp" class="headerlink" title="2.Md5.cpp"></a>2.Md5.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;md5.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GET_UINT32(n,b,i)  (n) = (uint32) ((uint8 *) b)[(i)] | (((uint32) ((uint8 *) b)[(i)+1]) &lt;&lt;  8) | (((uint32) ((uint8 *) b)[(i)+2]) &lt;&lt; 16) | (((uint32) ((uint8 *) b)[(i)+3]) &lt;&lt; 24);</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PUT_UINT32(n,b,i) (((uint8 *) b)[(i)]  ) = (uint8) (((n)) &amp; 0xFF); (((uint8 *) b)[(i)+1]) = (uint8) (((n) &gt;&gt;  8) &amp; 0xFF);  (((uint8 *) b)[(i)+2]) = (uint8) (((n) &gt;&gt; 16) &amp; 0xFF);  (((uint8 *) b)[(i)+3]) = (uint8) (((n) &gt;&gt; 24) &amp; 0xFF);</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CMD5::md5_starts</span><span class="hljs-params">(struct md5_context *ctx)</span></span><br><span class="hljs-function"></span>&#123;<br>ctx-&gt;total[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>ctx-&gt;total[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>ctx-&gt;state[<span class="hljs-number">0</span>] = <span class="hljs-number">0x67452301</span>;<br>ctx-&gt;state[<span class="hljs-number">1</span>] = <span class="hljs-number">0xEFCDAB89</span>;<br>ctx-&gt;state[<span class="hljs-number">2</span>] = <span class="hljs-number">0x98BADCFE</span>;<br>ctx-&gt;state[<span class="hljs-number">3</span>] = <span class="hljs-number">0x10325476</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CMD5::md5_process</span><span class="hljs-params">(struct md5_context *ctx, uint8 data[<span class="hljs-number">64</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>uint32 A, B, C, D, X[<span class="hljs-number">16</span>];<br><br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">0</span>], data, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">1</span>], data, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">2</span>], data, <span class="hljs-number">8</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">3</span>], data, <span class="hljs-number">12</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">4</span>], data, <span class="hljs-number">16</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">5</span>], data, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">6</span>], data, <span class="hljs-number">24</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">7</span>], data, <span class="hljs-number">28</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">8</span>], data, <span class="hljs-number">32</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">9</span>], data, <span class="hljs-number">36</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">10</span>], data, <span class="hljs-number">40</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">11</span>], data, <span class="hljs-number">44</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">12</span>], data, <span class="hljs-number">48</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">13</span>], data, <span class="hljs-number">52</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">14</span>], data, <span class="hljs-number">56</span>);<br><span class="hljs-built_in">GET_UINT32</span>(X[<span class="hljs-number">15</span>], data, <span class="hljs-number">60</span>);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> S(x,n) ((x <span class="hljs-meta-string">&lt;&lt; n) | ((x &amp; 0xFFFFFFFF) &gt;</span>&gt; (32 - n)))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> P(a,b,c,d,k,s,t) a += F(b,c,d) + X[k] + t; a = S(a,s) + b;</span><br><br>A = ctx-&gt;state[<span class="hljs-number">0</span>];<br>B = ctx-&gt;state[<span class="hljs-number">1</span>];<br>C = ctx-&gt;state[<span class="hljs-number">2</span>];<br>D = ctx-&gt;state[<span class="hljs-number">3</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F(x,y,z) (z ^ (x &amp; (y ^ z)))</span><br><br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0xD76AA478</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0xE8C7B756</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0x242070DB</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">3</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0xC1BDCEEE</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0xF57C0FAF</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0x4787C62A</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">6</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0xA8304613</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">7</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0xFD469501</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0x698098D8</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0x8B44F7AF</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">10</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0xFFFF5BB1</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0x895CD7BE</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0x6B901122</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0xFD987193</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0xA679438E</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">15</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0x49B40821</span>);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> F</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F(x,y,z) (y ^ (z &amp; (x ^ y)))</span><br><br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0xF61E2562</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0xC040B340</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0x265E5A51</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0xE9B6C7AA</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0xD62F105D</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x02441453</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0xD8A1E681</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">4</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0xE7D3FBC8</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0x21E1CDE6</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0xC33707D6</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0xF4D50D87</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">8</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0x455A14ED</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">13</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0xA9E3E905</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0xFCEFA3F8</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0x676F02D9</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0x8D2A4C8A</span>);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> F</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F(x,y,z) (x ^ y ^ z)</span><br><br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0xFFFA3942</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0x8771F681</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0x6D9D6122</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">14</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0xFDE5380C</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0xA4BEEA44</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0x4BDECFA9</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">7</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0xF6BB4B60</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0xBEBFBC70</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0x289B7EC6</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0xEAA127FA</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">3</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0xD4EF3085</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">6</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0x04881D05</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0xD9D4D039</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0xE6DB99E5</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0x1FA27CF8</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">2</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0xC4AC5665</span>);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> F</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F(x,y,z) (y ^ (x | ~z))</span><br><br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0xF4292244</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0x432AFF97</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0xAB9423A7</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">5</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0xFC93A039</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0x655B59C3</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0x8F0CCC92</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0xFFEFF47D</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">1</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0x85845DD1</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0x6FA87E4F</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0xFE2CE6E0</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0xA3014314</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0x4E0811A1</span>);<br><span class="hljs-built_in">P</span>(A, B, C, D, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0xF7537E82</span>);<br><span class="hljs-built_in">P</span>(D, A, B, C, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0xBD3AF235</span>);<br><span class="hljs-built_in">P</span>(C, D, A, B, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0x2AD7D2BB</span>);<br><span class="hljs-built_in">P</span>(B, C, D, A, <span class="hljs-number">9</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0xEB86D391</span>);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> F</span><br><br>ctx-&gt;state[<span class="hljs-number">0</span>] += A;<br>ctx-&gt;state[<span class="hljs-number">1</span>] += B;<br>ctx-&gt;state[<span class="hljs-number">2</span>] += C;<br>ctx-&gt;state[<span class="hljs-number">3</span>] += D;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CMD5::md5_update</span><span class="hljs-params">(struct md5_context *ctx, uint8 *input, <span class="hljs-keyword">size_t</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>uint32 left, fill;<br><br><span class="hljs-keyword">if</span> (!length) <span class="hljs-keyword">return</span>;<br><br>left = (ctx-&gt;total[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0x3F</span>;<br>fill = <span class="hljs-number">64</span> - left;<br><br>ctx-&gt;total[<span class="hljs-number">0</span>] += length &lt;&lt; <span class="hljs-number">3</span>;<br>ctx-&gt;total[<span class="hljs-number">1</span>] += length &gt;&gt; <span class="hljs-number">29</span>;<br><br>ctx-&gt;total[<span class="hljs-number">0</span>] &amp;= <span class="hljs-number">0xFFFFFFFF</span>;<br>ctx-&gt;total[<span class="hljs-number">1</span>] += ctx-&gt;total[<span class="hljs-number">0</span>] &lt; length &lt;&lt; <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">if</span> (left &amp;&amp; length &gt;= fill)<br>&#123;<br><span class="hljs-built_in">memcpy</span>((<span class="hljs-keyword">void</span> *)(ctx-&gt;buffer + left), (<span class="hljs-keyword">void</span> *)input, fill);<br><span class="hljs-built_in">md5_process</span>(ctx, ctx-&gt;buffer);<br>length -= fill;<br>input += fill;<br>left = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span> (length &gt;= <span class="hljs-number">64</span>)<br>&#123;<br><span class="hljs-built_in">md5_process</span>(ctx, input);<br>length -= <span class="hljs-number">64</span>;<br>input += <span class="hljs-number">64</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (length)<br>&#123;<br><span class="hljs-built_in">memcpy</span>((<span class="hljs-keyword">void</span> *)(ctx-&gt;buffer + left), (<span class="hljs-keyword">void</span> *)input, length);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> uint8 md5_padding[<span class="hljs-number">64</span>] =<br>&#123;<br> <span class="hljs-number">0x80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CMD5::md5_finish</span><span class="hljs-params">(struct md5_context *ctx, uint8 digest[<span class="hljs-number">16</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>uint32 last, padn;<br>uint8 msglen[<span class="hljs-number">8</span>];<br><br><span class="hljs-built_in">PUT_UINT32</span>(ctx-&gt;total[<span class="hljs-number">0</span>], msglen, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">PUT_UINT32</span>(ctx-&gt;total[<span class="hljs-number">1</span>], msglen, <span class="hljs-number">4</span>);<br><br>last = (ctx-&gt;total[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0x3F</span>;<br>padn = (last &lt; <span class="hljs-number">56</span>) ? (<span class="hljs-number">56</span> - last) : (<span class="hljs-number">120</span> - last);<br><br><span class="hljs-built_in">md5_update</span>(ctx, md5_padding, padn);<br><span class="hljs-built_in">md5_update</span>(ctx, msglen, <span class="hljs-number">8</span>);<br><br><span class="hljs-built_in">PUT_UINT32</span>(ctx-&gt;state[<span class="hljs-number">0</span>], digest, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">PUT_UINT32</span>(ctx-&gt;state[<span class="hljs-number">1</span>], digest, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">PUT_UINT32</span>(ctx-&gt;state[<span class="hljs-number">2</span>], digest, <span class="hljs-number">8</span>);<br><span class="hljs-built_in">PUT_UINT32</span>(ctx-&gt;state[<span class="hljs-number">3</span>], digest, <span class="hljs-number">12</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CMD5::GenerateMD5</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* buffer, <span class="hljs-keyword">size_t</span> bufferlen)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">md5_context</span> <span class="hljs-title">context</span>;</span><br><span class="hljs-built_in">md5_starts</span>(&amp;context);<br><span class="hljs-built_in">md5_update</span>(&amp;context, buffer, bufferlen);<br><span class="hljs-built_in">md5_finish</span>(&amp;context, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)m_data);<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">CMD5::md5</span><span class="hljs-params">(string str)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *p = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)str.<span class="hljs-built_in">data</span>();<br><span class="hljs-built_in">GenerateMD5</span>(p, str.<span class="hljs-built_in">length</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">ToString</span>();<br>&#125;<br><br>CMD5::<span class="hljs-built_in">CMD5</span>()<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>m_data[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br>CMD5::<span class="hljs-built_in">CMD5</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>* md5src)<br>&#123;<br><span class="hljs-built_in">memcpy</span>(m_data, md5src, <span class="hljs-number">16</span>);<br>&#125;<br><span class="hljs-keyword">int</span> _httoi(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *value)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CHexMap</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> chr;<br><span class="hljs-keyword">int</span> value;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> HexMapL = <span class="hljs-number">16</span>;<br>CHexMap HexMap[HexMapL] =<br>&#123;<br>  &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1</span>&#125;,<br>  &#123;<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">3</span>&#125;,<br>  &#123;<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-number">5</span>&#125;,<br>  &#123;<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-number">7</span>&#125;,<br>  &#123;<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-number">8</span>&#125;, &#123;<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-number">9</span>&#125;,<br>  &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">11</span>&#125;,<br>  &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">12</span>&#125;, &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">13</span>&#125;,<br>  &#123;<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">14</span>&#125;, &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">15</span>&#125;<br>&#125;;<br><span class="hljs-keyword">char</span> *mstr = <span class="hljs-built_in">strdup</span>(value);<br><span class="hljs-keyword">char</span> *s = mstr;<br><span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (*s == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; *(s + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;X&#x27;</span>) s += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">bool</span> firsttime = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span> (*s != <span class="hljs-string">&#x27;/0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">bool</span> found = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; HexMapL; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (*s == HexMap[i].chr)<br>&#123;<br><span class="hljs-keyword">if</span> (!firsttime) result &lt;&lt;= <span class="hljs-number">4</span>;<br>result |= HexMap[i].value;<br>found = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!found) <span class="hljs-keyword">break</span>;<br>s++;<br>firsttime = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">free</span>(mstr);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br>CMD5::<span class="hljs-built_in">CMD5</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* md5src)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(md5src, <span class="hljs-string">&quot;&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>m_data[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++)<br>&#123;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">strncpy</span>(buf, md5src, <span class="hljs-number">2</span>);<br>md5src += <span class="hljs-number">2</span>;<br>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)m_data)[j] = _httoi(buf);<br>&#125;<br>&#125;<br><br>CMD5 CMD5::<span class="hljs-keyword">operator</span> +(CMD5 adder)<br>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> m_newdata[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>m_newdata[i] = m_data[i] ^ (adder.m_data[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">CMD5</span>(m_newdata);<br>&#125;<br><br><span class="hljs-keyword">bool</span> CMD5::<span class="hljs-keyword">operator</span> ==(CMD5 cmper)<br>&#123;<br><span class="hljs-built_in"><span class="hljs-keyword">return</span></span> (<span class="hljs-built_in">memcmp</span>(cmper.m_data, m_data, <span class="hljs-number">16</span>) == <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//void CMD5::operator =(CMD5 equer)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">// memcpy(m_data,equer.m_data ,16);</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-function">string <span class="hljs-title">CMD5::ToString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> output[<span class="hljs-number">33</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++)<br>&#123;<br><span class="hljs-built_in">sprintf</span>(output + j * <span class="hljs-number">2</span>, <span class="hljs-string">&quot;%02x&quot;</span>, ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)m_data)[j]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(output);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-使用Md5类"><a href="#3-使用Md5类" class="headerlink" title="3.使用Md5类"></a>3.使用Md5类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;md5.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">string <span class="hljs-title">str</span><span class="hljs-params">(<span class="hljs-string">&quot;qwedadafsg&quot;</span>)</span></span>;<br><span class="hljs-keyword">char</span> *p = (<span class="hljs-keyword">char</span> *)str.<span class="hljs-built_in">data</span>();<br>CMD5 md5;<br>md5.<span class="hljs-built_in">GenerateMD5</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)p, str.<span class="hljs-built_in">length</span>());<br>cout &lt;&lt; md5.<span class="hljs-built_in">ToString</span>() &lt;&lt; endl;<br>cout &lt;&lt; md5.<span class="hljs-built_in">md5</span>(str) &lt;&lt; endl;<br><span class="hljs-comment">//直接调用类的对象函数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;md5 of &#x27;nihao&#x27;: &quot;</span> &lt;&lt; md5.<span class="hljs-built_in">md5</span>(<span class="hljs-string">&quot;nihao&quot;</span>) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-输出结果"><a href="#4-输出结果" class="headerlink" title="4.输出结果"></a>4.输出结果</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">99f</span>0b01c98508367dc8fb586d087adca<br><span class="hljs-number">99f</span>0b01c98508367dc8fb586d087adca<br>md5 of <span class="hljs-string">&#x27;nihao&#x27;</span>: <span class="hljs-number">194</span>ce5d0b89c47ff6b30bfb491f9dc26<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源库 </category>
          
          <category> MD5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ MFC框架:Unicode和多字节下string类型和Cstring类型的相互转换</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/MFC/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/MFC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-String转CString"><a href="#1-String转CString" class="headerlink" title="1.String转CString"></a>1.String转CString</h1><h2 id="1-1多字节下"><a href="#1-1多字节下" class="headerlink" title="1.1多字节下"></a>1.1多字节下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string str = <span class="hljs-string">&quot;nihao&quot;</span>;<br>CString cstr = str.<span class="hljs-built_in">c_str</span>();<br></code></pre></td></tr></table></figure><blockquote><p><code>Unicode</code>下使用如上编码会出现报错（不存在从<code>const char*</code>到<code>Cstring</code>）</p></blockquote><h2 id="1-2Unicode下"><a href="#1-2Unicode下" class="headerlink" title="1.2Unicode下"></a>1.2<code>Unicode</code>下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string str = <span class="hljs-string">&quot;nihao&quot;</span>;<br>CString cstr = str.<span class="hljs-built_in">c_str</span>();<br></code></pre></td></tr></table></figure><h1 id="2-CString转String"><a href="#2-CString转String" class="headerlink" title="2. CString转String"></a>2. CString转String</h1><h2 id="2-1-多字节下"><a href="#2-1-多字节下" class="headerlink" title="2.1 多字节下"></a>2.1 多字节下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">CString cstr = _T(<span class="hljs-string">&quot;nihao&quot;</span>);<br>string str = cstr.<span class="hljs-built_in">GetBuffer</span>();<br></code></pre></td></tr></table></figure><h2 id="2-1-Unicode下"><a href="#2-1-Unicode下" class="headerlink" title="2.1 Unicode下"></a>2.1 <code>Unicode</code>下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">CString cstr = _T(<span class="hljs-string">&quot;nihao&quot;</span>);<br>string str = <span class="hljs-built_in">CT2A</span>(cstr.<span class="hljs-built_in">GetBuffer</span>());<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> MFC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ MFC框架:MFC纯代码代码创建按钮</title>
      <link href="/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/MFC/"/>
      <url>/posts/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/MFC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//头文件：</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//1个普通按钮</span><br>CButton m_Button;<br><span class="hljs-comment">//2个单选按钮</span><br>CButton m_radioBtu1;<br>CButton m_radioBtu2;<br><br><span class="hljs-comment">//3个复选框按钮</span><br>CButton m_CheckBtu1;<br>CButton m_CheckBtu2;<br>CButton m_CheckBtu3;<br><br><span class="hljs-function">afx_msg <span class="hljs-keyword">void</span> <span class="hljs-title">OnButton</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">afx_msg <span class="hljs-keyword">void</span> <span class="hljs-title">OnradioBtu</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">afx_msg <span class="hljs-keyword">void</span> <span class="hljs-title">OnCheckBtu</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//源文件</span><br><span class="hljs-built_in">BEGIN_MESSAGE_MAP</span>(CUDPSockerDlg, CDialog)<br><span class="hljs-built_in">ON_WM_SYSCOMMAND</span>()<br><span class="hljs-built_in">ON_WM_PAINT</span>()<br><span class="hljs-built_in">ON_WM_QUERYDRAGICON</span>()<br><br><span class="hljs-built_in">ON_BN_CLICKED</span>(<span class="hljs-number">10000</span>, &amp;CUDPSockerDlg::OnButton)<br><span class="hljs-built_in">ON_BN_CLICKED</span>(<span class="hljs-number">10001</span>, &amp;CUDPSockerDlg::OnradioBtu)<br>    <span class="hljs-built_in">ON_BN_CLICKED</span>(<span class="hljs-number">10003</span>, &amp;CUDPSockerDlg::OnCheckBtu)<br><span class="hljs-built_in">END_MESSAGE_MAP</span>()<br><br><br><span class="hljs-function">BOOL <span class="hljs-title">XXXXDlg::OnInitDialog</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//代码创建按钮</span><br>m_Button.<span class="hljs-built_in">Create</span>(<span class="hljs-string">L&quot;普通按钮&quot;</span>, WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,<br><span class="hljs-built_in">CRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>), <span class="hljs-keyword">this</span>, <span class="hljs-number">10000</span>);<br><br><br>m_radioBtu1.<span class="hljs-built_in">Create</span>(<span class="hljs-string">L&quot;单选按钮&quot;</span>, WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON, <br><span class="hljs-built_in">CRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">250</span>), <span class="hljs-keyword">this</span>, <span class="hljs-number">10001</span>);<br>m_radioBtu2.<span class="hljs-built_in">Create</span>(<span class="hljs-string">L&quot;单选按钮&quot;</span>, WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON, <br><span class="hljs-built_in">CRect</span>(<span class="hljs-number">300</span>, <span class="hljs-number">200</span>, <span class="hljs-number">400</span>, <span class="hljs-number">250</span>), <span class="hljs-keyword">this</span>, <span class="hljs-number">10002</span>);<br><br><br>m_CheckBtu1.<span class="hljs-built_in">Create</span>(<span class="hljs-string">L&quot;复选框1&quot;</span>, WS_CHILD | WS_VISIBLE | BS_AUTOCHECKBOX,<br><span class="hljs-built_in">CRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">300</span>, <span class="hljs-number">200</span>, <span class="hljs-number">450</span>), <span class="hljs-keyword">this</span>, <span class="hljs-number">10003</span>);<br><br>m_CheckBtu2.<span class="hljs-built_in">Create</span>(<span class="hljs-string">L&quot;复选框2&quot;</span>, WS_CHILD | WS_VISIBLE | BS_AUTOCHECKBOX,<br><span class="hljs-built_in">CRect</span>(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">450</span>), <span class="hljs-keyword">this</span>, <span class="hljs-number">10004</span>);<br>m_CheckBtu3.<span class="hljs-built_in">Create</span>(<span class="hljs-string">L&quot;复选框3&quot;</span>, WS_CHILD | WS_VISIBLE | BS_AUTOCHECKBOX,<br><span class="hljs-built_in">CRect</span>(<span class="hljs-number">500</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">450</span>), <span class="hljs-keyword">this</span>, <span class="hljs-number">10005</span>);<br><span class="hljs-keyword">return</span> TRUE;  <span class="hljs-comment">// 除非将焦点设置到控件，否则返回 TRUE</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">XXXXDlg::OnButton</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-string">L&quot;普通按钮点击&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">XXXXDlg::OnradioBtu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-string">L&quot;单选按钮-&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">XXXXDlg::OnCheckBtu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-string">L&quot;复选按钮&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发框架 </category>
          
          <category> MFC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的入门学习</title>
      <link href="/posts/%E7%89%88%E6%9C%AC%E5%BA%93/git/"/>
      <url>/posts/%E7%89%88%E6%9C%AC%E5%BA%93/git/</url>
      
        <content type="html"><![CDATA[<p>说明：此文章是学习黑马程序员Git零基础入门到实战详解整理的笔记，主要是Windowns下Git的安装、基本使用、分支管理、版本回退、冲突解决、GUI工具的介绍、文件忽略机制等。如想在Linux平台下安装Git 查看通过<a href="https://blog.csdn.net/qq_43630810/article/details/104483007">https://blog.csdn.net/qq_43630810/article/details/104483007</a>来进行安装。</p><h1 id="1-Git基础"><a href="#1-Git基础" class="headerlink" title="1.Git基础"></a>1.Git基础</h1><p>Git是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><h2 id="1-1谈谈Git与SVN的区别"><a href="#1-1谈谈Git与SVN的区别" class="headerlink" title="1.1谈谈Git与SVN的区别"></a>1.1谈谈Git与SVN的区别</h2><ol><li><strong>Git是分布式的，svn是集中式的</strong>：这个是Git和其他非分布式的版本控制系统的，最主要的区别。</li><li><strong>Git把内容按元数据方式存储，而SVN是按文件</strong>：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn、.git的文件中</li><li><strong>Gitf分支和SVN的分支不同</strong>：分支在SVN中一点都不特别，其实它就是版本库中的另一个目录</li><li><strong>Git没有一个全局的版本号，而SVN有</strong>：目前为止这是SVN相比Git缺少最大的一个特征</li><li><strong>Git的内容完整性要优于SVN</strong>：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。<br><img src="https://img-blog.csdnimg.cn/20200225200234787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="SVN集中式管理系统"><br><img src="https://img-blog.csdnimg.cn/20200225200308575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="git分布式管理控制系统"></li></ol><h2 id="1-2SVN的弊端与Git的好处"><a href="#1-2SVN的弊端与Git的好处" class="headerlink" title="1.2SVN的弊端与Git的好处"></a>1.2SVN的弊端与Git的好处</h2><blockquote><p>SVN弊端：<br>1、中央服务器坏了，一切OVER<br>2、所有的上传和下载都是基于文件传输方式完成的，速度会慢</p></blockquote><blockquote><p>git好处<br>1、无需连网也能记录查看历史版本信息<br>2、无需过多依赖中央仓库，每个人本地也有全部的信息<br>向中央仓库传输内容依托的是文件流传输，速度比SVN块N倍     </p></blockquote><h2 id="1-3Git与GitHub"><a href="#1-3Git与GitHub" class="headerlink" title="1.3Git与GitHub"></a>1.3Git与GitHub</h2><p>Git的安装与GithHub账户的注册不做介绍。<br><strong>1 、两者区别</strong><br>Git(<a href="https://git-scm.com/">https://git-scm.com/</a>)是一个分布式版本控制系统，简单的说其就是一个软件，用于记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的软件。</p><p>Github（<a href="https://www.github.com/">https://www.github.com</a>）是一个为用户提供Git服务的网站，简单说就是一个可以放代码的地方（不过可以放的当然不仅是代码）。Github除了提供管理Git的web界面外，还提供了订阅、关注、讨论组、在线编辑器等丰富的功能。Github被称之为全球最大的基友网站。</p><h1 id="2-Git的使用过程"><a href="#2-Git的使用过程" class="headerlink" title="2.Git的使用过程"></a>2.Git的使用过程</h1><h2 id="2-1本地仓库"><a href="#2-1本地仓库" class="headerlink" title="2.1本地仓库"></a>2.1本地仓库</h2><h3 id="2-1-1工作流程"><a href="#2-1-1工作流程" class="headerlink" title="2.1.1工作流程"></a>2.1.1工作流程</h3><p>Git本地操作分为三个区域：</p><p>工作流程：</p><p><img src="https://img-blog.csdnimg.cn/20200224154216190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>工作流程：<br><img src="https://img-blog.csdnimg.cn/20200224154313643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-2本地仓库操作"><a href="#2-1-2本地仓库操作" class="headerlink" title="2.1.2本地仓库操作"></a>2.1.2本地仓库操作</h3><p>什么是仓库呢？仓库又名版本库，英文名repository，我们可以简单理解成是一个目录，用于存放代码的，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除等操作Git都能跟踪到。</p><ul><li>在安装好后首次使用我们需要进行全局配置</li></ul><p>在桌面空白处右键，点击“Git Bash Here” 已打开Git命令行窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br>$ git config --list<br></code></pre></td></tr></table></figure><blockquote><p>注意：配置完成后输入git config –global user.name和git config –global user.email进行查看，是否是自己所绑定的。</p></blockquote><ul><li>创建仓库<br>当我们需要让Git去管理某个项目的时候，就需要创建仓库了。在创建仓库时使用的目录不一定要求是非空的目录，但是最好使用一个非空的目录。</li></ul><blockquote><p>注意：在使用过程中最好不要使用包含中文的目录名（目录亦是如此）。</p></blockquote><p>a、创建空目录：mkdir pro_git  </p><p>b、进入项目目录中：cd pro_git   </p><p>c、Git仓库初始化：（让Git知道，它需要来管理这几个目录）<br>     指令：git init</p><p><img src="https://img-blog.csdnimg.cn/20200224160427637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Git常用指令操作<br>查看当前状态：git status 【非必要】<br>添加到缓存区：git add 文件名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：git add指令，可以添加一个文件，也可以同时添加多个文件。<br>语法1：git add 文件名<br>语法2：git add 文件名1 文件名2 文件名3 …<br>语法3：git add .【添加当前目录到缓存区中】<br></code></pre></td></tr></table></figure><p>提交至版本库：git commit -m “注释内容”<br><img src="https://img-blog.csdnimg.cn/20200224161027746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-3版本回退"><a href="#2-1-3版本回退" class="headerlink" title="2.1.3版本回退"></a>2.1.3版本回退</h3><p>版本回退分为两步骤进行操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">步骤：<br>①查看版本，确定需要回到的时刻点<br>指令：<br>git <span class="hljs-built_in">log</span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br>②回退操作<br>指令：<br>git reset --hard 提交编号<br></code></pre></td></tr></table></figure><p>案例：查看版本和回退到创建第一个文件readme.txt的版本。</p><p><img src="https://img-blog.csdnimg.cn/20200224161625191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意:回退到过去的版本，要想在回到之间最新的版本的时候。可以通过之间查看的的提交码回到最新版本，也可以使用(<em>git reflog</em>)指令去查看历史操作，以得到最新的commit ID。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200224162340293.png" alt="在这里插入图片描述"></p><h2 id="2-3远程仓库"><a href="#2-3远程仓库" class="headerlink" title="2.3远程仓库"></a>2.3远程仓库</h2><p>主要以GitHub为例。</p><h3 id="2-3-1GithHub创建"><a href="#2-3-1GithHub创建" class="headerlink" title="2.3.1GithHub创建"></a>2.3.1GithHub创建</h3><p>打开创建仓库页面：<a href="https://github.com/new">https://github.com/new</a><br>圈出的部分为必填项，其余根据实际需要选择性补充：<br><img src="https://img-blog.csdnimg.cn/20200224192826877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="Github创建仓库"></p><blockquote><p>注意：仓库名要在当前用户下唯一。</p></blockquote><h3 id="2-3-2两种不同的使用方式"><a href="#2-3-2两种不同的使用方式" class="headerlink" title="2.3.2两种不同的使用方式"></a>2.3.2两种不同的使用方式</h3><h4 id="2-3-2-1基于http-https协议"><a href="#2-3-2-1基于http-https协议" class="headerlink" title="2.3.2.1基于http/https协议"></a>2.3.2.1基于http/https协议</h4><ol><li><p>创建空目录，名称为shop<br><img src="https://img-blog.csdnimg.cn/20200224193635888.png" alt="创建空目录"></p></li><li><p>使用clone指令克隆线上仓库到本地</p></li></ol><p>语法：git clone  线上仓库<br><img src="https://img-blog.csdnimg.cn/20200224194232490.png" alt="克隆线上仓库"></p><ol start="3"><li>在仓库上做对应的操作（提交暂存区、提交本地仓库、提交线上仓库、拉取线上仓库）<br>提交到线上仓库的指令：git push<br>拉取线上仓库：git pull<br><img src="https://img-blog.csdnimg.cn/20200224195206506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="提交到线上仓库"></li></ol><blockquote><p>提醒：在以后每天工作中第一件事就是先git pull拉取线上最新的版本；而下班前要做的是git push，将本地的代码提交到线上仓库。</p></blockquote><h4 id="2-3-2-2基于ssh协议（推荐）"><a href="#2-3-2-2基于ssh协议（推荐）" class="headerlink" title="2.3.2.2基于ssh协议（推荐）"></a>2.3.2.2基于ssh协议（推荐）</h4><p>该方式与前面https方式相比，此方式影响github对于用户的身份鉴权方式，对于git的具体操作（如提交本地、添加注释、提交远程等操作）没有任何影响。</p><ol><li><p>生成公私玥对指令（需先OpenSSH安装，若是没有联系我）：ssh-keygen -t rsa -C “注册邮箱”<br><img src="https://img-blog.csdnimg.cn/20200224201842503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="OpenSSH公私钥"></p></li><li><p>上传公钥内容（id_rsa.pub）<br><img src="https://img-blog.csdnimg.cn/20200224204158846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="上传公钥内容"></p></li><li><p>执行后续git的操作</p></li></ol><ul><li>clone线上仓库到本地（git clone）</li></ul><p><img src="https://img-blog.csdnimg.cn/20200224205618772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="SSH克隆线上仓库"></p><ul><li>修改文件后添加缓存区、提交本地仓库、提交线上仓库</li></ul><p><img src="https://img-blog.csdnimg.cn/20200224205747971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="SSH添加新文件"></p><p><em>在git push的时候并没有提示要求我们输入帐号密码，说明公私玥已经实现了用户身份鉴权</em>。</p><h3 id="2-3-3分支管理"><a href="#2-3-3分支管理" class="headerlink" title="2.3.3分支管理"></a>2.3.3分支管理</h3><p>什么是分支？<br><img src="https://img-blog.csdnimg.cn/20200224210447494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="分支管理"><br>      在版本回退中，每次提交后都会有记录，Git把它们串成时间线，形成类似于时间轴的东西，这个时间轴就是一个分支，我们称之为==master分支==。<br>     而在开发的时候往往是团队协作，多人进行开发，因此光有一个分支是无法满足多人同时开发的需求的，并且在分支上工作并不影响其他分支的正常使用，会更加安全，Git鼓励开发者使用分支去完成一些开发任务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">分支相关指令：<br>查看分支：git branch<br>创建分支：git branch 分支名<br>切换分支：git checkout 分支名 <br>删除分支：git branch -d 分支名<br>合并分支：git merge 被合并的分支名<br></code></pre></td></tr></table></figure><p>查看分支：<br><img src="https://img-blog.csdnimg.cn/20200224211033367.png" alt="查看分支"></p><blockquote><p>注意：当前分支前面有个标记“*”；</p></blockquote><p>创建分支：<br><img src="https://img-blog.csdnimg.cn/20200224211354922.png" alt="创建分支"><br>切换分支：<br><img src="https://img-blog.csdnimg.cn/20200224211544583.png" alt="切换分支"><br>合并分支：<br>现在先将dev分支下的readme文件中添加一行并提交到本地<br><img src="https://img-blog.csdnimg.cn/20200224234057493.png" alt="dev分支下添加"><br>切换到master分支下观察readme文件的内容<br><img src="https://img-blog.csdnimg.cn/20200224235124876.png" alt="master分支"><br>将dev分支的内容和master分支合并：<br><img src="https://img-blog.csdnimg.cn/20200224235401176.png" alt="合并分支"><br>删除分支：<br><img src="https://img-blog.csdnimg.cn/20200224235535595.png" alt="删除分支"></p><blockquote><p>注意：在删除分支的时候，一定要先退出要删除的分支，然后才能删除。</p></blockquote><p>合并所有分支之后，需要将master分支提交线上远程仓库中：<br><img src="https://img-blog.csdnimg.cn/20200225000649744.png" alt="提交到线上仓库"></p><h3 id="2-3-4冲突的产生与解决"><a href="#2-3-4冲突的产生与解决" class="headerlink" title="2.3.4冲突的产生与解决"></a>2.3.4冲突的产生与解决</h3><p>案例：模拟产生冲突。</p><ol><li>下班之后同事在线上仓库进行修改<br><img src="https://img-blog.csdnimg.cn/2020022515324582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="线上修改"></li></ol><blockquote><p>注意：此时我的本地仓库的内容和线上不一致的。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200225153722804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="线上和线下的区别"></p><ol start="2"><li>第二天上班的时候，没有拉取线（git pull）上的文件，而直接修改了本地所对应的文件内容。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200225191619228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="修改readm.txt文件"></p><ol start="3"><li>在下班的时候将文件推送到线上仓库（git push）</li></ol><p><img src="https://img-blog.csdnimg.cn/2020022519135988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="修改完本地推向线上"></p><blockquote><p>提示我们要在再次push之间先git pull操作。</p></blockquote><p>==【解决冲突】==<br>4. 先git pull<br><img src="https://img-blog.csdnimg.cn/20200225191822755.png" alt="解决冲突拉取线上仓库文件"></p><ol start="5"><li><p>打开冲突文件，解决冲突<br>解决方法：需要和同事进行商量，看代码如何保留，然后将改好的文件再次提交即可。<br><img src="https://img-blog.csdnimg.cn/20200225192054373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="冲突文件合并"></p></li><li><p>重新提交<br><img src="https://img-blog.csdnimg.cn/20200225192448762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="重新提交解决冲突文件"></p></li><li><p>查看线上效果<br><img src="https://img-blog.csdnimg.cn/20200225192641491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="解决冲突后的线上效果"></p></li></ol><blockquote><p>新手小技巧：上班第一件事先git pull,可以在一定程度上避免冲突的产生。</p></blockquote><h1 id="3-实用技能"><a href="#3-实用技能" class="headerlink" title="3.实用技能"></a>3.实用技能</h1><h2 id="3-1图形管理工具"><a href="#3-1图形管理工具" class="headerlink" title="3.1图形管理工具"></a>3.1图形管理工具</h2><h3 id="3-1-1GitHub-for-Dektop"><a href="#3-1-1GitHub-for-Dektop" class="headerlink" title="3.1.1GitHub for Dektop"></a>3.1.1GitHub for Dektop</h3><p>Github出品的软件，功能完善，使用方便。对于经常使用GitHub的开发人员来说是非常便捷的工具。界面干净，用起来非常顺手，顶部的分支时间线非常绚丽。</p><h3 id="3-1-2Source-tree"><a href="#3-1-2Source-tree" class="headerlink" title="3.1.2Source tree"></a>3.1.2Source tree</h3><p>老牌的Git GUI管理工具了，也号称是最好用的Git GUI工具。功能丰富，基本操作和高级操作都非常流畅，适合初学者上手。</p><h3 id="3-1-3TortoiseGit"><a href="#3-1-3TortoiseGit" class="headerlink" title="3.1.3TortoiseGit"></a>3.1.3TortoiseGit</h3><p>对于熟悉SVN的开发人员来说，这个小乌龟图标应该是非常友善了。TortoiseGit 简称 tgit, 中文名海龟Git。它与其前辈TortoiseSVN都是非常优秀的开源版本控制客户端软件。</p><h2 id="3-2忽略文件"><a href="#3-2忽略文件" class="headerlink" title="3.2忽略文件"></a>3.2忽略文件</h2><p>场景：在项目目录下有很多万年不变的文件目录，例如css、js、images等，或者还有一些目录即便有改动，我们也不想让其提交到远程仓库的文档，此时我们可以使用“忽略文件”机制来实现需求。</p><p>忽略文件需要新建一个名为==.gitignore==的文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录及其子目录生效。<br>注意：该文件因为没有文件名，没办法直接在windows目录下直接创建，可以通过命令行Git Bash来touch创建。</p><p>常见规则写法有如下几种：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>）<span class="hljs-regexp">/mtk/</span>               过滤整个文件夹<br><span class="hljs-number">2</span>）*.zip                过滤所有.zip文件<br><span class="hljs-number">3</span>）<span class="hljs-regexp">/mtk/</span><span class="hljs-keyword">do</span>.c           过滤某个具体文件<br><span class="hljs-number">4</span>) !index.php   不过滤具体某个文件<br></code></pre></td></tr></table></figure><p>在.gitignore文件中，以#开头都是注释。<br>案例：</p><ol><li><p>先在本地创建一个js目录以及目录中的js文件<br><img src="https://img-blog.csdnimg.cn/20200225164330578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="本地创建js"></p></li><li><p>依次提交本地和线上<br><img src="https://img-blog.csdnimg.cn/20200225164734502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="依次提交本地和线上"></p></li><li><p>创建.gitignore文件并编写文件中的规则<br><img src="https://img-blog.csdnimg.cn/20200225163843486.png" alt="创建.gitignore文件"></p></li><li><p>再次提交本地和线上<br><img src="https://img-blog.csdnimg.cn/20200225170844874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="提交本地和线上index.js"></p></li><li><p>并观察本地和线上的仓库是否有新加的index.js文件</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200225171221967.png" alt="线上仓库查看"><br><img src="https://img-blog.csdnimg.cn/20200225165725541.png" alt="本地文件"></p><p>由于我本地安装的工具是TortoiseGit，明显的看出来index.js文件是被忽略的文件。</p>]]></content>
      
      
      <categories>
          
          <category> 版本库 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基本语法之C++中的四种_cast运算符</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>cast出现的意义:</p><ol><li>C++继承并扩展C语言的传统类型转换方式,提供了功能更加强大的转型机制（检查与风险）</li><li>更好的定位到转型的地方(通过搜索功能查找cast)<h1 id="2-C语言中的强制类型转换"><a href="#2-C语言中的强制类型转换" class="headerlink" title="2.C语言中的强制类型转换"></a>2.C语言中的强制类型转换</h1>在C语言中，使用强制类型转换进行变量之间的转换，主要有两种,如下:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> iNum=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">double</span> dNum_1=(<span class="hljs-keyword">double</span>)iNum;<span class="hljs-comment">//方式一</span><br><span class="hljs-keyword">double</span> dNum_2=<span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(iNum);<span class="hljs-comment">//方式二</span><br></code></pre></td></tr></table></figure>使用C语言中的强制类型转换,这种方式简单有效,C++也保留了这种强制类型转换，但是这种类型转换无法使用类和类的指针。</li></ol><blockquote><p>ANSI-C++标准定义了四个新的转换符:<code>reinterpret_cast</code>, <code>static_cast</code>, <code>dynamic_cast</code>和<code>const_cast</code>，目的在于提供类之间的类型转换;</p></blockquote><h1 id="3-reinterpret-cast"><a href="#3-reinterpret-cast" class="headerlink" title="3.reinterpret_cast"></a>3.reinterpret_cast</h1><p>reinterpret_cast是四种强制转化中功能最为强大的(最暴力，最底层，最不安全)。而它的本质是<strong>编译器</strong>的指令。<br>用法:reinpreter_cast<type-id> (expression)<br>作用:可以将一个指针转成一个整数,也可以把一个整数转换成一个指针。或者不同类型的指针的相互转换。type-id必须是一个指针、引用、函数指针或者成员指针。<br>代码示例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span> </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> a = <span class="hljs-number">1.1</span>;<br><span class="hljs-keyword">char</span> * c = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(&amp;a);<br><span class="hljs-keyword">double</span>* b = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">double</span>*&gt;(c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,*b);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-const-cast"><a href="#4-const-cast" class="headerlink" title="4.const_cast"></a>4.const_cast</h1><h1 id="5-static-cast"><a href="#5-static-cast" class="headerlink" title="5.static_cast"></a>5.static_cast</h1><h1 id="6-dynamic-cast"><a href="#6-dynamic-cast" class="headerlink" title="6.dynamic_cast"></a>6.dynamic_cast</h1>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基本语法之异常处理</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<p>C++异常处理机制就可以让我们捕获并处理这些错误，然后我们可以让程序沿着一条不会出错的路径继续执行，或者不得不结束程序，但在结束前可以做一些必要的工作。<br>而C++异常处理机制会涉及try、catch、throw三个关键字。</p><blockquote><p>程序的错误大致可以分为三种，分别是语法错误、逻辑错误和运行时错误：</p></blockquote><ol><li><p>语法错误在编译和链接阶段就能发现，只有 100% 符合语法规则的代码才能生成可执行程序。语法错误是最容易发现、最容易定位、最容易排除的错误，程序员最不需要担心的就是这种错误。</p></li><li><p>逻辑错误是说我们编写的代码思路有问题，不能够达到最终的目标，这种错误可以通过调试来解决。</p></li><li><p>运行时错误是指程序在运行期间发生的错误，例如除数为 0、内存分配失败、数组越界、文件不存在等。C++ 异常（Exception）机制就是为解决运行时错误而引入的。</p></li></ol><p>注意：所谓的抛出异常，就是报告一个运行时错误，程序员可以根据错误信息来进一步处理。</p><h1 id="1-捕获异常"><a href="#1-捕获异常" class="headerlink" title="1.捕获异常"></a>1.捕获异常</h1><p>通过<code>C++</code>异常机制来捕获上面的异常，避免程序崩溃。<code>try</code>和<code>catch</code>都是<code>C++</code>中的关键字，后面跟语句块，不能省略{};</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span><br>&#123;<br>    <span class="hljs-comment">//可能抛出异常的语句</span><br>&#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(exceptionType variable)<br>&#123;<br>    <span class="hljs-comment">//处理异常的语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以这样理解：<code>catch</code>告诉<code>try</code>你去检测一下程序有没有错误，有错误的话就告诉我，我来处理没有错误的就不要来理我。<br><code>catch</code> 关键字后面的<code>exceptionType variable</code>指明了当前 <code>catch</code> 可以处理的异常类型，以及具体的出错信息。</p>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7防火墙</title>
      <link href="/posts/Linux/CentOS7/"/>
      <url>/posts/Linux/CentOS7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CentOS-7未能找到firewall-cmd"><a href="#1-CentOS-7未能找到firewall-cmd" class="headerlink" title="1.CentOS 7未能找到firewall-cmd"></a>1.<code>CentOS 7</code>未能找到<code>firewall-cmd</code></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# firewall-cmd --state<br>-bash: firewall-cmd: 未找到命令<br></code></pre></td></tr></table></figure><p>可能是没有安装<code>firewall</code>,安装命令如下：<code>yum install firewalld -y</code></p><p>查看安装：<code>which firewalld</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">firewalld的基本使用</span><br><br>启动： systemctl start firewalld<br><br>关闭： systemctl stop firewalld<br><br>查看状态： systemctl status firewalld<br><br>开机禁用 ： systemctl disable firewalld<br><br>开机启用 ： systemctl enable firewalld<br><br>查看开放的端口：firewall-cmd --list-ports<br><br>添加端口：firewall-cmd --add-port=8080/tcp --permanent （–permanent永久生效，没有此参数重启后失效<br></code></pre></td></tr></table></figure><h1 id="2-CentOS-7查看和关闭防火墙"><a href="#2-CentOS-7查看和关闭防火墙" class="headerlink" title="2.CentOS 7查看和关闭防火墙"></a>2.<code>CentOS 7</code>查看和关闭防火墙</h1><p><code>CentOS 7.6</code>默认使用的是<code>firewall</code>作为防火墙</p><ul><li>查看防火墙状态</li></ul><p><code>firewall-cmd --state</code></p><ul><li>停止<code>firewall</code></li></ul><p><code>systemctl stop firewalld.service</code></p><ul><li>禁止<code>firewall</code>开机启动</li></ul><p><code>systemctl disable firewalld.service </code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基本语法之文件操作</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放，可以通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件<code>&lt;fstream&gt;</code></p><p>文件类型分为两种：</p><ol><li>文本文件- 文件以文本的ASCII码形式存储在计算机中</li><li>二进制文件- 文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类：</p><ol><li><p><code>ofstrean</code>:写操作</p></li><li><p><code>ifstream</code>:读操作</p></li><li><p><code>fstream</code>:读操作</p></li></ol><h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>写文件步骤如下：</p><ol><li>包含头文件</li></ol><p>  <code>#include&lt;fstream&gt;</code></p><ol start="2"><li>创建流对象</li></ol><p>  <code>ofstream ofs;</code></p><ol start="3"><li>打开文件</li></ol><p>  <code>ofs.open(&quot;文件路径&quot;,打开方式);</code></p><ol start="4"><li>写数据</li></ol><p>  <code>ofs&lt;&lt;&quot;写入的数据&quot;;</code></p><ol start="5"><li>关闭文件</li></ol><p>  <code>ofs.close();</code></p><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th align="left">解释</th></tr></thead><tbody><tr><td>ios::in</td><td align="left">为读文件而打开文件</td></tr><tr><td>ios::out</td><td align="left">为写文件而打开文件</td></tr><tr><td>ios::ate</td><td align="left">初始位置：文件尾</td></tr><tr><td>ios::app</td><td align="left">追加方式写文件</td></tr><tr><td>ios::trunc</td><td align="left">如果文件存在先删除，在创建</td></tr><tr><td>ios::binary</td><td align="left">二进制方式</td></tr></tbody></table><p><strong>注意</strong>：文件打开方式可以配合使用，利用<code>|</code>操作符</p><p>例如：用二进制方式写文件<code>ios::binary | ios::out</code></p><p>示例代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、包含头文件 fstream</span><br><span class="hljs-comment">//2、创建文件流</span><br>ofstream ofs;<br><span class="hljs-comment">//指定打开方式</span><br>ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::out | ios::trunc);<br><br><span class="hljs-comment">//4、写内容</span><br>ofs &lt;&lt; <span class="hljs-string">&quot;姓名:小明&quot;</span> &lt;&lt; endl;<br>ofs &lt;&lt; <span class="hljs-string">&quot;年龄:18&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//关闭文件</span><br>ofs.<span class="hljs-built_in">close</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>文件操作必须包含头文件<strong>fstream</strong></li><li>读文件可以利用<strong>ofstream</strong>，或者<strong>fstream</strong>类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用<code>&lt;&lt;</code>可以向文件中写数据</li><li>操作完毕，需关闭文件</li></ul><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件</p><p> <code>#include&lt;fstream&gt;</code></p></li><li><p>创建流对象</p><p><code>ifstream ifs;</code></p></li><li><p>打开文件并判断文件是否打开成功</p></li></ol><p><code>ifs.open(&quot;文件路径&quot;,打开方式);</code> </p><ol start="4"><li>读数据</li></ol><p>  四种方式读取</p><ol start="5"><li>关闭文件</li></ol><p>  <code>ifs.close();</code></p><p>  示例：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、包含头文件</span><br><span class="hljs-comment">//2、创建流对象</span><br>ifstream ifs;<br><span class="hljs-comment">//3、打开文件 并且判断是否打开成功 </span><br>ifs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::in);<br><span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//4、读数据</span><br><span class="hljs-comment">//方式一:</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">char buff1[1024] = &#123; 0 &#125;;//创建字符数组保存读取数据</span><br><span class="hljs-comment">while (ifs &gt;&gt; buff1)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">cout &lt;&lt;buff1 &lt;&lt; endl;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//方式二:字符数组进行存储</span><br><span class="hljs-comment">/*char buff2[1024] = &#123; 0 &#125;;</span><br><span class="hljs-comment">while (ifs.getline(buff2, sizeof(buff2)))</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">cout &lt;&lt; buff2 &lt;&lt; endl;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//方式三:使用C++的string进行存储</span><br><span class="hljs-comment">/*string str;</span><br><span class="hljs-comment">while (getline(ifs,str)) //参数一:s</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">cout &lt;&lt;&quot;C++的string：&quot; &lt;&lt;str &lt;&lt; endl;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">//方式四:一个字符一个字符的读取，效率比较低下</span><br><span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span> ((c=ifs.<span class="hljs-built_in">get</span>()) != EOF) <span class="hljs-comment">//EOF 文件末尾</span><br>&#123;<br>cout &lt;&lt; c;<br>&#125;<br><span class="hljs-comment">//5、关闭文件</span><br>  ifs.<span class="hljs-built_in">close</span>();<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>  总结：</p><ul><li>读文件可以利用ifstream，或者符fstream类</li><li>利用is_open函数可以进行判断时候打开成功</li><li>close关闭文件</li></ul><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为<code>ios::binary</code></p><h3 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h3><p>二进制方式写文件主要利用流对象调用成员函数<code>write</code></p><p>函数原型：<code>ostream&amp; write(const char* buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//二进制文件 写文件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">char</span> m_Name[<span class="hljs-number">64</span>];<span class="hljs-comment">//姓名</span><br><span class="hljs-keyword">int</span> m_Age;<span class="hljs-comment">//年龄</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、包含头文件</span><br><span class="hljs-comment">//2、创建流对象</span><br>ofstream ofs;<br><span class="hljs-comment">//3、打开文件</span><br>ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;person.txt&quot;</span>, ios::out | ios::binary);<br><span class="hljs-comment">//4、写文件</span><br>Person p = &#123; <span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">18</span> &#125;;<br>    <br>ofs.<span class="hljs-built_in">write</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>*)&amp;p, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(Person));<br><span class="hljs-comment">//5、关闭文件</span><br>ofs.<span class="hljs-built_in">close</span>();<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h3><p>二进制方式读文件主要利用流对象调用成员函数<strong>read</strong></p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段空间。len是读写的字节数</p><p>示例代码：</p><p>```cpp<br>#include <iostream><br>#include <fstream><br>#include <string><br>using namespace std;</p><p>class Person<br>{<br>public:<br>    char m_Name[64];<br>    int m_Age;<br>};</p><p>#if 0<br>int main()<br>{<br>    ifstream ifs;<br>    ifs.open(“person.txt”, ios::in | ios::binary);<br>    if (!ifs.is_open())<br>    {<br>        cout &lt;&lt; “文件打开失败” &lt;&lt; endl;<br>        return 0;<br>    }</p><pre><code>Person p;ifs.read((char*)&amp;p, sizeof(Person));cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; p.m_Name &lt;&lt; &quot;  &quot; &lt;&lt; &quot;年龄:&quot; &lt;&lt; p.m_Age &lt;&lt; endl;ifs.close();system(&quot;pause&quot;);return 0;</code></pre><p>}<br>#endif</p>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基本语法之继承关系</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<p>在C++中的继承是类与类之间的关系，是一个很简单很直观的概念，与现实世界中的继承关系类似。</p><p><strong>继承</strong>可以理解为一个类从另一个类获取成员函数的过程。例如类B继承于A，那么B就拥有A的成员变量和成员函数。</p><p>被继承的类称为父类或基类，继承的类称为子类或派生类。“子类”和“父类”通常放在一起称呼，“基类”和“派生类”通常放在一起称呼。</p><blockquote><p>以下是两种典型的使用继承的场景：</p><ul><li>当你创建的新类与现有的类相似，只是多出若干成员变量或成员函数时，可以使用继承，这样不但可以会减少代码量，而且新类会拥有基类的所有功能。</li><li>当你需要创建多个类，它们拥有很多相似的成员变量或成员函数时，也可以使用继承。可以将这些类的共同成员提取出来，定义为基类，然后从基类继承，既可以节省代码，也方便后续修改成员。</li></ul></blockquote><p>C++继承的一般语法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> 派生类名：[继承方式]  基类名</span><br><span class="hljs-class">&#123;</span><br>    派生类新增的成员<br>&#125;<br></code></pre></td></tr></table></figure><p>继承方式实际就是限定了基类成员在派生类中的访问权限，包括<code>public</code>(公有的)、<code>private</code>(私有的)<br>和<code>protected</code>(受保护的)。此项是可选项，如果不写，默认为<code>private</code>(成员变量和成员函数默认也是<code>private</code>)。</p><h1 id="1-public、protected、private修饰类的成员"><a href="#1-public、protected、private修饰类的成员" class="headerlink" title="1.public、protected、private修饰类的成员"></a>1.public、protected、private修饰类的成员</h1><p>类的成员的访问权限由高到底依次是public–&gt;protected–&gt;private。</p><p>注意：</p><ul><li>public成员可以通过对象来访问</li><li>private成员不能通过对象访问</li><li>protected成员和private成员类似，也不能通过对象访问。</li></ul><blockquote><p>proteted成员和private成员类似，也不能通过对象访问。但是当存在继承关系时，protected和private就不一样了：基类中的protected成员可以在派生类中使用，而基类中的private成员不能在派生类中使用。</p></blockquote><h1 id="2-public、protected、private指定继承方式"><a href="#2-public、protected、private指定继承方式" class="headerlink" title="2.public、protected、private指定继承方式"></a>2.public、protected、private指定继承方式</h1><p>在使用不同的继承方式会影响基类成员在派生类中的访问权限。</p><table><thead><tr><th>继承方式基类成员</th><th>public成员</th><th>protected成员</th><th>private成员</th></tr></thead><tbody><tr><td>public继承</td><td>public</td><td>protected</td><td>不可见</td></tr><tr><td>protected继承</td><td>protected</td><td>protected</td><td>不可见</td></tr><tr><td>private继承</td><td>private</td><td>private</td><td>不可见</td></tr></tbody></table><p>通过上面表格分析得出：</p><ul><li>基类成员在派生类中的访问权限不得高于继承方式中指定的权限</li><li>不管继承方式如何，基类中的<code>private</code>成员在派生类中始终不能使用（不能在派生类的成员函数中访问或调用）。</li><li>如果希望基类的成员能够被派生类继承并且毫无障碍地使用，那么这些成员只能声明为<code>public</code>或<code>protected</code>;只有那些不希望在派生类中使用的成员才声明<code>private</code>。</li><li>如果希望基类的成员既不向外暴露（不能通过对象访问），还能在派生类中使用，那么只能声明为 <code>protected</code>。</li></ul><blockquote><p>由于 private 和 protected 继承方式会改变基类成员在派生类中的访问权限，导致继承关系复杂，所以实际开发中我们一般使用 public。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基本语法之面向对象三大特征多态</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<h1 id="一、多态"><a href="#一、多态" class="headerlink" title="一、多态"></a>一、多态</h1><h2 id="1-1多态的基本概念"><a href="#1-1多态的基本概念" class="headerlink" title="1.1多态的基本概念"></a>1.1多态的基本概念</h2><p>多态是C++面向对象三大特征之一<br>多态分为两类</p><ul><li>静态多态：<strong>函数重载</strong>和<strong>运算符重载</strong>属于静态多态，复用函数名</li><li>动态多态：派生类和虚函数实现运行时多态 静态多态和动态</li></ul><p>多态的区别：</p><ul><li><p>静态多态的函数地址早绑定—编译阶段确定函数地址</p></li><li><p>动态多态的函数地址晚绑定—运行阶段确定函数地址</p></li></ul><p>示例代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//多态</span><br><br><span class="hljs-comment">//动物</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//speak函数是虚函数</span><br><span class="hljs-comment">//函数前面加上Virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><span class="hljs-comment">//猫类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//重写 函数返回值  函数名 参数哦列表  完全相同</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;小猫在说话&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><span class="hljs-comment">//狗类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span><span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;小狗在说话&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><span class="hljs-comment">//执行说话的函数</span><br><span class="hljs-comment">//地址早绑定  在编译阶段确定函数地址</span><br><span class="hljs-comment">//如果想执行让猫说话，那么地址就不能提前绑定，地址晚绑定</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSpeak</span><span class="hljs-params">(Animal&amp; animal)</span><span class="hljs-comment">//父类的引用指向子类对象</span></span><br><span class="hljs-function"></span>&#123;<br>animal.<span class="hljs-built_in">speak</span>();<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">动态多态满足条件</span><br><span class="hljs-comment">1、有继承关系</span><br><span class="hljs-comment">2、子类重写父类的虚函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">动态多态使用</span><br><span class="hljs-comment">父类的指针或者引用指向 子类对象</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Cat cat;<br><span class="hljs-built_in">doSpeak</span>(cat);<br><br>Dog dog;<br><span class="hljs-built_in">doSpeak</span>(dog);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2多态案例—计算器类"><a href="#1-2多态案例—计算器类" class="headerlink" title="1.2多态案例—计算器类"></a>1.2多态案例—计算器类</h2><p>案例描述：</p><p>分别用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li><p>代码组织结构清晰</p></li><li><p>可读性强</p></li><li><p>有利于前期和后期的扩展以及维护工作</p></li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//分别利用普通写法和多态技术实现计算器</span><br><br><span class="hljs-comment">//普通写法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calcuator</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">(string oper)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;+&quot;</span> == oper)<br>&#123;<br><span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;-&quot;</span> == oper)<br>&#123;<br><span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;*&quot;</span> == oper)<br>&#123;<br><span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/&quot;</span> == oper)<br>&#123;<br><span class="hljs-keyword">return</span> m_Num1 / m_Num2;<br>&#125;<br><span class="hljs-comment">//如果想扩展新的功能，需求修改源码</span><br><span class="hljs-comment">//真的在开发中  提供 开闭原则</span><br><span class="hljs-comment">//开闭原则:对扩展进行开放，对修改进行关闭</span><br>&#125;<br><br><span class="hljs-keyword">int</span> m_Num1;<span class="hljs-comment">//操作数1</span><br><span class="hljs-keyword">int</span> m_Num2;<span class="hljs-comment">//操作数2</span><br><br><span class="hljs-keyword">private</span>:<br><br>&#125;;<br><br><span class="hljs-comment">//利用多态实现计算器</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多态带来的好处</span><br><span class="hljs-comment">1、组织结构清晰</span><br><span class="hljs-comment">2、可读性强</span><br><span class="hljs-comment">3、对前期和后期扩展以及维护性高</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//实现计算器抽象类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractCalculator</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">int</span> m_Num1;<br><span class="hljs-keyword">int</span> m_Num2;<br>&#125;;<br><br><span class="hljs-comment">//加法计算器类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddCalcuator</span>:</span><span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//减法计算器类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubCalcuator</span> :</span><span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//乘法计算器类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MulCalcuator</span> :</span><span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Calcuator c;<br>c.m_Num1 = <span class="hljs-number">10</span>;<br>c.m_Num2 = <span class="hljs-number">10</span>;<br><br>std::cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;+&quot;</span>) &lt;&lt;std::endl;<br>std::cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;-&quot;</span>) &lt;&lt;std::endl;<br>std::cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;*&quot;</span>) &lt;&lt;std::endl;<br>std::cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;/&quot;</span>) &lt;&lt;std::endl;<br><br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;-----------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//多态的使用条件</span><br><span class="hljs-comment">//父类指针或者引用指向子类对象</span><br>AbstractCalculator *abc = <span class="hljs-keyword">new</span> AddCalcuator;<span class="hljs-comment">//父类指针</span><br>abc-&gt;m_Num1 = <span class="hljs-number">20</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">20</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-comment">//new出的对象记得delete</span><br><span class="hljs-keyword">delete</span> abc;<br><br>abc = <span class="hljs-keyword">new</span> SubCalcuator;<br>abc-&gt;m_Num1 = <span class="hljs-number">20</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">20</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;<br><br><br>abc = <span class="hljs-keyword">new</span> MulCalcuator;<br>abc-&gt;m_Num1 = <span class="hljs-number">20</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">20</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：C++开发提倡利用多态设计程序框架，因为多态优点很多</p></blockquote><h2 id="1-3纯虚函数和抽象类"><a href="#1-3纯虚函数和抽象类" class="headerlink" title="1.3纯虚函数和抽象类"></a>1.3纯虚函数和抽象类</h2><p>在多态中父类中虚函数的实现是毫无意义的，主要都是调用子类<strong>重写</strong>的内容</p><p>因此可以将虚函数改为纯虚函数</p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 (参数列表) = 0;</code></p><p>当类中有了纯虚函数，此类也称为抽象类。</p><p><strong>抽象类的特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//纯虚函数和抽象类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//纯虚函数</span><br><span class="hljs-comment">//只有一个纯虚函数，这个类称为抽象类</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">抽象类特点</span><br><span class="hljs-comment">1、无法实例化对象</span><br><span class="hljs-comment">2、抽象类的子类 鼻血重写父类中的纯虚函数，否则也属于抽象类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Base base;//无法实例化 Error</span><br><span class="hljs-comment">//Son son;//子类必须重写父类中的纯虚函数</span><br>Base *base = <span class="hljs-keyword">new</span> Son;<br>base-&gt;<span class="hljs-built_in">func</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-4虚析构和纯虚析构"><a href="#1-4虚析构和纯虚析构" class="headerlink" title="1.4虚析构和纯虚析构"></a>1.4虚析构和纯虚析构</h2><p>多态使用时，如果在子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构函数代码</p><p>解决方式：<br>将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现<br>虚析构和纯虚析构区别：</li><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：<br><code>virtual ~类名()&#123;&#125;</code><br>纯虚析构语法：<br><code>virtual ~类名()=0;</code><br><code>类名::~类名()&#123;&#125;</code></p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//虚析构与纯虚析构</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Animal</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal的构造函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//①利用虚析构可以解决 </span><br><span class="hljs-comment">//父类指针释放子类对象时不干净的问题</span><br><span class="hljs-comment">/*virtual ~Animal()</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;Animal的虚析构函数调用&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">//②利用纯虚析构 注意:不能只声明，必须要实现</span><br><span class="hljs-comment">//有了纯虚析构之后，这个类也属于抽象类，无法实例化对象</span><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//纯虚函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br>Animal::~<span class="hljs-built_in">Animal</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal的纯析构函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span><span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Cat</span>(string name) <br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Cat的构造函数调用&quot;</span> &lt;&lt; endl;<br>m_Name = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name);<br>&#125;<br><br>~<span class="hljs-built_in">Cat</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (m_Name != <span class="hljs-literal">NULL</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Cat的析构函数调用&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> m_Name;<br>m_Name = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; *m_Name&lt;&lt;<span class="hljs-string">&quot;在说话&quot;</span> &lt;&lt; endl;<br>&#125;<br>string *m_Name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建父类的指针指向子类对象</span><br>Animal *animal = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Cat</span>(<span class="hljs-string">&quot;汤姆猫&quot;</span>);<br>animal-&gt;<span class="hljs-built_in">speak</span>();<br><span class="hljs-comment">//父类指针在析构时候 不会调用子类中析构函数，导致子类如果有堆区属性，会出现内存泄漏</span><br><span class="hljs-keyword">delete</span> animal;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ol><li>虚析构或纯虚析构就是用来解决父类指针释放子类对象</li><li>如果子类没有堆区数据，可以不写为虚析构或纯虚析构</li><li>拥有纯虚析构函数的类也属于抽象类</li></ol><h2 id="1-5多态案例三-电脑组装"><a href="#1-5多态案例三-电脑组装" class="headerlink" title="1.5多态案例三-电脑组装"></a>1.5多态案例三-电脑组装</h2><p>案例描述：<br>电脑主要组成部件为CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象类，并且提供不同的厂商生产不同的零件，例如Inter厂商和Lenovo厂商创建电脑类提供电脑工作的函数，并且调用每个零件工作的接口<br>测试时组装三台不同的电脑进行工作</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//抽象CPU类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的计算函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">//抽象显卡类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoCard</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的显示函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//抽象内存条类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的存储函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//电脑类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Computer</span>(CPU *cpu,VideoCard *vc,Memory *mem)<span class="hljs-comment">//构造函数</span><br>&#123;<br>m_cpu = cpu;<br>m_vc = vc;<br>m_mem = mem;<br>&#125;<br><span class="hljs-comment">//提供析构函数 释放3个电脑零件</span><br>~<span class="hljs-built_in">Computer</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (m_cpu != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_cpu;<br>&#125;<br><span class="hljs-keyword">if</span> (m_vc != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_vc;<br>&#125;<br><span class="hljs-keyword">if</span> (m_mem != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_mem;<br>&#125;<br>&#125;<br><span class="hljs-comment">//提供工作的函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//让电脑零件工作起来</span><br>m_cpu-&gt;<span class="hljs-built_in">calculate</span>();<br>m_vc-&gt;<span class="hljs-built_in">display</span>();<br>m_mem-&gt;<span class="hljs-built_in">storage</span>();<br>&#125;<br><span class="hljs-keyword">private</span>:<br>CPU *m_cpu;<span class="hljs-comment">//CPU的零件指针</span><br>VideoCard *m_vc;<span class="hljs-comment">//显卡零件指针</span><br>Memory *m_mem;<span class="hljs-comment">//内存条零件指针</span><br>&#125;;<br><br><span class="hljs-comment">//具体厂商</span><br><span class="hljs-comment">//Intel厂商</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntelCPU</span>:</span><span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的CPU开始计算了&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntelVideoCard</span> :</span><span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的VideoCard开始显示了&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntelMemory</span> :</span><span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的Memory开始存储了&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//Lenovo厂商</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoCPU</span> :</span><span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的CPU开始计算了&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoVideoCard</span> :</span><span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的VideoCard开始显示了&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoMemory</span> :</span><span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的Memory开始存储了&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//组装第一台电脑零件</span><br>CPU *IntelCpu = <span class="hljs-keyword">new</span> IntelCPU;<span class="hljs-comment">//使用父类指针指向子类对象</span><br>VideoCard *InterCard = <span class="hljs-keyword">new</span> IntelVideoCard;<br>Memory *IntelMem = <span class="hljs-keyword">new</span> IntelMemory;<br><br>Computer *computer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(IntelCpu, InterCard, IntelMem);<br>cout &lt;&lt; <span class="hljs-string">&quot;第一台电脑开始工作-----------------------------&quot;</span> &lt;&lt; endl;<br>computer-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer;<br><br><span class="hljs-comment">//组装第二台电脑零件</span><br>CPU *LenovoCpu = <span class="hljs-keyword">new</span> LenovoCPU;<span class="hljs-comment">//使用父类指针指向子类对象</span><br>VideoCard *LenovoCard = <span class="hljs-keyword">new</span> LenovoVideoCard;<br>Memory *LenovoMem = <span class="hljs-keyword">new</span> LenovoMemory;<br><br>Computer *computer_Lenovo = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(LenovoCpu, LenovoCard, LenovoMem);<br>cout &lt;&lt; <span class="hljs-string">&quot;第二台电脑开始工作-----------------------------&quot;</span> &lt;&lt; endl;<br>computer_Lenovo-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer_Lenovo;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基本语法之面向对象三大特征继承</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/"/>
      <url>/posts/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/C-C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h1><p>继承是面向对象三大特征之一<br>有些类与类之间存在特殊的关系，例如下图中：<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/C++%E7%BB%A7%E6%89%BF.jpg" alt="C++继承"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。<br>这个时候我们就可以考虑利用继承的技术，减少重复代码。</p><h2 id="1-1继承的基本语法"><a href="#1-1继承的基本语法" class="headerlink" title="1.1继承的基本语法"></a>1.1继承的基本语法</h2><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处。<br>普通实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0</span><br><span class="hljs-comment">//Java页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...(公共头部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;java、Python、C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//Python页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Python</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...(公共头部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;java、Python、C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//C++页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPP</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...(公共头部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;java、Python、C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下:&quot;</span> &lt;&lt; endl;<br>Java ja;<br>ja.<span class="hljs-built_in">header</span>();<br>ja.<span class="hljs-built_in">footer</span>();<br>ja.<span class="hljs-built_in">left</span>();<br>ja.<span class="hljs-built_in">content</span>();<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下:&quot;</span> &lt;&lt; endl;<br>Python python;<br>python.<span class="hljs-built_in">header</span>();<br>python.<span class="hljs-built_in">footer</span>();<br>python.<span class="hljs-built_in">left</span>();<br>python.<span class="hljs-built_in">content</span>();<br><br>cout &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下:&quot;</span> &lt;&lt; endl;<br>CPP cpp;<br>cpp.<span class="hljs-built_in">header</span>();<br>cpp.<span class="hljs-built_in">footer</span>();<br>cpp.<span class="hljs-built_in">left</span>();<br>cpp.<span class="hljs-built_in">content</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>继承实现:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br><span class="hljs-comment">//继承的好处:减少重复代码</span><br><span class="hljs-comment">//语法:class 子类:继承方式 父类</span><br><span class="hljs-comment">//子类 也称为 派生类</span><br><span class="hljs-comment">//父类 也称为 基类</span><br><br><span class="hljs-comment">//基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasePage</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...(公共头部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;java、Python、C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//派生类 Java</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> :</span><span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Python</span> :</span><span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPP</span> :</span><span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;CPP学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下:&quot;</span> &lt;&lt; endl;<br>Java ja;<br>ja.<span class="hljs-built_in">header</span>();<br>ja.<span class="hljs-built_in">footer</span>();<br>ja.<span class="hljs-built_in">left</span>();<br>ja.<span class="hljs-built_in">content</span>();<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下:&quot;</span> &lt;&lt; endl;<br>Python python;<br>python.<span class="hljs-built_in">header</span>();<br>python.<span class="hljs-built_in">footer</span>();<br>python.<span class="hljs-built_in">left</span>();<br>python.<span class="hljs-built_in">content</span>();<br><br>cout &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下:&quot;</span> &lt;&lt; endl;<br>CPP cpp;<br>cpp.<span class="hljs-built_in">header</span>();<br>cpp.<span class="hljs-built_in">footer</span>();<br>cpp.<span class="hljs-built_in">left</span>();<br>cpp.<span class="hljs-built_in">content</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>总结：<br>继承的好处：可以减少重复的代码<br>class A:public B;<br>A类称为子类 或   派生类<br>B类称为父类 或  基类</p><p>派生类中的成员，包含两大部分：<br>一类是从基类继承过来的，一类自己增加的成员。<br>从基类继承过来的表现其共性，而新增的成员体现了其个性</p><h2 id="1-2继承方式"><a href="#1-2继承方式" class="headerlink" title="1.2继承方式"></a>1.2继承方式</h2><p>继承的语法：<code>class 子类：继承方式 父类</code><br>继承方式一共三种：</p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F.jpg" alt="类的继承方式"></p><p>示例代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//继承方式</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> m_C;<br>&#125;;<br><br><span class="hljs-comment">//公共继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son1</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A = <span class="hljs-number">10</span>;<span class="hljs-comment">//父类中的公有权限成员 到子类中变为保护权限</span><br>m_B = <span class="hljs-number">10</span>;<span class="hljs-comment">//父类中的保护权限成功 到子类中依然是保护权限</span><br><span class="hljs-comment">//m_C = 10;//父类中的私有权限成员 到子类访问不到</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><span class="hljs-comment">//保护继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son2</span>:</span><span class="hljs-keyword">protected</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A = <span class="hljs-number">10</span>;<span class="hljs-comment">//父类中的公有权限成员 到子类中依然是公共权限</span><br>m_B = <span class="hljs-number">10</span>;<span class="hljs-comment">//父类中的保护权限成功 到子类中依然是保护权限</span><br><span class="hljs-comment">//m_C = 10;//父类中的私有权限成员 到子类访问不到</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><span class="hljs-comment">//私有继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son3</span> :</span><span class="hljs-keyword">private</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A = <span class="hljs-number">10</span>;<span class="hljs-comment">//父类中的公有权限成员 到子类中依然是私有成员</span><br>m_B = <span class="hljs-number">10</span>;<span class="hljs-comment">//父类中的保护权限成功 到子类中依然是私有成员</span><br><span class="hljs-comment">//m_C = 10;//父类中的私有权限成员 到子类访问不到</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GrandSon3</span> :</span><span class="hljs-keyword">private</span> Son3<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//m_A = 10;//到了Son3中 m_A变为私有，及时是儿子，也是访问不到</span><br><span class="hljs-comment">//m_B = 10;//到了Son3中 m_B变为私有, 及时是儿子，也是访问不到</span><br><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son1 s1;<br>s1.m_A = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//s1.m_B = 100;//到Son1中 m_B是保护权限 类外无法访问</span><br><br>Son2 s2;<br><span class="hljs-comment">//s2.m_A = 100;//到Son2中 m_A变为了保护权限 因此类外访问不到</span><br><span class="hljs-comment">//s2.m_B = 100;//在Son2中 m_B保护权限 不可以访问</span><br><br>Son3 s3;<br><span class="hljs-comment">//s3.m_A = 100;//到Son3中 m_A变为了私有权限 因此类外访问不到</span><br><span class="hljs-comment">//s3.m_B = 100;//在Son3中 m_B私有权限 不可以访问</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h2 id="1-3继承中的对象模型"><a href="#1-3继承中的对象模型" class="headerlink" title="1.3继承中的对象模型"></a>1.3继承中的对象模型</h2><p>问题：从父类继承过去的成员，那些属于子类对象中？<br>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> m_C;<span class="hljs-comment">//私有成员只是被隐藏了,但是还是可以会继承下去的</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> m_D;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//父类中所有非静态成员属性会被子类继承下去</span><br><span class="hljs-comment">//父类中私有成员属性 是被编译器给屏蔽了，因此是访问不到，但是确实被继承下去了</span><br>cout &lt;&lt; <span class="hljs-string">&quot;szieof Son--&quot;</span>&lt;&lt;<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(Son) &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用工具查看：</p><ol><li>打开VS 2015开发人员工具<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E6%89%93%E5%BC%80VS-2015%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%B7%A5%E5%85%B7.jpg" alt="打开VS-2015开发人员工具"></li><li>进行你项目目录下</li><li>执行此命令<br><code>cl /d1 reportSingleClassLayout类名 &quot;文件名&quot;</code><br>示例：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cl /d1 reportSingleClassLayoutSon &quot;03 继承中的对象模型.cpp&quot;<br></code></pre></td></tr></table></figure></li><li>效果如图所示<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E7%B1%BB%E5%AF%B9%E8%B1%A1.jpg" alt="类对象"></li></ol><h2 id="1-4继承中的构造和析构顺序"><a href="#1-4继承中的构造和析构顺序" class="headerlink" title="1.4继承中的构造和析构顺序"></a>1.4继承中的构造和析构顺序</h2><p>子类继承父类之后，当创建了子类对象，也会调用父类的构造函数<br>问题：父类和子类的构造函数和析构顺序是谁先谁后？<br>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base构造函数&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Base</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base析构函数&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son构造函数&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Son</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son析构函数&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son son;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//继承中的构造和析构顺序如下:</span><br><span class="hljs-comment">//先构造父类，再构造子类，析构的顺序与析构顺序相反</span><br><span class="hljs-built_in">fun</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5继承同名成员处理方式"><a href="#1-5继承同名成员处理方式" class="headerlink" title="1.5继承同名成员处理方式"></a>1.5继承同名成员处理方式</h2><p>问题：</p><p>当子类与父类出现同名的成员，如何通过子类对象，访问到子类或者父类中同名的数据呢？</p><ul><li>访问子类同名成员 <strong>直接访问即可</strong></li><li>访问父类同名成员 <strong>需要加作用域</strong></li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//继承中同名的处理方式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>()<br>&#123;<br>m_A = <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base中的func函数&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> <span class="hljs-comment">//发生函数重载</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base中的func(int a)函数&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">int</span> m_A;<br>    <span class="hljs-comment">/*思考</span><br><span class="hljs-comment">函数重载的规则:</span><br><span class="hljs-comment">1、函数名必须相同</span><br><span class="hljs-comment">2、参数列表不同(个数不同，类型不同，参数排列顺序不同等）</span><br><span class="hljs-comment">3、函数的返回值类型可以相同也可以不相同</span><br><span class="hljs-comment">4、仅仅返回值类型不同不足以成为函数的重载</span><br><span class="hljs-comment">函数重载的作用:</span><br><span class="hljs-comment">重载函数通常用来在同一作用域内，使用同一函数名，命名一组功能相似的函数，</span><br><span class="hljs-comment">这样做减少了函数名的数量，避免了名字空间的污染，对于程序的可读性有很大的好处。</span><br><span class="hljs-comment">*/</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>m_A = <span class="hljs-number">200</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son中的func函数&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son son;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son下的m_A=&quot;</span> &lt;&lt; son.m_A &lt;&lt; endl;<span class="hljs-comment">//访问的是子类中的成员</span><br><span class="hljs-comment">//如果通过子类对象 访问到父类中同名成员，需加作用域</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Son下的m_A=&quot;</span> &lt;&lt; son.Base::m_A &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Son下的函数&quot;</span> &lt;&lt; endl;<br>son.<span class="hljs-built_in">func</span>();<span class="hljs-comment">//直接调用 调用的是子类中的同名成员</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;Base下的函数&quot;</span> &lt;&lt; endl;<br>son.Base::<span class="hljs-built_in">func</span>();<span class="hljs-comment">//调用父类中同名成员函数 直接加作用域</span><br><br><span class="hljs-comment">//如果子类中出现和父类同名的成员函数，子类的同门成员会隐藏掉父类中所有同名函数</span><br><span class="hljs-comment">//如果想访问到父类中被隐藏的同名函数，需加作用域</span><br>son.Base::<span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名的成员函数，加上作用域可以访问到父类中同名的函数</li></ol><h2 id="1-6继承同名静态成员处理方式"><a href="#1-6继承同名静态成员处理方式" class="headerlink" title="1.6继承同名静态成员处理方式"></a>1.6继承同名静态成员处理方式</h2><p>问题：<br>继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类成员 <strong>直接访问即可</strong></li><li>访问父类成员 <strong>需要加上作用域</strong></li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//继承中的同名静态成员处理方式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - Static void func()&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - Static void func(int a)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m_A; <span class="hljs-comment">//类内声明，类外初始化</span><br>&#125;;<br><span class="hljs-keyword">int</span> Base::m_A = <span class="hljs-number">100</span>;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son - Static void func()&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><span class="hljs-keyword">int</span> Son::m_A = <span class="hljs-number">200</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、通过对象访问</span><br>Son son;<br>cout &lt;&lt; <span class="hljs-string">&quot;通过对象访问&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son下的 m_A=&quot;</span> &lt;&lt; son.m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base下的 m_A=&quot;</span> &lt;&lt; son.Base::m_A &lt;&lt; endl;<br><span class="hljs-comment">//2、通过类名访问</span><br>cout &lt;&lt; <span class="hljs-string">&quot;通过类名访问&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son下的m_A=&quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;<br><span class="hljs-comment">//第一个;;代表通过类名方式访问  第二个::代表访问父类作用域下</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Base下的m_A=&quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;<br><br><span class="hljs-comment">//1、通过对象访问</span><br>son.<span class="hljs-built_in">func</span>();<br>son.Base::<span class="hljs-built_in">func</span>();<br><span class="hljs-comment">//2、通过类名访问</span><br>Son::<span class="hljs-built_in">func</span>();<br>Son::Base::<span class="hljs-built_in">func</span>();<br><br><span class="hljs-comment">//子类出现和父类同名的静态成员函数，也会隐藏父类中所有同名成员函数</span><br><span class="hljs-comment">//如果想访问父类中被隐藏同名函数,需要加作用域</span><br>Son::Base::<span class="hljs-built_in">func</span>(<span class="hljs-number">100</span>);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>总结：<br>同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式(通过对象 和 通过类名)</p><h2 id="1-7多继承语法"><a href="#1-7多继承语法" class="headerlink" title="1.7多继承语法"></a>1.7多继承语法</h2><p>C++允许一个类继承多个类<br>语法：<code>class 子类:继承方式 父类1,继承方式 父类2...</code><br>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><blockquote><p>C++实际开发过程中不建议使用多继承</p></blockquote><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">//多继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base1</span>()<br>&#123;<br>m_A = <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base2</span>()<br>&#123;<br>m_A = <span class="hljs-number">200</span>;<br>&#125;<br><span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><span class="hljs-comment">//子类Base继承 Base1和Base2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span>:</span><span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>()<br>&#123;<br>m_C = <span class="hljs-number">300</span>;<br>m_D = <span class="hljs-number">400</span>;<br>&#125;<br><span class="hljs-keyword">int</span> m_C;<br><span class="hljs-keyword">int</span> m_D;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Base base;<br>cout &lt;&lt; <span class="hljs-string">&quot;sizeof Base=&quot;</span> &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(base) &lt;&lt; endl;<br><br><span class="hljs-comment">//当父类中出现同名成员，需要加作用域区分</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Base1::m_A=&quot;</span> &lt;&lt; base.Base1::m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base2::m_A=&quot;</span> &lt;&lt; base.Base2::m_A &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><blockquote><p>总结：多继承中如果父类中出现了同名情况，子类使用时要加作用域区分</p></blockquote><h2 id="1-8菱形继承"><a href="#1-8菱形继承" class="headerlink" title="1.8菱形继承"></a>1.8菱形继承</h2><p>菱形继承概念：<br>两个派生类继承同一个基类，又有某个类同时继承两个派生类，这种继承被称为菱形继承，或者砖石继承。</p><p>典型的菱形继承案例：<br><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF.jpg" alt="菱形继承"></p><p>菱形继承问题：</p><ol><li>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</li><li>草泥马继承自动物的数据继承了两份，其中我们应该清楚，这份数据只需要一份就可以了。</li></ol><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//动物类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//利用虚继承 解决菱形继承的问题</span><br><span class="hljs-comment">//继承之前 加上virtual关键字 变为虚继承</span><br><span class="hljs-comment">//Animal类称为 虚基类</span><br><span class="hljs-comment">//羊类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span>:</span><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br>&#125;;<br><br><span class="hljs-comment">//驼类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tuo</span>:</span><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br>&#125;;<br><br><span class="hljs-comment">//羊驼类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SheepTuo</span>:</span><span class="hljs-keyword">public</span> Sheep,<span class="hljs-keyword">public</span> Tuo<br>&#123;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SheepTuo sheeptuo;<br>sheeptuo.Sheep::m_Age = <span class="hljs-number">18</span>;<br>sheeptuo.Tuo::m_Age = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//当菱形继承，两个父类拥有相同数据，需要加以作用域区分</span><br>cout &lt;&lt; <span class="hljs-string">&quot;sheeptuo.Sheep::m_Age=&quot;</span> &lt;&lt; sheeptuo.Sheep::m_Age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;sheeptuo.Tuo::m_Age=&quot;</span> &lt;&lt; sheeptuo.Tuo::m_Age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;sheeptuo.m_Age=&quot;</span> &lt;&lt; sheeptuo.m_Age &lt;&lt; endl;<br><br><span class="hljs-comment">//这份数据我们知道 只有有一份就可以，菱形继承导致数据有两份，资源浪费</span><br><span class="hljs-comment">//使用开发者工具，cl /d1 reportSingleClassLayoutSheepTuo &quot;08 菱形继承.cpp&quot;</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言基础 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  1、find搜索</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文件的查找"><a href="#1-文件的查找" class="headerlink" title="1.文件的查找"></a>1.文件的查找</h1><h1 id="1-1按文件属性查找"><a href="#1-1按文件属性查找" class="headerlink" title="1.1按文件属性查找:"></a>1.1按文件属性查找:</h1><ul><li><p>文件名:find + 查找的目录 + -name + “文件的名字” </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">find ~ -name &quot;test.c&quot; <br>find ~ -name &quot;*.c&quot;    #*通配符  ~表示家目录   /home/salt<br></code></pre></td></tr></table></figure></li><li><p>文件大小: find + 查找目录 + -size + +10k</p></li><li><p>size默认单位：512B–》0.5k–》一个扇区的大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">说明: +表示大于 -表示小于 k为小写 M为大写</span><br>    find ~ -size +10k   #文件&gt;10k   <br>    find ~ -size -10k   #文件&lt;10k<br>    find ~ -size  +10K -size -100k  #10k&lt;文件&lt;100k<br></code></pre></td></tr></table></figure></li><li><p>文件类型: find + 查找目录 + -type + d/f/b/c/s/p/l</p></li></ul><table><thead><tr><th>文件类型</th><th>符号</th></tr></thead><tbody><tr><td>普通文件</td><td>- (在搜索是用f)</td></tr><tr><td>目录</td><td>d</td></tr><tr><td>链接符号</td><td>l</td></tr><tr><td>块设备</td><td>b</td></tr><tr><td>字符设备</td><td>c</td></tr><tr><td>socket文件</td><td>s</td></tr><tr><td>管道</td><td>p(mkfifo创建管道)</td></tr></tbody></table><ul><li>查找目录：find  目录  -maxdepth  层数  -type d<blockquote><p>depth 在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find ./ -maxdepth 2 -type d   #查找当前路径下2层的目录<br></code></pre></td></tr></table></figure><h4 id="2-按文件内容查找"><a href="#2-按文件内容查找" class="headerlink" title="2. 按文件内容查找:"></a>2. 按文件内容查找:</h4><p>grep -r “查找的内容” + 查找的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -r &quot;stdio.h&quot; ~   #在家目录下查找有stdio.h的文件<br></code></pre></td></tr></table></figure><h1 id="2-解压工具"><a href="#2-解压工具" class="headerlink" title="2.解压工具"></a>2.解压工具</h1><h2 id="2-1屌丝版"><a href="#2-1屌丝版" class="headerlink" title="2.1屌丝版"></a>2.1屌丝版</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. gzip 文件名  <br>撤销压缩使用：gunzip 文件名<br>不打包压缩,不保留原文件,不压缩目录,将文件压缩为.gz格式<br>2. bzip2 文件名<br>保留原文件：bzip -k 文件名<br>撤销压缩使用：bunzip2 文件名<br>不打包压缩,不压缩目录,将文件压缩为.bz2格式<br></code></pre></td></tr></table></figure><h2 id="2-2高富帅版"><a href="#2-2高富帅版" class="headerlink" title="2.2高富帅版"></a>2.2高富帅版</h2><ol><li>tar不使用z/j,该命令只是将文件或者目录进行打包操作</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">参数:<br>    c-- 创建  &gt;&gt;&gt;压缩<br>    x-- 释放  &gt;&gt;&gt;解压缩<br>    v-- 显示提示信息 --压缩解压缩 --可以对其进行省略<br>    f-- 指定压缩文件的名字<br>    <br>    z-- 使用屌丝版本gzip的方式进行文件压缩 --.gz<br>    j-- 使用吊丝版本bzip2的方式进行文件压缩 --.bz2<br>压缩：<br>    tar zcvf 生成压缩文件的名字(xxx.tar.gz) 要压缩的文件或者目录<br>    tar jcvf 生成压缩文件<br>解压缩：<br>    tar jxvf 压缩的名字(解压到当前目录)<br>    tar jxvf 压缩包名字 -C 压缩的目录<br></code></pre></td></tr></table></figure><ol start="2"><li>rar必须自己手动安装sudo apt-get install rar</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">参数：<br>    压缩:a<br>    解压缩:x<br>压缩:<br>    rar a 压缩包名(不需要带.rar会自动补全的) 需要压缩的文件或者目录<br>解压缩：<br>    rar x 压缩包文件名(xxx.rar)   //解压到当前目录下<br>    rar x 压缩包文件名(xxx.rar)  目录(test) //解压到指定的test目录下<br></code></pre></td></tr></table></figure><ol start="3"><li>zip必须自己手动安装sudo apt-get install zip</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">压缩:<br>    zip 压缩包的名字 压缩的文件或者目录<br>解压缩：<br>    unzip 压缩包的名字   //解压到当前目录下<br>    unzip 压缩包的名字 -d 解压的路径<br></code></pre></td></tr></table></figure><blockquote><p>总结：<br>   相同之处：<br>tar/rar/zip 参数 生成的压缩文件的名字  压缩的文件或者目录 –压缩的时候的语法<br>tar/rar/zip 参数 压缩包的名字 参数(rar没有参数) 解压缩目录 –解压语法</p></blockquote><h1 id="3-软件的安装"><a href="#3-软件的安装" class="headerlink" title="3.软件的安装"></a>3.软件的安装</h1><h2 id="3-1在线安装"><a href="#3-1在线安装" class="headerlink" title="3.1在线安装"></a>3.1在线安装</h2><ul><li>apt-get安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install update #更新软件列表<br>sudo apt-get insatll tree #安装<br>sudo apt-get remove  tree #卸载<br>sudo apt-get clear #清除软件的安装包 实际就是清除：/var/cache/apt/archives目录下的.deb文件<br>sudo apt-get install aptitude  #安装aptitude下载工具<br></code></pre></td></tr></table></figure><ul><li>aptitude安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo aptitude insatll tree  #安装<br>sudo aptitude remove  tree  #移除<br>sudo apt-get install aptitude  #重新安装<br>sudo aptitude show  tree #显示当前软件的状态<br></code></pre></td></tr></table></figure><h2 id="3-2deb包安装"><a href="#3-2deb包安装" class="headerlink" title="3.2deb包安装"></a>3.2deb包安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i xxx.deb #安装<br>sudo dpkg -r xxx     #卸载<br></code></pre></td></tr></table></figure><h2 id="3-3源码安装"><a href="#3-3源码安装" class="headerlink" title="3.3源码安装"></a>3.3源码安装</h2><p>这里我不常用，后期用到在进行补充。<br>有关Linux下的指令请参看：<br><a href="https://cloud.tencent.com/developer/article/1498762">https://cloud.tencent.com/developer/article/1498762</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  2、用户身份与文件权限</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1.用户管理"></a>1.用户管理</h1><ol><li>创建用户<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo adduser + 用户名（luffy）<br>sudo useradd -s /bin/bash -g itcast -d /home/itcast -m itcast<br>-s 指定新用户登陆时shell类型<br>-g 指定所属组，该组必须已经存在<br>-d 用户家目录<br>-m 用户家目录不存在时，自动创建该目录<br></code></pre></td></tr></table></figure></li><li>设置用户组<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo groupadd itcast<br></code></pre></td></tr></table></figure></li><li>删除用户<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo deluser + 用户名（luffy）<br>sudo userdel -r itcast<br>选项 -r 的作用是把用户的主目录一起删除<br></code></pre></td></tr></table></figure></li><li>切换用户<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su + 用户名（sanji）<br></code></pre></td></tr></table></figure></li><li>root用户<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo su<br></code></pre></td></tr></table></figure></li><li>设置密码<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo passwd + 用户名（luffy）<br>sudo passwd root<br>sudo passwd<br>设置root密码<br></code></pre></td></tr></table></figure></li><li>退出登录用户<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  4、gdb调试的使用</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-gdb"><a href="#1-gdb" class="headerlink" title="1.gdb"></a>1.gdb</h1><p> GDB（GNU Debugger）是GCC的调试工具。</p><h1 id="1-生成调试的可执行文件"><a href="#1-生成调试的可执行文件" class="headerlink" title="1.生成调试的可执行文件"></a>1.生成调试的可执行文件</h1><p>一般来说GDB主要调试的是C/C++的程序。要调试C/C++的程序，首先在编译时，我们必须要把调试信息加到可执行文件中。使用编译器（gcc/g++）的 -g 参数可以做到这一点。如：<br>     gcc -g hello.c -o hello<br>     g++ -g hello.cpp -o hello<br>     如果没有-g，你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当你用-g把调试信息加入之后，并成功编译目标代码以后，让我们来看看如何用gdb来调试他。</p><h1 id="2-启动gdb"><a href="#2-启动gdb" class="headerlink" title="2.启动gdb"></a>2.启动gdb</h1><ul><li>gdb 可执行程序<h1 id="3-查看源代码"><a href="#3-查看源代码" class="headerlink" title="3.查看源代码"></a>3.查看源代码</h1>list命令来打印程序的源代码，默认打印10行。list简写为l<blockquote><p>l  行号(函数名)<br>l  filename:行号(函数名)</p></blockquote></li></ul><h1 id="4-设置断点"><a href="#4-设置断点" class="headerlink" title="4.设置断点"></a>4.设置断点</h1><p>break 设置断点，可以简写为b<br>4.1、设置当前文件断点：</p><blockquote><p>b 行号(函数名)</p></blockquote><h1 id="5-设置指定文件断点"><a href="#5-设置指定文件断点" class="headerlink" title="5.设置指定文件断点"></a>5.设置指定文件断点</h1><blockquote><p>b filename:行号(函数名)</p></blockquote><h1 id="6-设置条件断点"><a href="#6-设置条件断点" class="headerlink" title="6.设置条件断点"></a>6.设置条件断点</h1><blockquote><p>b  文件名:行数  if  变量名 = 值</p></blockquote><h2 id="6-1删除断点"><a href="#6-1删除断点" class="headerlink" title="6.1删除断点"></a>6.1删除断点</h2><p> delete 设置断点，可以简写为d</p><blockquote><p>d 断点的编号<br>获取编号：info break   简写(i b)</p></blockquote><h2 id="6-2查看设置的断点"><a href="#6-2查看设置的断点" class="headerlink" title="6.2查看设置的断点"></a>6.2查看设置的断点</h2><blockquote><p>info break   简写(i b)</p></blockquote><h2 id="6-3开始-执行gdb调试"><a href="#6-3开始-执行gdb调试" class="headerlink" title="6.3开始 执行gdb调试"></a>6.3开始 执行gdb调试</h2><ul><li>执行一步操作：start</li><li>执行多步，直接停在断点处：c —- continue     —-直接停在断点位置</li></ul><h1 id="7-单步调试"><a href="#7-单步调试" class="headerlink" title="7.单步调试"></a>7.单步调试</h1><h2 id="7-1进入函数体内部："><a href="#7-1进入函数体内部：" class="headerlink" title="7.1进入函数体内部："></a>7.1进入函数体内部：</h2><p> s —- step(单步）—-可以进入函数体内部<br>        从函数体中跳过：finish</p><h2 id="7-2不进入函数体内部："><a href="#7-2不进入函数体内部：" class="headerlink" title="7.2不进入函数体内部："></a>7.2不进入函数体内部：</h2><p> n —- next(单步) —-跳过此函数体内部<br>        退出当前循环： until，可以简写为u</p><h1 id="8-查看运行时的数据"><a href="#8-查看运行时的数据" class="headerlink" title="8.查看运行时的数据"></a>8.查看运行时的数据</h1><p>-print 打印变量、字符串、表达式等的值，可简写为p</p><blockquote><p>p   变量名</p></blockquote><h1 id="9-查看变量的类型"><a href="#9-查看变量的类型" class="headerlink" title="9.查看变量的类型"></a>9.查看变量的类型</h1><blockquote><p>ptype   变量名</p></blockquote><h1 id="10-设置变量的值"><a href="#10-设置变量的值" class="headerlink" title="10.设置变量的值"></a>10.设置变量的值</h1><blockquote><p>set var 变量名=赋值</p></blockquote><h1 id="11-追踪变量"><a href="#11-追踪变量" class="headerlink" title="11.追踪变量"></a>11.追踪变量</h1><blockquote><ol><li>设置追踪变量<br>   display 变量</li><li>取消追踪变量<br>   undisplay 编号<pre><code>   获取编号：info display</code></pre></li></ol></blockquote><h1 id="12-退出gdb调试"><a href="#12-退出gdb调试" class="headerlink" title="12.退出gdb调试"></a>12.退出gdb调试</h1><blockquote><p>quit</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  5、Vim的使用与配置(初学必看)</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，是程序员常备的技能之一。简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">史上最全Vim快捷键键位图（入门到进阶）</a></p><h1 id="1-vi-Vim的使用"><a href="#1-vi-Vim的使用" class="headerlink" title="1.vi/Vim的使用"></a>1.vi/Vim的使用</h1><p>基本上 vi/vim 共分为三种模式，分别是命令模式，输入模式和末行模式。三种模式之间的切换参考下图：<br><img src="https://img-blog.csdnimg.cn/20200507002357404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>更多的使用参考：<a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a></p><h1 id="2-Vim打造IDE"><a href="#2-Vim打造IDE" class="headerlink" title="2.Vim打造IDE"></a>2.Vim打造IDE</h1><p>下面是我自己的使用的Vim配置：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br></pre></td><td class="code"><pre><code class="hljs julia">set sw=<span class="hljs-number">4</span><br>set ts=<span class="hljs-number">4</span><br>set et<br>set smarttab<br>set smartindent<br>set lbr<br>set fo+=mB<br>set sm<br>set selection=inclusive<br>set wildmenu<br>set mousemodel=popup<br><br>au FileType php setlocal dict+=~/.vim/dict/php_funclist.dict<br>au FileType css setlocal dict+=~/.vim/dict/css.dict<br>au FileType c setlocal dict+=~/.vim/dict/c.dict<br>au FileType cpp setlocal dict+=~/.vim/dict/cpp.dict<br>au FileType scale setlocal dict+=~/.vim/dict/scale.dict<br>au FileType javascript setlocal dict+=~/.vim/dict/javascript.dict<br>au FileType html setlocal dict+=~/.vim/dict/javascript.dict<br>au FileType html setlocal dica+=~/.vim/dict/css.dict<br><br><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;syntastic</span>相关<br><br><span class="hljs-keyword">let</span> g:syntastic_python_checkers=[&#x27;pylint&#x27;]<br><span class="hljs-keyword">let</span> g:syntastic_php_checkers=[&#x27;php&#x27;, &#x27;phpcs&#x27;, &#x27;phpmd&#x27;]<br><span class="hljs-string">&quot;golang</span><br><span class="hljs-string">&quot;Processing</span>... % (ctrl+c to stop)<br><span class="hljs-keyword">let</span> g:fencview_autodetect=<span class="hljs-number">0</span><br>set rtp+=$GOROOT/misc/vim<br><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot; 显示相关  </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">syntax on</span><br><span class="hljs-string">set cul &quot;高亮光标所在行</span><br><span class="hljs-string">set cuc</span><br><span class="hljs-string">set shortmess=atI   &quot; 启动的时候不显示那个援助乌干达儿童的提示  </span><br><span class="hljs-string">set go=             &quot; 不要图形按钮  </span><br><span class="hljs-string">&quot;color desert     &quot; 设置背景主题  </span><br><span class="hljs-string">color ron     &quot; 设置背景主题  </span><br><span class="hljs-string">&quot;color torte     &quot; 设置背景主题  </span><br><span class="hljs-string">&quot;set guifont=Courier_New:h10:cANSI   &quot; 设置字体  </span><br><span class="hljs-string">&quot;autocmd InsertLeave * se nocul  &quot; 用浅色高亮当前行  </span><br><span class="hljs-string">autocmd InsertEnter * se cul    &quot; 用浅色高亮当前行  </span><br><span class="hljs-string">set ruler           &quot; 显示标尺  </span><br><span class="hljs-string">set showcmd         &quot; 输入的命令显示出来，看的清楚些  </span><br><span class="hljs-string">&quot;set whichwrap+=&lt;,&gt;,h,l   &quot; 允许backspace和光标键跨越行边界(不建议)  </span><br><span class="hljs-string">set scrolloff=3     &quot; 光标移动到buffer的顶部和底部时保持3行距离  </span><br><span class="hljs-string">set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\&quot;%d/%m/%y\ -\ %H:%M\&quot;)&#125;   &quot;状态行显示的内容  </span><br><span class="hljs-string">set laststatus=2    &quot; 启动显示状态行(1),总是显示状态行(2)  </span><br><span class="hljs-string">&quot;set foldenable      &quot; 允许折叠  </span><br><span class="hljs-string">&quot;&quot;set foldmethod=manual   &quot; 手动折叠  </span><br><span class="hljs-string">set nocompatible  &quot;去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限  </span><br><span class="hljs-string">&quot; 显示中文帮助</span><br><span class="hljs-string">if version &gt;= 603</span><br><span class="hljs-string">set helplang=cn</span><br><span class="hljs-string">set encoding=utf-8</span><br><span class="hljs-string">endif</span><br><span class="hljs-string">&quot; 自动缩进</span><br><span class="hljs-string">set autoindent</span><br><span class="hljs-string">set cindent</span><br><span class="hljs-string">&quot; Tab键的宽度</span><br><span class="hljs-string">set tabstop=4</span><br><span class="hljs-string">&quot; 统一缩进为4</span><br><span class="hljs-string">set softtabstop=4</span><br><span class="hljs-string">set shiftwidth=4</span><br><span class="hljs-string">&quot; 使用空格代替制表符</span><br><span class="hljs-string">set expandtab</span><br><span class="hljs-string">&quot; 在行和段开始处使用制表符</span><br><span class="hljs-string">set smarttab</span><br><span class="hljs-string">&quot; 显示行号</span><br><span class="hljs-string">set number</span><br><span class="hljs-string">&quot; 历史记录数</span><br><span class="hljs-string">set history=1000</span><br><span class="hljs-string">&quot;搜索逐字符高亮</span><br><span class="hljs-string">set hlsearch</span><br><span class="hljs-string">set incsearch</span><br><span class="hljs-string">&quot;语言设置</span><br><span class="hljs-string">set langmenu=zh_CN.UTF-8</span><br><span class="hljs-string">set helplang=cn</span><br><span class="hljs-string">&quot; 总是显示状态行</span><br><span class="hljs-string">set cmdheight=2</span><br><span class="hljs-string">&quot; 侦测文件类型</span><br><span class="hljs-string">filetype on</span><br><span class="hljs-string">&quot; 载入文件类型插件</span><br><span class="hljs-string">filetype plugin on</span><br><span class="hljs-string">&quot; 为特定文件类型载入相关缩进文件</span><br><span class="hljs-string">filetype indent on</span><br><span class="hljs-string">&quot; 保存全局变量</span><br><span class="hljs-string">set viminfo+=!</span><br><span class="hljs-string">&quot; 带有如下符号的单词不要被换行分割</span><br><span class="hljs-string">set iskeyword+=_,$,@,%,#,-</span><br><span class="hljs-string">&quot; 字符间插入的像素行数目</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;markdown配置</span><br><span class="hljs-string">au BufRead,BufNewFile *.&#123;md,mdown,mkd,mkdn,markdown,mdwn&#125;   set filetype=mkd</span><br><span class="hljs-string">au BufRead,BufNewFile *.&#123;go&#125;   set filetype=go</span><br><span class="hljs-string">au BufRead,BufNewFile *.&#123;js&#125;   set filetype=javascript</span><br><span class="hljs-string">&quot;rkdown to HTML  </span><br><span class="hljs-string">nmap md :!~/.vim/markdown.pl % &gt; %.html &lt;CR&gt;&lt;CR&gt;</span><br><span class="hljs-string">nmap fi :!firefox %.html &amp; &lt;CR&gt;&lt;CR&gt;</span><br><span class="hljs-string">nmap \ \cc</span><br><span class="hljs-string">vmap \ \cc</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;将tab替换为空格</span><br><span class="hljs-string">nmap tt :%s/\t/    /g&lt;CR&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>新文件标题<br><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;新建.c,.h,.sh,.java文件，自动插入文件头 </span><br><span class="hljs-string">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.rb,*.java,*.py exec &quot;</span>:call SetTitle()<span class="hljs-string">&quot; </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;定义函数SetTitle，自动插入文件头 </span><br><span class="hljs-string">func SetTitle() </span><br><span class="hljs-string">&quot;</span>如果文件类型为.sh文件 <br><span class="hljs-keyword">if</span> &amp;filetype == &#x27;sh&#x27; <br>call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\#!/bin/bash&quot;</span>) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;&quot;</span>) <br>    <span class="hljs-keyword">elseif</span> &amp;filetype == &#x27;python&#x27;<br>        call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;#!/usr/bin/env python&quot;</span>)<br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-string">&quot;# coding=utf-8&quot;</span>)<br>    call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>) <br><br>    <span class="hljs-keyword">elseif</span> &amp;filetype == &#x27;ruby&#x27;<br>        call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;#!/usr/bin/env ruby&quot;</span>)<br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-string">&quot;# encoding: utf-8&quot;</span>)<br>    call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-string">&quot;    elseif &amp;filetype == &#x27;mkd&#x27;</span><br><span class="hljs-string">&quot;</span>        call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;&lt;head&gt;&lt;meta charset=\&quot;UTF-8\&quot;&gt;&lt;/head&gt;&quot;</span>)<br><span class="hljs-keyword">else</span> <br>call setline(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;/*************************************************************************&quot;</span>) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;&gt; File Name: &quot;</span>.expand(<span class="hljs-string">&quot;%&quot;</span>)) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&gt; Author: &quot;</span>) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&gt; Mail: &quot;</span>) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;&gt; Created Time: &quot;</span>.strftime(<span class="hljs-string">&quot;%c&quot;</span>)) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;  &gt; Description:&quot;</span>) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot; ************************************************************************/&quot;</span>) <br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;&quot;</span>)<br>endif<br><span class="hljs-keyword">if</span> expand(<span class="hljs-string">&quot;%:e&quot;</span>) == &#x27;cpp&#x27;<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;#include&lt;iostream&gt;&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;using namespace std;&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">9</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">10</span>,<span class="hljs-string">&quot;int main()&quot;</span>)<br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">11</span>,<span class="hljs-string">&quot;&#123;&quot;</span>)<br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">12</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">13</span>,<span class="hljs-string">&quot;  return 0;&quot;</span>)<br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">14</span>,<span class="hljs-string">&quot;&#125;&quot;</span>)<br>endif<br><span class="hljs-keyword">if</span> &amp;filetype == <span class="hljs-string">&#x27;c&#x27;</span><br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;#include&lt;stdio.h&gt;&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">9</span>, <span class="hljs-string">&quot;int main(int argc,char *argv[])&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">10</span>, <span class="hljs-string">&quot;&#123;&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">11</span>, <span class="hljs-string">&quot;&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">12</span>, <span class="hljs-string">&quot;return 0;&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">13</span>, <span class="hljs-string">&quot;&#125;&quot;</span>)<br>endif<br><span class="hljs-keyword">if</span> expand(<span class="hljs-string">&quot;%:e&quot;</span>) == <span class="hljs-string">&#x27;h&#x27;</span><br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;#ifndef _&quot;</span>.toupper(expand(<span class="hljs-string">&quot;%:r&quot;</span>)).<span class="hljs-string">&quot;_H&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;#define _&quot;</span>.toupper(expand(<span class="hljs-string">&quot;%:r&quot;</span>)).<span class="hljs-string">&quot;_H&quot;</span>)<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">9</span>, <span class="hljs-string">&quot;#endif&quot;</span>)<br>endif<br><span class="hljs-keyword">if</span> &amp;filetype == &#x27;java&#x27;<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>,<span class="hljs-string">&quot;public class &quot;</span>.expand(<span class="hljs-string">&quot;%:r&quot;</span>))<br>call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>,<span class="hljs-string">&quot;&quot;</span>)<br>endif<br><span class="hljs-string">&quot;新建文件后，自动定位到文件末尾</span><br><span class="hljs-string">endfunc </span><br><span class="hljs-string">autocmd BufNewFile * normal G</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;键盘命令</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">:nmap &lt;silent&gt; &lt;F9&gt; &lt;ESC&gt;:Tlist&lt;RETURN&gt;</span><br><span class="hljs-string">&quot; shift tab pages</span><br><span class="hljs-string">map &lt;S-Left&gt; :tabp&lt;CR&gt;</span><br><span class="hljs-string">map &lt;S-Right&gt; :tabn&lt;CR&gt;</span><br><span class="hljs-string">map! &lt;C-Z&gt; &lt;Esc&gt;zzi</span><br><span class="hljs-string">map! &lt;C-O&gt; &lt;C-Y&gt;,</span><br><span class="hljs-string">map &lt;C-A&gt; ggVG$&quot;+y</span><br><span class="hljs-string">map &lt;Esc&gt;&lt;Esc&gt; :w&lt;CR&gt;</span><br><span class="hljs-string">map &lt;F12&gt; gg=G</span><br><span class="hljs-string">map &lt;C-w&gt; &lt;C-w&gt;w</span><br><span class="hljs-string">imap &lt;C-k&gt; &lt;C-y&gt;,</span><br><span class="hljs-string">imap &lt;C-t&gt; &lt;C-q&gt;&lt;TAB&gt;</span><br><span class="hljs-string">imap &lt;C-j&gt; &lt;ESC&gt;</span><br><span class="hljs-string">&quot; 选中状态下 Ctrl+c 复制</span><br><span class="hljs-string">&quot;map &lt;C-v&gt; &quot;*pa</span><br><span class="hljs-string">imap &lt;C-v&gt; &lt;Esc&gt;&quot;*pa</span><br><span class="hljs-string">imap &lt;C-a&gt; &lt;Esc&gt;^</span><br><span class="hljs-string">imap &lt;C-e&gt; &lt;Esc&gt;$</span><br><span class="hljs-string">vmap &lt;C-c&gt; &quot;+y</span><br><span class="hljs-string">set mouse=v</span><br><span class="hljs-string">&quot;set clipboard=unnamed</span><br><span class="hljs-string">&quot;去空行  </span><br><span class="hljs-string">nnoremap &lt;F2&gt; :g/^\s*$/d&lt;CR&gt; </span><br><span class="hljs-string">&quot;比较文件  </span><br><span class="hljs-string">nnoremap &lt;C-F2&gt; :vert diffsplit </span><br><span class="hljs-string">&quot;nnoremap &lt;Leader&gt;fu :CtrlPFunky&lt;Cr&gt;</span><br><span class="hljs-string">&quot;nnoremap &lt;C-n&gt; :CtrlPFunky&lt;Cr&gt;</span><br><span class="hljs-string">&quot;列出当前目录文件  </span><br><span class="hljs-string">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="hljs-string">imap &lt;F3&gt; &lt;ESC&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="hljs-string">&quot;打开树状文件目录  </span><br><span class="hljs-string">map &lt;C-F3&gt; \be  </span><br><span class="hljs-string">:autocmd BufRead,BufNewFile *.dot map &lt;F5&gt; :w&lt;CR&gt;:!dot -Tjpg -o %&lt;.jpg % &amp;&amp; eog %&lt;.jpg  &lt;CR&gt;&lt;CR&gt; &amp;&amp; exec &quot;redr!&quot;</span><br><span class="hljs-string">&quot;C，C++ 按F5编译运行</span><br><span class="hljs-string">map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;</span><br><span class="hljs-string">func! CompileRunGcc()</span><br><span class="hljs-string">exec &quot;w&quot;</span><br><span class="hljs-string">if &amp;filetype == &#x27;c&#x27;</span><br><span class="hljs-string">exec &quot;!g++ % -o %&lt;&quot;</span><br><span class="hljs-string">exec &quot;!time ./%&lt;&quot;</span><br><span class="hljs-string">elseif &amp;filetype == &#x27;cpp&#x27;</span><br><span class="hljs-string">exec &quot;!g++ % -std=c++11 -o %&lt;&quot;</span><br><span class="hljs-string">exec &quot;!time ./%&lt;&quot;</span><br><span class="hljs-string">elseif &amp;filetype == &#x27;java&#x27; </span><br><span class="hljs-string">exec &quot;!javac %&quot; </span><br><span class="hljs-string">exec &quot;!time java %&lt;&quot;</span><br><span class="hljs-string">elseif &amp;filetype == &#x27;sh&#x27;</span><br><span class="hljs-string">:!time bash %</span><br><span class="hljs-string">elseif &amp;filetype == &#x27;python&#x27;</span><br><span class="hljs-string">exec &quot;!time python2.7 %&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;html&#x27;</span><br><span class="hljs-string">        exec &quot;!firefox % &amp;&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;go&#x27;</span><br><span class="hljs-string">&quot;        exec &quot;!go build %&lt;&quot;</span><br><span class="hljs-string">        exec &quot;!time go run %&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;mkd&#x27;</span><br><span class="hljs-string">        exec &quot;!~/.vim/markdown.pl % &gt; %.html &amp;&quot;</span><br><span class="hljs-string">        exec &quot;!firefox %.html &amp;&quot;</span><br><span class="hljs-string">endif</span><br><span class="hljs-string">endfunc</span><br><span class="hljs-string">&quot;C,C++的调试</span><br><span class="hljs-string">map &lt;F8&gt; :call Rungdb()&lt;CR&gt;</span><br><span class="hljs-string">func! Rungdb()</span><br><span class="hljs-string">exec &quot;w&quot;</span><br><span class="hljs-string">exec &quot;!g++ % -std=c++11 -g -o %&lt;&quot;</span><br><span class="hljs-string">exec &quot;!gdb ./%&lt;&quot;</span><br><span class="hljs-string">endfunc</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;代码格式优化化</span><br><span class="hljs-string"></span><br><span class="hljs-string">map &lt;F6&gt; :call FormartSrc()&lt;CR&gt;&lt;CR&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;定义FormartSrc()</span><br><span class="hljs-string">func FormartSrc()</span><br><span class="hljs-string">    exec &quot;w&quot;</span><br><span class="hljs-string">    if &amp;filetype == &#x27;c&#x27;</span><br><span class="hljs-string">        exec &quot;!astyle --style=ansi -a --suffix=none %&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;cpp&#x27; || &amp;filetype == &#x27;hpp&#x27;</span><br><span class="hljs-string">        exec &quot;r !astyle --style=ansi --one-line=keep-statements -a --suffix=none %&gt; /dev/null 2&gt;&amp;1&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;perl&#x27;</span><br><span class="hljs-string">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;py&#x27;||&amp;filetype == &#x27;python&#x27;</span><br><span class="hljs-string">        exec &quot;r !autopep8 -i --aggressive %&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;java&#x27;</span><br><span class="hljs-string">        exec &quot;!astyle --style=java --suffix=none %&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;jsp&#x27;</span><br><span class="hljs-string">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;xml&#x27;</span><br><span class="hljs-string">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">        exec &quot;normal gg=G&quot;</span><br><span class="hljs-string">        return</span><br><span class="hljs-string">    endif</span><br><span class="hljs-string">    exec &quot;e! %&quot;</span><br><span class="hljs-string">endfunc</span><br><span class="hljs-string">&quot;结束定义FormartSrc</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;实用设置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> has(<span class="hljs-string">&quot;autocmd&quot;</span>)<br>      autocmd BufReadPost *<br>          \ <span class="hljs-keyword">if</span> line(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="hljs-number">0</span> &amp;&amp; line(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &lt;= line(<span class="hljs-string">&quot;$&quot;</span>) |<br>          \   exe <span class="hljs-string">&quot;normal g`\&quot;&quot;</span> |<br>          \ endif<br>endif<br><span class="hljs-string">&quot;当打开vim且没有文件时自动打开NERDTree</span><br><span class="hljs-string">autocmd vimenter * if !argc() | NERDTree | endif</span><br><span class="hljs-string">&quot;</span> 只剩 NERDTree时自动关闭<br>autocmd bufenter * <span class="hljs-keyword">if</span> (winnr(<span class="hljs-string">&quot;$&quot;</span>) == <span class="hljs-number">1</span> &amp;&amp; exists(<span class="hljs-string">&quot;b:NERDTreeType&quot;</span>) &amp;&amp; b:NERDTreeType == <span class="hljs-string">&quot;primary&quot;</span>) | q | endif<br><br><span class="hljs-string">&quot; 设置当文件被改动时自动载入</span><br><span class="hljs-string">set autoread</span><br><span class="hljs-string">&quot;</span> quickfix模式<br>autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;<br><span class="hljs-string">&quot;代码补全 </span><br><span class="hljs-string">set completeopt=preview,menu </span><br><span class="hljs-string">&quot;</span>允许插件  <br><span class="hljs-string">&quot;filetype plugin on</span><br><span class="hljs-string">&quot;</span>共享剪贴板  <br><span class="hljs-string">&quot;set clipboard+=unnamed </span><br><span class="hljs-string">&quot;</span>自动保存<br>set autowrite<br><span class="hljs-string">&quot;set ruler                   &quot;</span> 打开状态栏标尺<br><span class="hljs-string">&quot;set cursorline              &quot;</span> 突出显示当前行<br>set magic                   <span class="hljs-string">&quot; 设置魔术</span><br><span class="hljs-string">set guioptions-=T           &quot;</span> 隐藏工具栏<br>set guioptions-=m           <span class="hljs-string">&quot; 隐藏菜单栏</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;set foldcolumn=0</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;set foldmethod=indent </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;set foldlevel=3 </span><br><span class="hljs-string">&quot;</span> 不要使用vi的键盘模式，而是vim自己的<br>set nocompatible<br><span class="hljs-string">&quot; 去掉输入错误的提示声音</span><br><span class="hljs-string">set noeb</span><br><span class="hljs-string">&quot;</span> 在处理未保存或只读文件的时候，弹出确认<br>set confirm<br><span class="hljs-string">&quot;禁止生成临时文件</span><br><span class="hljs-string">set nobackup</span><br><span class="hljs-string">set noswapfile</span><br><span class="hljs-string">&quot;</span>搜索忽略大小写<br>set ignorecase<br><br><br><br><br>set linespace=<span class="hljs-number">0</span><br><span class="hljs-string">&quot; 增强模式中的命令行自动完成操作</span><br><span class="hljs-string">set wildmenu</span><br><span class="hljs-string">&quot;</span> 使回格键（backspace）正常处理indent, eol, start等<br>set backspace=<span class="hljs-number">2</span><br><span class="hljs-string">&quot; 允许backspace和光标键跨越行边界</span><br><span class="hljs-string">set whichwrap+=&lt;,&gt;,h,l</span><br><span class="hljs-string">&quot;</span> 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）<br>set mouse=a<br>set selection=exclusive<br>set selectmode=mouse,key<br><span class="hljs-string">&quot; 通过使用: commands命令，告诉我们文件的哪一行被改变过</span><br><span class="hljs-string">set report=0</span><br><span class="hljs-string">&quot;</span> 在被分割的窗口间显示空白，便于阅读<br>set fillchars=vert:\ ,stl:\ ,stlnc:\<br><span class="hljs-string">&quot; 高亮显示匹配的括号</span><br><span class="hljs-string">set showmatch</span><br><span class="hljs-string">&quot;</span> 匹配括号高亮的时间（单位是十分之一秒）<br>set matchtime=<span class="hljs-number">1</span><br><span class="hljs-string">&quot; 光标移动到buffer的顶部和底部时保持3行距离</span><br><span class="hljs-string">set scrolloff=3</span><br><span class="hljs-string">&quot;</span> 为C程序提供自动缩进<br><span class="hljs-string">&quot;自动补全</span><br><span class="hljs-string">:inoremap ( ()&lt;ESC&gt;i</span><br><span class="hljs-string">:inoremap ) &lt;c-r&gt;=ClosePair(&#x27;)&#x27;)&lt;CR&gt;</span><br><span class="hljs-string">:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class="hljs-string">:inoremap &#125; &lt;c-r&gt;=ClosePair(&#x27;&#125;&#x27;)&lt;CR&gt;</span><br><span class="hljs-string">:inoremap [ []&lt;ESC&gt;i</span><br><span class="hljs-string">:inoremap ] &lt;c-r&gt;=ClosePair(&#x27;]&#x27;)&lt;CR&gt;</span><br><span class="hljs-string">:inoremap &quot;</span> <span class="hljs-string">&quot;&quot;</span>&lt;ESC&gt;i<br>:inoremap <span class="hljs-string">&#x27; &#x27;</span>&#x27;&lt;ESC&gt;i<br><span class="hljs-keyword">function</span>! ClosePair(char)<br><span class="hljs-keyword">if</span> getline(<span class="hljs-string">&#x27;.&#x27;</span>)[col(<span class="hljs-string">&#x27;.&#x27;</span>) - <span class="hljs-number">1</span>] == a:char<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\&lt;Right&gt;&quot;</span><br>    <span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> a:char<br>endif<br>endfunction<br>filetype plugin indent on <br><span class="hljs-string">&quot;打开文件类型检测, 加了这句才可以用智能补全</span><br><span class="hljs-string">set completeopt=longest,menu</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot; CTags的设定  </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-keyword">let</span> Tlist_Sort_Type = <span class="hljs-string">&quot;name&quot;</span>    <span class="hljs-string">&quot; 按照名称排序  </span><br><span class="hljs-string">let Tlist_Use_Right_Window = 1  &quot;</span> 在右侧显示窗口  <br><span class="hljs-keyword">let</span> Tlist_Compart_Format = <span class="hljs-number">1</span>    <span class="hljs-string">&quot; 压缩方式  </span><br><span class="hljs-string">let Tlist_Exist_OnlyWindow = 1  &quot;</span> 如果只有一个buffer，kill窗口也kill掉buffer  <br><span class="hljs-string">&quot;&quot;let</span> Tlist_File_Fold_Auto_Close = <span class="hljs-number">0</span>  <span class="hljs-string">&quot; 不要关闭其他文件的tags  </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;let Tlist_Enable_Fold_Column = 0    &quot;</span> 不要显示折叠树  <br><span class="hljs-string">&quot;let Tlist_Show_One_File=1            &quot;</span>不同时显示多个文件的tag，只显示当前文件的<br><span class="hljs-string">&quot;设置tags  </span><br><span class="hljs-string">set tags=tags;  </span><br><span class="hljs-string">set autochdir </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;其他东东</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;默认打开Taglist </span><br><span class="hljs-string">let Tlist_Auto_Open=0 </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot; </span><br><span class="hljs-string">&quot; Tag list (ctags) </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot; </span><br><span class="hljs-string">let Tlist_Ctags_Cmd = &#x27;/usr/local/bin/ctags&#x27; </span><br><span class="hljs-string">let Tlist_Show_One_File = 1 &quot;不同时显示多个文件的tag，只显示当前文件的 </span><br><span class="hljs-string">let Tlist_File_Fold_Auto_Close = 1</span><br><span class="hljs-string">let Tlist_Exit_OnlyWindow = 1 &quot;如果taglist窗口是最后一个窗口，则退出vim </span><br><span class="hljs-string">let Tlist_Use_Right_Window = 1 &quot;在右侧窗口中显示taglist窗口</span><br><span class="hljs-string">&quot; minibufexpl插件的一般设置</span><br><span class="hljs-string">let g:miniBufExplMapWindowNavVim = 1</span><br><span class="hljs-string">let g:miniBufExplMapWindowNavArrows = 1</span><br><span class="hljs-string">let g:miniBufExplMapCTabSwitchBufs = 1</span><br><span class="hljs-string">let g:miniBufExplModSelTarget = 1  </span><br><span class="hljs-string">nmap tl :Tlist&lt;cr&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;python补全</span><br><span class="hljs-string">let g:pydiction_location = &#x27;~/.vim/after/complete-dict&#x27;</span><br><span class="hljs-string">let g:pydiction_menu_height = 20</span><br><span class="hljs-string">let Tlist_Ctags_Cmd=&#x27;/usr/local/bin/ctags&#x27;</span><br><span class="hljs-string">let g:miniBufExplMapWindowNavVim = 1</span><br><span class="hljs-string">let g:miniBufExplMapWindowNavArrows = 1</span><br><span class="hljs-string">let g:miniBufExplMapCTabSwitchBufs = 1</span><br><span class="hljs-string">let g:miniBufExplModSelTarget = 1</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">set iskeyword+=.</span><br><span class="hljs-string">set termencoding=utf-8</span><br><span class="hljs-string">set encoding=utf8</span><br><span class="hljs-string">set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030</span><br><span class="hljs-string"></span><br><span class="hljs-string">autocmd FileType python set omnifunc=pythoncomplete#Complete</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;set nocompatible               &quot; be iMproved</span><br><span class="hljs-string">&quot;filetype off                   &quot; required!</span><br><span class="hljs-string"></span><br><span class="hljs-string">set rtp+=~/.vim/bundle/vundle/</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;Bundle &#x27;FredKSchott/CoVim&#x27;</span><br><span class="hljs-string">&quot;Bundle &#x27;djangojump&#x27;</span><br><span class="hljs-string">&quot; ...</span><br><span class="hljs-string">let g:html_indent_inctags = &quot;html,body,head,tbody&quot;</span><br><span class="hljs-string">let g:html_indent_script1 = &quot;inc&quot;</span><br><span class="hljs-string">let g:html_indent_style1 = &quot;inc&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">filetype plugin indent on     &quot; required!</span><br><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;ctrlp设置</span><br><span class="hljs-string">&quot;</span><br><span class="hljs-string">set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.png,*.jpg,*.gif     &quot; MacOSX/Linux</span><br><span class="hljs-string">set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.pyc,*.png,*.jpg,*.gif  &quot; Windows</span><br><span class="hljs-string"></span><br><span class="hljs-string">let g:ctrlp_custom_ignore = &#x27;\v[\/]\.(git|hg|svn)$&#x27;</span><br><span class="hljs-string">let g:ctrlp_custom_ignore = &#x27;\v\.(exe|so|dll)$&#x27;</span><br><span class="hljs-string">let g:ctrlp_extensions = [&#x27;funky&#x27;]</span><br><span class="hljs-string"></span><br><span class="hljs-string">let NERDTreeIgnore=[&#x27;\.pyc&#x27;]</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h1 id="3-vimrc文件"><a href="#3-vimrc文件" class="headerlink" title="3..vimrc文件"></a>3..vimrc文件</h1><p>复制上面的vim配置过程，在命令行输入：<code>vim .vimrc</code>进行粘贴保存。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  6、gcc编译器</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p><code>GCC</code> 原名为 <code>GNU C </code>语言编译器<code>（GNU C Compiler）</code>，因为它原本只能处理 C语言。<code>GCC </code>很快地扩展，变得可处理 <code>C++</code>。后来又扩展能够支持更多编程语言，所以改名GNU编译器套件<code>（GNU Compiler Collection）</code>。</p><h1 id="2-gcc主要特征"><a href="#2-gcc主要特征" class="headerlink" title="2.gcc主要特征"></a>2.gcc主要特征</h1><ol><li>gcc是一个可移植的编译器，支持多种硬件平台   </li><li>gcc不仅仅是个本地编译器，它还可以跨平台交叉编译    </li><li>gcc是有多种语言前端，用于解析不同的语言   </li><li>gcc是按模块化设计的，可以加入新语言和新CPU架构的支持   </li><li>gcc是自由软件   <h1 id="3-gcc编译的过程"><a href="#3-gcc编译的过程" class="headerlink" title="3.gcc编译的过程"></a>3.gcc编译的过程</h1>gcc编译过程的流程：<br><img src="https://img-blog.csdnimg.cn/20200923003744157.png#pic_center" alt="gcc编译过程"></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">编译的总过程 gcc hello.c -o app <br><span class="hljs-number">1.</span> 预处理  gcc -Wall -E hello.c -o hello.i<br><span class="hljs-number">2.</span> 编译    gcc -Wall -S hello.i -o hello.s<br><span class="hljs-number">3.</span> 汇编    gcc -Wall -c hello.s -o hello.o<br><span class="hljs-number">4.</span> 链接    gcc -Wall -g -o hello<br></code></pre></td></tr></table></figure><h1 id="4-gcc常用的编译选项"><a href="#4-gcc常用的编译选项" class="headerlink" title="4.gcc常用的编译选项"></a>4.gcc常用的编译选项</h1><table><thead><tr><th>选项</th><th align="left">作用</th><th>生成文件</th></tr></thead><tbody><tr><td>-o</td><td align="left">产生目标文件（.i、.s、.o、可执行程序）</td><td>可执行程序</td></tr><tr><td>-c</td><td align="left">编译源码并在最后生成可执行程序</td><td>*.o</td></tr><tr><td>-E</td><td align="left">只运行C预编译器</td><td>*.i</td></tr><tr><td>-S</td><td align="left">生成汇编语言文件后停止编译</td><td>*.s</td></tr><tr><td>-g</td><td align="left">在目标文件中添加调试信息，以便于gdb之类的调试程序</td><td></td></tr><tr><td>-Wall</td><td align="left">使gcc对源文件的代码有问题的地方发出警示</td><td></td></tr><tr><td>-Idir</td><td align="left">将目录加入搜索头文件的目录路径</td><td></td></tr><tr><td>-Ldir</td><td align="left">将目录加入搜索库的目录路径</td><td></td></tr></tbody></table><h1 id="5-gcc编译动态库"><a href="#5-gcc编译动态库" class="headerlink" title="5.gcc编译动态库"></a>5.gcc编译动态库</h1><p>参看此篇文章：<br><a href="https://blog.csdn.net/qq_43630810/article/details/105696429">https://blog.csdn.net/qq_43630810/article/details/105696429</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7常用命令</title>
      <link href="/posts/Linux/CentOS7/"/>
      <url>/posts/Linux/CentOS7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文件和目录"><a href="#1-文件和目录" class="headerlink" title="1.文件和目录"></a>1.文件和目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs linux">cd /home                  进入 /home 目录<br>cd ..                     返回上一级目录<br>cd ../..                  返回上两级目录<br>cd -                      返回上次所在目录<br>cp file1  file2           将file1复制为file2<br>cp -a file1 file2         复制一个目录<br>cp -a /tmp/dir1 .         复制一个目录到当前工作目录(.代表当前目录)<br>ls                        查看目录中的文件<br>ls -a                     显示隐藏文件<br>ls -l                     显示详细信息<br>ls -lrt                   按时间显示文件(l表示详细列表，r表示反向排序，t表示按时间排序)<br>pwd                       显示工作路径<br>mkdir  dir1               创建`dir1`目录<br>mkdir dir1 dir2           同时创建两个目录<br>mkdir -p /tmp/dir1/dir2   创建一个目录树<br>mv dir1 dir2              移动/重命名一个目录<br>rm -f file1               删除 &#x27;file1&#x27;<br>rm -rf dir1               删除 &#x27;dir1&#x27; 目录及其子目录内容<br></code></pre></td></tr></table></figure><h1 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2.查看文件内容"></a>2.查看文件内容</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> file<span class="hljs-number">1</span>                从第一个字节开始正向查看文件的内容<br><span class="hljs-attribute">head</span> -<span class="hljs-number">2</span> file<span class="hljs-number">1</span>            查看一个文件的前两行 <br><span class="hljs-attribute">more</span> file<span class="hljs-number">1</span>               查看一个长文件的内容<br><span class="hljs-attribute">tac</span> file<span class="hljs-number">1</span>                从最后一行开始反向查看一个文件的内容<br><span class="hljs-attribute">tail</span> -<span class="hljs-number">3</span> file<span class="hljs-number">1</span>            查看一个文件的最后三行<br></code></pre></td></tr></table></figure><h1 id="3-文本处理"><a href="#3-文本处理" class="headerlink" title="3.文本处理"></a>3.文本处理</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> str <span class="hljs-regexp">/tmp/</span>test            在文件 <span class="hljs-string">&#x27;/tmp/test&#x27;</span> 中查找 <span class="hljs-string">&quot;str&quot;</span><br><span class="hljs-keyword">grep</span> ^str <span class="hljs-regexp">/tmp/</span>test           在文件 <span class="hljs-string">&#x27;/tmp/test&#x27;</span> 中查找以 <span class="hljs-string">&quot;str&quot;</span> 开始的行<br><span class="hljs-keyword">grep</span> [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>] <span class="hljs-regexp">/tmp/</span>test          查找 <span class="hljs-string">&#x27;/tmp/test&#x27;</span> 文件中所有包含数字的行<br><span class="hljs-keyword">grep</span> str -r <span class="hljs-regexp">/tmp/</span>*            在目录 <span class="hljs-string">&#x27;/tmp&#x27;</span> 及其子目录中查找 <span class="hljs-string">&quot;str&quot;</span><br>diff file1 file2              找出两个文件的不同处<br>sdiff file1 file2             以对比的方式显示两个文件的不同<br></code></pre></td></tr></table></figure><h1 id="4-查找"><a href="#4-查找" class="headerlink" title="4.查找"></a>4.查找</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -name file1                               从 <span class="hljs-string">&#x27;/&#x27;</span> 开始进入根文件系统查找文件和目录<br><span class="hljs-builtin-name">find</span> / -user user1                               查找属于用户 <span class="hljs-string">&#x27;user1&#x27;</span> 的文件和目录<br><span class="hljs-builtin-name">find</span> /home/user1 -name \*.bin                    在目录 <span class="hljs-string">&#x27;/ home/user1&#x27;</span> 中查找以 <span class="hljs-string">&#x27;.bin&#x27;</span> 结尾的文件<br><span class="hljs-builtin-name">find</span> /usr/bin -type f -atime +100                查找在过去100天内未被使用过的执行文件<br><span class="hljs-builtin-name">find</span> /usr/bin -type f -mtime -10                 查找在10天内被创建或者修改过的文件<br>locate \*.ps                                     寻找以 <span class="hljs-string">&#x27;.ps&#x27;</span> 结尾的文件，先运行 <span class="hljs-string">&#x27;updatedb&#x27;</span> 命令<br><span class="hljs-builtin-name">find</span> -name <span class="hljs-string">&#x27;*.[ch]&#x27;</span> | xargs grep -E <span class="hljs-string">&#x27;expr&#x27;</span>       在当前目录及其子目录所有.c和.h文件中查找 <span class="hljs-string">&#x27;expr&#x27;</span><br><span class="hljs-builtin-name">find</span> -type f -print0 | xargs -r0 grep -F <span class="hljs-string">&#x27;expr&#x27;</span>  在当前目录及其子目录的常规文件中查找 <span class="hljs-string">&#x27;expr&#x27;</span><br><span class="hljs-builtin-name">find</span> -maxdepth 1 -type f | xargs grep -F <span class="hljs-string">&#x27;expr&#x27;</span>  在当前目录中查找 <span class="hljs-string">&#x27;expr&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="5-压缩和解压"><a href="#5-压缩和解压" class="headerlink" title="5.压缩和解压"></a>5.压缩和解压</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bzip2 file1                        压缩 file1<br>bunzip2 file1<span class="hljs-selector-class">.bz2</span>                  解压 file1<span class="hljs-selector-class">.bz2</span><br>gzip file1                         压缩 file1<br>gzip -<span class="hljs-number">9</span> file1                      最大程度压缩 file1<br>gunzip file1<span class="hljs-selector-class">.gz</span>                    解压 file1<span class="hljs-selector-class">.gz</span><br>tar -cvf archive<span class="hljs-selector-class">.tar</span> file1         把file1打包成 archive<span class="hljs-selector-class">.tar</span><br>（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）<br>tar -cvf archive<span class="hljs-selector-class">.tar</span> file1 dir1     把 file1，dir1 打包成 archive<span class="hljs-selector-class">.tar</span><br>tar -tf archive<span class="hljs-selector-class">.tar</span>                 显示一个包中的内容<br>tar -xvf archive<span class="hljs-selector-class">.tar</span>                释放一个包<br>tar -xvf archive<span class="hljs-selector-class">.tar</span> -C /tmp        把压缩包释放到 /tmp目录下<br>zip file1<span class="hljs-selector-class">.zip</span> file1                 创建一个zip格式的压缩包<br>zip -r file1<span class="hljs-selector-class">.zip</span> file1 dir1         把文件和目录压缩成一个zip格式的压缩包<br>unzip file1<span class="hljs-selector-class">.zip</span>                     解压一个zip格式的压缩包到当前目录<br>unzip test<span class="hljs-selector-class">.zip</span> -d /tmp/             解压一个zip格式的压缩包到 /tmp 目录<br></code></pre></td></tr></table></figure><h1 id="6-yum工具"><a href="#6-yum工具" class="headerlink" title="6.yum工具"></a>6.yum工具</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle">yum -y install [<span class="hljs-keyword">package</span>]          下载并安装一个rpm包<br><br>yum localinstall [<span class="hljs-keyword">package</span>.rpm]    安装一个rpm包，使用你自己的软件仓库解决所有依赖关系<br><br>yum -y update                     更新当前系统中安装的所有rpm包<br><br>yum update [<span class="hljs-keyword">package</span>]              更新一个rpm包<br><br>yum remove [<span class="hljs-keyword">package</span>]              删除一个rpm包<br><br>yum list                          列出当前系统中安装的所有包<br><br>yum search [<span class="hljs-keyword">package</span>]              在rpm仓库中搜寻软件包<br><br>yum clean [<span class="hljs-keyword">package</span>]               清除缓存目录（<span class="hljs-regexp">/var/</span>cache/yum）下的软件包<br><br>yum clean headers                 删除所有头文件<br><br>yum clean all                     删除所有缓存的包和头文件<br></code></pre></td></tr></table></figure><h1 id="7-网络"><a href="#7-网络" class="headerlink" title="7.网络"></a>7.网络</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> eth<span class="hljs-number">0</span>                                         显示一个以太网卡的配置<br><br><span class="hljs-attribute">ifconfig</span> eth<span class="hljs-number">0</span> <span class="hljs-number">192.168.1.1</span> netmask <span class="hljs-number">255.255.255.0</span>       配置网卡的IP地址<br><br><span class="hljs-attribute">ifdown</span> eth<span class="hljs-number">0</span>                                           禁用 &#x27;eth<span class="hljs-number">0</span>&#x27; 网络设备<br><br><span class="hljs-attribute">ifup</span> eth<span class="hljs-number">0</span>                                             启用 &#x27;eth<span class="hljs-number">0</span>&#x27; 网络设备<br><br><span class="hljs-attribute">iwconfig</span> eth<span class="hljs-number">1</span>                                         显示一个无线网卡的配置<br><br><span class="hljs-attribute">iwlist</span> scan                                           显示无线网络<br><br><span class="hljs-attribute">ip</span> addr show                                          显示网卡的IP地址<br></code></pre></td></tr></table></figure><h1 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">su</span> -                       切换到root权限（与su有区别）<br><span class="hljs-attribute">shutdown</span> -h now            关机<br><span class="hljs-attribute">shutdown</span> -r now            重启<br><span class="hljs-attribute">top</span>                        罗列使用CPU资源最多的linux任务 （输入q退出）<br><span class="hljs-attribute">pstree</span>                     以树状图显示程序<br><span class="hljs-attribute">man</span> ping                   查看参考手册（例如ping 命令）<br><span class="hljs-attribute">passwd</span>                     修改密码<br><span class="hljs-attribute">df</span> -h                      显示磁盘的使用情况<br><span class="hljs-attribute">cal</span> -<span class="hljs-number">3</span>                     显示前一个月，当前月以及下一个月的月历<br><span class="hljs-attribute">cal</span> <span class="hljs-number">10</span> <span class="hljs-number">1988</span>                显示指定月，年的月历<br><span class="hljs-attribute">date</span> --date &#x27;<span class="hljs-number">1970</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> UTC <span class="hljs-number">1427888888</span> seconds&#x27;   把一相对于<span class="hljs-number">1970</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>的秒数转换成时间<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  3、静态库和动态库的制作</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-静态库的制作"><a href="#1-静态库的制作" class="headerlink" title="1.静态库的制作"></a>1.静态库的制作</h1><ol><li><p>命名规则</p><blockquote><p>lib+库的名字+.a  例如：<code>libmytest.a</code></p></blockquote></li><li><p>制作步骤<br> 2.1、.c文件生成对应的.o文件    <code>gcc   *.c   -c </code><br> 2.2、将生成的.o文件打包 </p><blockquote><p>ar  rcs  +  静态库的名字(libmytest.a)   +   生成的所有的.o</p></blockquote></li><li><p>发布和使用静态库<br> 3.1、发布静态库(lib)<br> 4.2、头文件(include)</p><p> 用户的使用有下面两种使用方式：</p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc  + 源文件 +  静态库文件 -o +可执行程序 -I头文件<br>gcc  <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span>   lib/libtest<span class="hljs-selector-class">.a</span>   -o   sum   -Iinclude<br><br>gcc  + 源文件 -I头文件 -L   静态库的目录 + 库名 -o+ 可执行程序<br>gcc   <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span>   -Iinclude  -L   lib   -l   MyCalc   -o   app<br></code></pre></td></tr></table></figure></li><li><p>查看静态库</p><blockquote><p>nm+静态库   <code> nm libMyCalc.a</code><br>nm+可执行程序</p></blockquote></li></ol><ol start="5"><li><p>静态库的优缺点</p><blockquote><p>优点：<br> a、发布程序的时候。不需要提供对应的库<br> b、加载库的速度<br> 缺点：<br> a、库被打包到应用程序中，导致库的体积很大<br> b、库发生了变化，需要重新编译程序</p></blockquote></li><li><p>实现过程过程：<br><img src="https://img-blog.csdnimg.cn/20200422234406406.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><h1 id="2-动态库的制作"><a href="#2-动态库的制作" class="headerlink" title="2.动态库的制作"></a>2.动态库的制作</h1><ol><li><p>命名规则</p><blockquote><p>lib+库的名字+.so  (类似与Windows下的dll文件)  </p></blockquote></li><li><p>制作步骤<br> 2.1、生成与位置无关的代码(生成与位置无关的.o)     <code>gcc -fPIC -c *.c -I../include</code><br> 2.2、将.0打包成共享库(动态库)<br> <code>gcc -shared -o libMyCalc.so *.o -I../include</code></p></li><li><p>发布和使用静态库<br> 3.1、发布静态库(lib)<br> 4.2、头文件(include)</p><p> 用户的使用方式有下面两种：</p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc  + 源文件 +  动态库文件 -o +可执行程序 -I头文件<br>gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> lib/libtest<span class="hljs-selector-class">.so</span> -o app -Iinclude  <span class="hljs-comment">//运行./app,正确</span><br><br>gcc  + 源文件 -I头文件 -L   动态库的目录 + 库名 -o+ 可执行程序<br>gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -Iinclude -L lib -l MyCalc -o app   <span class="hljs-comment">//运行./app，错误无法找到动态链接库</span><br></code></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/20200422235157315.bmp" alt="在这里插入图片描述"></p></li><li><p>解决动态库失败的问题</p></li></ol><ul><li><p>1)、放到库目录中（<strong>不推荐使用</strong>）<br>将动态库cp(拷贝)到系统lib下<code>sudo cp lib/libMyCalc.so /lib</code>,可以通过<code>ldd 可执行文件</code>来查看<br>这样存在缺点，如何你自己的动态库和系统的动态库一样这样不就是存在错误。<strong>不推荐使用</strong></p></li><li><p>2)、临时设置<br>配置LD_LIBRARY_PATH环境变量，将动态库的路径配置到环境变量中</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span> //打印环境变量<br><span class="hljs-built_in">export</span>  LD_LIBRARY_PATH=相对路径<br><span class="hljs-built_in">export</span>  LD_LIBRARY_PATH=./lib<br>这样的设置是临时的.在终端关闭设置就会失效，在制作的过程中使用。<br></code></pre></td></tr></table></figure></li><li><p>3)、不常用的方法（<strong>永久设置</strong>）<br>修改家目录下.bashrc的配置文件的内容，在修改完成之后需要重启终端<br>在最后一行添加：<code>export  LD_LIBRARY_PATH=绝对路径</code><br><code>export  LD_LIBRARY_PATH=/home/ubuntu/Linux代码/Calc</code></p></li><li><p>4)、需要找到动态连接器的配置文件，将动态库的路径写到配置文件中，然后在进行更新已经显示操作<br>使用命令<code>sudo ldconfig -v</code><br><code>sudo vim /etc/ld.so.conf</code></p></li></ul><ol start="5"><li>动态库的有点<blockquote><p>优点：<br> a、执行程序体积小<br> b、函数接口不变的情况下，动态库更新了，不需要编译程序<br> 缺点：<br> a、发布时需要将动态库提供给用户<br> b、动态库没有被打包到应用程序中，加载速度相对比较慢</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker之安装常用镜像及其简单的使用</title>
      <link href="/posts/Docker/"/>
      <url>/posts/Docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>确保你的系统下安装有Docker,切换到<code>root</code>账户下，如果是普通用户，下面的指令操作需要在指令前添加<code>sudo</code>.</p></blockquote><h3 id="1-Docker的安装实例"><a href="#1-Docker的安装实例" class="headerlink" title="1.Docker的安装实例"></a>1.Docker的安装实例</h3><h4 id="1-1Docker安装Ubuntu"><a href="#1-1Docker安装Ubuntu" class="headerlink" title="1.1Docker安装Ubuntu"></a>1.1Docker安装Ubuntu</h4> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker search ubuntu  <span class="hljs-regexp">//</span>搜索ubuntu镜像<br>docker pull ubuntu <span class="hljs-regexp">//</span>拉取最新版的 Ubuntu 镜像<br>docker images  <span class="hljs-regexp">//</span>查看本地镜像<br>docker run -itd --name ubuntu-test ubuntu  <span class="hljs-regexp">//</span>启动容器，并将容器的名字改为ubuntu-test <br>docker exec -it ubuntu-test  <span class="hljs-regexp">/bin/</span>bash  <span class="hljs-regexp">//</span>进入启动的容器下<br>docker ps <span class="hljs-regexp">//</span>查看容器的运行信息<br></code></pre></td></tr></table></figure><h4 id="1-2Docker安装CentOS"><a href="#1-2Docker安装CentOS" class="headerlink" title="1.2Docker安装CentOS"></a>1.2Docker安装CentOS</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker search centos   <span class="hljs-regexp">//</span>搜索centos  镜像<br>docker pull centos:centos7 <span class="hljs-regexp">//</span>拉取指定版本的 CentOS 镜像，这里我们安装指定版本为例(centos7):<br>docker images  <span class="hljs-regexp">//</span>查看本地镜像<br>docker run -itd --name centos-test centos:centos7 <span class="hljs-regexp">//</span>运行容器<br>docker exec -it centos-test  <span class="hljs-regexp">/bin/</span>bash<br>docker ps <span class="hljs-regexp">//</span>查看容器的运行信息<br></code></pre></td></tr></table></figure><h4 id="1-3Docker安装MySQL"><a href="#1-3Docker安装MySQL" class="headerlink" title="1.3Docker安装MySQL"></a>1.3Docker安装MySQL</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker search mysql <span class="hljs-regexp">//</span>查看可用的 MySQL 版本<br>docker pull mysql:latest 拉取 MySQL 镜像<br>docker images  <span class="hljs-regexp">//</span>查看本地镜像<br><span class="hljs-comment">#启动</span><br>docker run --name mysql -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> -d mysql<br><span class="hljs-regexp">//</span>参数说明：<br>    -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> ：映射容器服务的 <span class="hljs-number">3306</span> 端口到宿主机的 <span class="hljs-number">3306</span> 端口，外部主机可以直接通过 宿主机ip:<span class="hljs-number">3306</span> 访问到 MySQL 的服务。<br>    -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span>：设置 MySQL 服务 root 用户的密码。<br>    -d 后台运行容器，并返回容器的ID<br>docker ps <span class="hljs-regexp">//</span>查看容器的运行信息  <br><span class="hljs-comment">#进入容器</span><br>docker exec -it mysql <span class="hljs-regexp">/bin/</span>bash<br><br><span class="hljs-comment">#登录mysql</span><br>mysql -u root -p<br>ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span>; 、、<br><br><span class="hljs-comment">#添加远程登录用户</span><br>CREATE USER <span class="hljs-string">&#x27;salt&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123456&#x27;</span>;<br>GRANT ALL PRIVILEGES ON *.* TO <span class="hljs-string">&#x27;salt&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker系列之安装Oracle镜像及其简单的使用</title>
      <link href="/posts/Docker/"/>
      <url>/posts/Docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>确定你的Ubuntu 16.04下已经安装Docker,没有安装的话可以看我以前的文章<a href="https://www.nonniexie.cn/article/20200709.html">Docker的入门</a>。</p></blockquote><h3 id="1-查找oracle镜像"><a href="#1-查找oracle镜像" class="headerlink" title="1.查找oracle镜像"></a>1.查找oracle镜像</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search oracle</span><br></code></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/api/personal/file/21F997DC5446493C90808ADBEEB1928C?method=download&shareKey=7aaf24fed0ab1676db2ed8cad5b0c840" alt="https://note.youdao.com/yws/api/personal/file/21F997DC5446493C90808ADBEEB1928C?method=download&amp;shareKey=7aaf24fed0ab1676db2ed8cad5b0c840"></p><h3 id="2-拉取docker镜像并运行、进入"><a href="#2-拉取docker镜像并运行、进入" class="headerlink" title="2.拉取docker镜像并运行、进入"></a>2.拉取docker镜像并运行、进入</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker pull registry.aliyuncs.com<span class="hljs-regexp">/helowin/</span>oracle_11g <span class="hljs-regexp">//</span>拉取docker镜像<br>docker images <span class="hljs-regexp">//</span>查看镜像是否下载成功<br>docker run -d -p <span class="hljs-number">1521</span>:<span class="hljs-number">1521</span> --name oracle registry.aliyuncs.com<span class="hljs-regexp">/helowin/</span>oracle_11g <span class="hljs-regexp">//</span>运行该镜像<br>docker exec -it oracle <span class="hljs-regexp">/bin/</span>bash <span class="hljs-regexp">//</span>进入容器<br></code></pre></td></tr></table></figure><h3 id="3-配置环境变量和修改账户密码"><a href="#3-配置环境变量和修改账户密码" class="headerlink" title="3.配置环境变量和修改账户密码"></a>3.配置环境变量和修改账户密码</h3><ul><li><p>进入root账户<code>su root</code>,输入密码：<code>helowin</code></p></li><li><p>编辑<code>/etc/profile</code>文件，并在文件的末尾添加下面内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>export ORACLE_HOME=<span class="hljs-regexp">/home/</span>oracle<span class="hljs-regexp">/app/</span>oracle<span class="hljs-regexp">/product/</span><span class="hljs-number">11.2</span>.<span class="hljs-number">0</span>/dbhome_2<br>export ORACLE_SID=helowin<br>export PATH=<span class="hljs-variable">$ORACLE_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br>source <span class="hljs-regexp">/etc/</span>profile  <span class="hljs-regexp">//</span>使修改的生效<br></code></pre></td></tr></table></figure></li><li><p>切换<code>oracle</code>用户:<code>su oracle</code>   </p></li><li><p>使用<code>sqlplus</code>连接到<code>oracle</code>:<code>sqlplus /nolog → connect /as sysdba</code></p></li><li><p>修改 sys 和 system 的密码并且修改密码的有效时间为无限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">system</span> identified <span class="hljs-keyword">by</span> oracle;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> sys identified <span class="hljs-keyword">by</span> oracle;<br><span class="hljs-keyword">ALTER</span> PROFILE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">LIMIT</span> PASSWORD_LIFE_TIME UNLIMITED;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://note.youdao.com/yws/api/personal/file/8988EBEA43AC46269F2FF954EE79E4BC?method=download&shareKey=0e7c34c2e28a3f5db230c354e4d8f301" alt="https://note.youdao.com/yws/api/personal/file/8988EBEA43AC46269F2FF954EE79E4BC?method=download&amp;shareKey=0e7c34c2e28a3f5db230c354e4d8f301"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言小项目黑客帝国数字雨</title>
      <link href="/posts/%E9%A1%B9%E7%9B%AE/"/>
      <url>/posts/%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>在网上看到看到黑客帝国的数字雨特别酷炫自己的动手写了一个<br>开发环境：<code>Visual Studio 2017</code> + <a href="https://easyx.cn/">EasyX图形库</a><br>使用技术点：数组、结构体、随机数、<code>EasyX</code>图形库、播放<code>mp3</code>音乐<br>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">描述：做一个黑客帝国数字雨。雨用字符串，随机生成字符串rand()  用数组保存字符串</span><br><span class="hljs-comment">技术栈：</span><br><span class="hljs-comment">数组、结构体、随机数、EasyX图形库</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;graphics.h&gt;</span> <span class="hljs-comment">//非标准的图形库，需安装EasyX图形库</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mmsystem.h&gt;</span>  <span class="hljs-comment">//多媒体设备接口头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;winmm.lib&quot;</span>)  <span class="hljs-comment">//加载静态库  多媒体设备接口静态库</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  STR_SIZE 20 <span class="hljs-comment">//字符间距</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  STR_NUM  128 <span class="hljs-comment">//字符串条数</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  STR_WIDTH  15 <span class="hljs-comment">//字符宽度</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WIDTH 800 <span class="hljs-comment">//窗口宽度</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HETGHT 640 <span class="hljs-comment">//窗口高度</span></span><br><br><span class="hljs-comment">//用什么存储字符串？结构体最合适</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Rain</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> x;  <span class="hljs-comment">//窗口宽度</span><br><span class="hljs-keyword">int</span> y;   <span class="hljs-comment">//窗口高度</span><br><span class="hljs-keyword">int</span> speed;<span class="hljs-comment">//下落速度</span><br><span class="hljs-keyword">char</span> str[STR_SIZE];<span class="hljs-comment">//存储的字符串</span><br>&#125;rain[STR_NUM];<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Star</span>  //五角星</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br><span class="hljs-keyword">int</span> width;<br><span class="hljs-keyword">int</span> vx; <span class="hljs-comment">//速度</span><br><span class="hljs-keyword">int</span> vy; <br>&#125;star[<span class="hljs-number">5</span>]; <span class="hljs-comment">//五个五角星</span><br><br><span class="hljs-comment">//随机生成字符</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">CreateCh</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> flag = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">3</span>;<span class="hljs-comment">//0 1 2</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == flag)<br>&#123;<br>temp = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">26</span> + <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span>==flag)<br>&#123;<br>temp = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">26</span> + <span class="hljs-string">&#x27;a&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>temp = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> temp;<span class="hljs-comment">//返回一个字符</span><br>&#125;<br><br><span class="hljs-comment">//初始化变量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GameInit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//初始化窗口</span><br><span class="hljs-built_in">initgraph</span>(WIDTH, HETGHT);<br><br><span class="hljs-built_in">srand</span>((<span class="hljs-keyword">unsigned</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<span class="hljs-comment">//设置随机数种子，语句要放在函数里面</span><br><br><span class="hljs-comment">//播放音乐</span><br><span class="hljs-built_in">mciSendString</span>(<span class="hljs-string">&quot;open ./克罗地亚狂想曲.mp3 alias BGM&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//向多媒体设备接口，发送消息</span><br><span class="hljs-built_in">mciSendString</span>(<span class="hljs-string">&quot;play BGM repeat&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//重复播放</span><br><br><span class="hljs-comment">//初始化字符串</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; STR_NUM; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; STR_SIZE; k++)<br>&#123;<br>rain[i].str[k] = <span class="hljs-built_in">CreateCh</span>();<span class="hljs-comment">//对数字雨逐个赋值</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//初始化坐标以及速度</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; STR_NUM;i++)<br>&#123;<br>rain[i].x = i * STR_WIDTH;<span class="hljs-comment">//0 15 30 45 ....</span><br>rain[i].y = <span class="hljs-built_in">rand</span>() % HETGHT;<br>rain[i].speed = (<span class="hljs-built_in">rand</span>() % <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>;  <span class="hljs-comment">//数字雨速度</span><br>&#125;<br><br><span class="hljs-comment">//初始化五角星</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br>star[i].x = <span class="hljs-built_in">rand</span>() % WIDTH;<br>star[i].y = <span class="hljs-built_in">rand</span>() % HETGHT;<br>star[i].width = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">11</span> + <span class="hljs-number">30</span>; <span class="hljs-comment">//10-30</span><br>star[i].vx = <span class="hljs-built_in">rand</span>() % <span class="hljs-built_in">rand</span>() % <span class="hljs-number">4</span> + <span class="hljs-number">1</span>;<br>star[i].vy = <span class="hljs-built_in">rand</span>() % <span class="hljs-built_in">rand</span>() % <span class="hljs-number">4</span> + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//游戏绘制函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GameDraw</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//outtextxy(200, 300, &quot;黑客帝国数字雨&quot;);//此处使用多字节符    使用Unicode会报错</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; STR_NUM; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;STR_SIZE;k++)<br>&#123;<br><span class="hljs-built_in">setbkcolor</span>(TRANSPARENT);<span class="hljs-comment">//设置文字背景为透明</span><br><span class="hljs-comment">//通过计算出255/STR_WIDTH，每个字符颜色相差 13</span><br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span> - <span class="hljs-number">13</span> * k, <span class="hljs-number">0</span>));<br><span class="hljs-built_in">outtextxy</span>(rain[i].x, rain[i].y-STR_WIDTH*k, rain[i].str[k]);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//随机改变字符</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ChangeCh</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;STR_NUM;i++)<br>&#123;<br>rain[i].str[<span class="hljs-built_in">rand</span>() % STR_SIZE] = <span class="hljs-built_in">CreateCh</span>();<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//让数字雨移动起来</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RainMove</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;STR_NUM;i++)<br>&#123;<br>rain[i].y += rain[i].speed;<br><span class="hljs-comment">//当雨下落窗口高度大雨640时,从头开始</span><br><span class="hljs-keyword">if</span> (rain[i].y-STR_WIDTH*STR_SIZE  &gt;HETGHT)  <br>&#123;<br>rain[i].y = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//绘制五角星</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FiverStar</span><span class="hljs-params">(Star temp)</span></span><br><span class="hljs-function"></span>&#123;<br>POINT  star[<span class="hljs-number">5</span>] =<br>&#123;<br>&#123;temp.x,temp.y + temp.width / <span class="hljs-number">3</span>&#125; ,<br>&#123;temp.x + temp.width / <span class="hljs-number">3</span>,temp.y&#125;,<br>&#123;temp.x + temp.width,temp.y + temp.width / <span class="hljs-number">3</span>&#125;,<br>&#123;temp.x + temp.width,temp.y + temp.width&#125;,<br>&#123;temp.x ,temp.y + temp.width&#125;<br>&#125;;<br><span class="hljs-built_in">line</span>(star[<span class="hljs-number">0</span>].x, star[<span class="hljs-number">0</span>].y, star[<span class="hljs-number">2</span>].x, star[<span class="hljs-number">2</span>].y);<br><span class="hljs-built_in">line</span>(star[<span class="hljs-number">2</span>].x, star[<span class="hljs-number">2</span>].y, star[<span class="hljs-number">4</span>].x, star[<span class="hljs-number">4</span>].y);<br><span class="hljs-built_in">line</span>(star[<span class="hljs-number">4</span>].x, star[<span class="hljs-number">4</span>].y, star[<span class="hljs-number">1</span>].x, star[<span class="hljs-number">1</span>].y);<br><span class="hljs-built_in">line</span>(star[<span class="hljs-number">1</span>].x, star[<span class="hljs-number">1</span>].y, star[<span class="hljs-number">3</span>].x, star[<span class="hljs-number">3</span>].y);<br><span class="hljs-built_in">line</span>(star[<span class="hljs-number">3</span>].x, star[<span class="hljs-number">3</span>].y, star[<span class="hljs-number">0</span>].x, star[<span class="hljs-number">0</span>].y);<br>&#125;<br><br><span class="hljs-comment">//绘制五角星</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StarDraw</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">setlinecolor</span>(GREEN);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br><span class="hljs-built_in">FiverStar</span>(star[i]);<br>star[i].x += star[i].vx;<br>star[i].y += star[i].vy;<br><span class="hljs-keyword">if</span> ((star[i].x +star[i].width&gt; WIDTH) || star[i].x&lt;=<span class="hljs-number">0</span>)  <span class="hljs-comment">//x&gt;窗口的宽度  || x&lt;=0</span><br>&#123;<br>star[i].vx = -star[i].vx;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((star[i].y + star[i].width &gt; HETGHT) || star[i].y &lt;= <span class="hljs-number">0</span>)  <span class="hljs-comment">//y&gt;窗口的高度  || y&lt;=0</span><br>&#123;<br>star[i].vy = -star[i].vy;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">GameInit</span>();<br><span class="hljs-built_in">BeginBatchDraw</span>();<span class="hljs-comment">//开始双缓冲绘图</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <span class="hljs-comment">//不断进行绘制</span><br>&#123;<br><span class="hljs-built_in">cleardevice</span>();<span class="hljs-comment">//清除缓存</span><br><span class="hljs-built_in">GameDraw</span>();<br><span class="hljs-built_in">StarDraw</span>();<br><span class="hljs-built_in">FlushBatchDraw</span>();<span class="hljs-comment">//绘制</span><br><span class="hljs-built_in">ChangeCh</span>();<br><span class="hljs-built_in">RainMove</span>();<br>&#125;<br><span class="hljs-built_in">EndBatchDraw</span>();<span class="hljs-comment">//结束绘图</span><br><br><span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//防止程序退出</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://aurora811-1300371803.cos.ap-chengdu.myqcloud.com/image/%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD%E6%95%B0%E5%AD%97%E9%9B%A8.png" alt="黑客帝国数据雨"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyX图形库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker系列之Docker初学和安装</title>
      <link href="/posts/Docker/"/>
      <url>/posts/Docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前提：我们初学<code>docker</code>的话,我们需要熟悉<code>Linux</code>的命令和背景知识，及其<code>git</code>的相关知识。推荐一本书<br><a href="https://www.jianguoyun.com/p/DY0m0MsQjKL5BxizxKoD">Docker基础与实战</a> (访问密码 : 2vfnt5)</p></blockquote><hr><h3 id="1-Docker教程"><a href="#1-Docker教程" class="headerlink" title="1.Docker教程"></a>1.Docker教程</h3><p><code>Docker</code> 是一个开源的应用容器引擎，基于 <code>Go</code> 语言 并遵从 <code>Apache2.0</code> 协议开源。<code>Docker</code> 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><h4 id="1-1Docker的优点"><a href="#1-1Docker的优点" class="headerlink" title="1.1Docker的优点"></a>1.1Docker的优点</h4><p><code>Docker</code> 是一个用于开发，交付和运行应用程序的开放平台。<code>Docker</code> 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 <code>Docker</code> 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><h4 id="1-2Docker容器技术和传统虚拟机技术的性能比较"><a href="#1-2Docker容器技术和传统虚拟机技术的性能比较" class="headerlink" title="1.2Docker容器技术和传统虚拟机技术的性能比较"></a>1.2Docker容器技术和传统虚拟机技术的性能比较</h4><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr><tr><td>隔离性</td><td>安全隔离</td><td>完全隔离</td></tr></tbody></table><h4 id="1-3Docker的相关链接"><a href="#1-3Docker的相关链接" class="headerlink" title="1.3Docker的相关链接"></a>1.3Docker的相关链接</h4><p>Docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a><br>Github Docker 源码：<a href="https://github.com/docker/docker-ce">https://github.com/docker/docker-ce</a></p><hr><h3 id="2-Docker的安装"><a href="#2-Docker的安装" class="headerlink" title="2.Docker的安装"></a>2.Docker的安装</h3><p>Docker支持在主流的操作系统平台上使用，包括Ubuntu、CentOS、Windows和MacOS系统。这里我主要是Ubuntu使用来进行其他的系统安装可以参考<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p><h4 id="2-1使用官方安装脚本自动安装"><a href="#2-1使用官方安装脚本自动安装" class="headerlink" title="2.1使用官方安装脚本自动安装"></a>2.1使用官方安装脚本自动安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -fsSL https:<span class="hljs-regexp">//g</span>et.docker.com | bash -s docker --mirror Aliyun<br><span class="hljs-regexp">//</span>也可以使用国内 daocloud 一键安装命令<br>curl -sSL https:<span class="hljs-regexp">//g</span>et.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><h4 id="2-2使用Docker仓库进行安装"><a href="#2-2使用Docker仓库进行安装" class="headerlink" title="2.2使用Docker仓库进行安装"></a>2.2使用Docker仓库进行安装</h4><ol><li><p>选择国内的云服务商，这里选择阿里云为例    </p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -sSL http:<span class="hljs-regexp">//</span>acs-public-mirror.oss-cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/docker-engine/i</span>nternet | sh -<br></code></pre></td></tr></table></figure></li><li><p>安装所需要的包</p> <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-<span class="hljs-keyword">virtual</span><br></code></pre></td></tr></table></figure></li><li><p>添加使用 HTTPS 传输的软件包以及 CA 证书</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> update<br>sudo apt-<span class="hljs-builtin-name">get</span> install apt-transport-https ca-certificates<br></code></pre></td></tr></table></figure></li><li><p>添加GPG密钥</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-key adv --keyserver hkp://p<span class="hljs-number">80</span>.pool.sks-keyservers.net:<span class="hljs-number">80</span> --recv-keys <span class="hljs-number">58118</span>E<span class="hljs-number">89</span>F<span class="hljs-number">3</span>A<span class="hljs-number">912897</span>C<span class="hljs-number">070</span>ADBF<span class="hljs-number">76221572</span>C<span class="hljs-number">52609</span>D<br></code></pre></td></tr></table></figure></li><li><p>添加软件源</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&quot;deb https://apt.dockerproject.org/repo ubuntu-xenial main&quot;</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list<br></code></pre></td></tr></table></figure></li><li><p>添加成功后更新软件包缓存</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure></li><li><p>安装docker</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install docker-engine<br></code></pre></td></tr></table></figure></li><li><p>启动 docker</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo systemctl <span class="hljs-keyword">enable</span> docker<br>sudo systemctl <span class="hljs-keyword">start</span> docker<br></code></pre></td></tr></table></figure></li><li><p>测试运行</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo docker <span class="hljs-builtin-name">run</span> hello-world<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="3-Docker镜像加速"><a href="#3-Docker镜像加速" class="headerlink" title="3.Docker镜像加速"></a>3.Docker镜像加速</h3><p>我们一般在<code>DockerHub</code>拉取镜像有时会遇到困难，此时我们就需要配置加速器。这里我使用国内加速器服务，阿里云：<code>https://&lt;你的ID&gt;.mirror.aliyuncs.com</code></p><blockquote><p>没有阿里云的自己去注册一个自己的阿里云账户。</p></blockquote><p>针对Docker客户端版本大于 1.10.0 的用户   </p><p>您可以通过修改<code>daemon</code>配置文件<code>/etc/docker/daemon.json</code>来使用加速器</p><pre><code><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mkdir -p <span class="hljs-regexp">/etc/</span>docker<br>sudo tee <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://nw5iareo.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br>docker info <span class="hljs-regexp">//</span><span class="hljs-regexp">/显示 Docker 系统信息</span><br></code></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS 2017使用C语言操作mysql数据库</title>
      <link href="/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用环境"><a href="#1-使用环境" class="headerlink" title="1.使用环境"></a>1.使用环境</h1><ul><li>Windows下<a href="https://www.runoob.com/w3cnote/windows10-mysql-installer.html">安装MySQL数据库</a>  </li><li>安装Visual Studio 2017</li></ul><h1 id="2-VS-2017环境配置"><a href="#2-VS-2017环境配置" class="headerlink" title="2.VS 2017环境配置"></a>2.VS 2017环境配置</h1><ol><li><p>点击项目-&gt;项目属性，操作如图:<br><img src="https://note.youdao.com/yws/api/personal/file/C5527E27D2984128B956908ED56E225A?method=download&shareKey=d623c6fe814b9a1780d87833b03c45c8" alt="打开项目属性页">   </p></li><li><p>选择C/C++,在常规的附加包含目录添加mysql安装地址中include文件的地址，如我的地址是<code>C:\Program Files\MySQL\MySQL Server 5.7\include</code>,如图：<br><img src="https://note.youdao.com/yws/api/personal/file/8F67C64106FE410F811F1E971E9F9434?method=download&shareKey=cd26799cb175222f77f8c982bd8aaaa5" alt="修改附加包含目录"></p></li><li><p>选择链接器，在常规中附加目录中添加mysql安装地址lib文件的地址，如我的地址是<code>C:\Program Files\MySQL\MySQL Server 5.7\lib</code>,如图：<br><img src="https://note.youdao.com/yws/api/personal/file/480A928A4A1741268CBFDA3951A67361?method=download&shareKey=db73e4d05ddc657db38a5217ae877f98" alt="链接器的修改"></p></li><li><p>点击链接器中的输入，在附加依赖项中添加==libmysql.lib==，如图：<br><img src="https://note.youdao.com/yws/api/personal/file/01BFC1E7BB674A97AD8523D24247C97C?method=download&shareKey=a9334efd4bc559efcba9f833314aef61" alt="连接器输入修改"></p></li><li><p>将mysql安装目录<code>C:\Program Files\MySQL\MySQL Server 5.7\lib</code>下的==libmysql.dll==复制到自己所建立的项目的<strong>同名文件夹</strong>下中,如图：<br><img src="https://note.youdao.com/yws/api/personal/file/EFCCC934F2BA4C029E52E225E703E5DF?method=download&shareKey=88eaf808d942c86a7beca5fe15094b23" alt="dll文件"></p></li><li><p>将运行的平台给为x64为，如图：<br><img src="https://note.youdao.com/yws/api/personal/file/E6159B9DC60F4B04A3BD742802864824?method=download&shareKey=cdea8c714736ea54ab1cf8b66c7c48af" alt="修改平台环境"></p></li></ol><blockquote><p>注意这里我使用的<code>MySQL</code>版本是X64位的</p></blockquote><h1 id="2-数据库操作代码"><a href="#2-数据库操作代码" class="headerlink" title="2.数据库操作代码"></a>2.数据库操作代码</h1><blockquote><p>说明：这里我使用的是远程的数据库来进行连接</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mysql.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> res;<br>MYSQL conn;<br>    <span class="hljs-comment">//初始化MySQL连接句柄</span><br>mysql_init(&amp;conn);<br><span class="hljs-keyword">if</span> (&amp;conn != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mysql句柄初始化成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Err in init\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//连接mysql数据库</span><br><span class="hljs-keyword">if</span> (mysql_real_connect<br>    (&amp;conn,  <span class="hljs-comment">//MySQL句柄 </span><br><span class="hljs-string">&quot;192.168.37.134&quot;</span>,  <span class="hljs-comment">//参数地址，本地数据库使用localhost</span><br><span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-comment">//数据库名</span><br><span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-comment">//数据库密码</span><br><span class="hljs-string">&quot;db_test&quot;</span>, <span class="hljs-comment">//数据库名</span><br><span class="hljs-number">0</span>, <span class="hljs-comment">//数据库端口，0表示默认(即3306)</span><br><span class="hljs-literal">NULL</span>, <span class="hljs-comment">//如果unix_socket不是NULL，字符串指定套接字或应该被使用的命名管道。注意host参数决定连接的类型</span><br><span class="hljs-number">0</span>)) <span class="hljs-comment">//通常是0</span><br>&#123;                      <br>      <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数据库连接成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数据库连接失败\n&quot;</span>);<br>mysql_close(&amp;conn);  <span class="hljs-comment">//关闭连接</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//数据的插入</span><br>res = mysql_query(&amp;conn, <span class="hljs-string">&quot;insert into testTB3 values(5,&#x27;aa&#x27;)&quot;</span>); <span class="hljs-comment">//MySQL句柄  SQL语句</span><br><span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败\n&quot;</span>);<br>mysql_close(&amp;conn);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//数据的删除</span><br>res = mysql_query(&amp;conn, <span class="hljs-string">&quot;delete from testTB3 where name=&#x27;aa&#x27;&quot;</span>);<br><span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除失败\n&quot;</span>);<br>mysql_close(&amp;conn);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//数据的查询</span><br>res = mysql_query(&amp;conn, <span class="hljs-string">&quot;select * from testTB3&quot;</span>);<br><span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查询成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查询失败\n&quot;</span>);<br>mysql_close(&amp;conn);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//解析查询结果</span><br>MYSQL_RES *res_ptr;<span class="hljs-comment">//指向结果集索引的指针</span><br>res_ptr = mysql_store_result(&amp;conn);<span class="hljs-comment">//检索完整的结果集当当前程序</span><br><span class="hljs-keyword">if</span> (res_ptr != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-comment">//打印出结果集中一共有多少行记录</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Row = mysql_num_rows(res_ptr);<span class="hljs-comment">//结果集中的行数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有%lu行记录\n&quot;</span>, Row);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;结果集操作保留出错\n&quot;</span>);<br>mysql_close(&amp;conn);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//取出字段名</span><br>MYSQL_FIELD *fd;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (fd = mysql_fetch_field(res_ptr))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\t&quot;</span>, fd-&gt;name);<br>i++;<br>&#125;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-comment">//取出所有内容</span><br>MYSQL_ROW sqlrow;<br><span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">while</span> (sqlrow = mysql_fetch_row(res_ptr))<br>&#123;<br><span class="hljs-comment">//将每一行的内容分割成每一个记录</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\t&quot;</span>, sqlrow[j]);<br>&#125;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//释放结果集索引所在内存</span><br>mysql_free_result(res_ptr);<br><br>mysql_close(&amp;conn);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果，如图所示：<br><img src="https://note.youdao.com/yws/api/personal/file/CA62786BA71D487393252F540A701279?method=download&shareKey=01ca503b6fc3d590541d1099de90c19b" alt="MySQL C语言操作结果"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  7、shell编程-awk工具</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-awk工具"><a href="#1-awk工具" class="headerlink" title="1.awk工具"></a>1.awk工具</h1><p><code>sed</code>是以行为单位处理文件，<code>awk</code>比<code>sed</code>强的地方在于不仅可以使用行为单位也可以使用列为单位处理文件。awk缺省的行分隔符是换行，缺省的列分隔符是连续的空格和tab,但是行分隔和列分隔符都可以进行自定义。比如<code>/etc/passwd</code>文件的每一行有若干个字段，字段之间以:分隔，就可以重新定义<code>awk</code>的列分隔符为:并以列为单位处理这个文件。</p><p><code>awk</code>的基本用法和<code>sed</code>类似，<code>awk</code>命令行的基本的形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk 参数 &#x27;脚本语句(/pattern/&#123;actions&#125;)&#x27; 待操作文件<br>awk 参数 -f &#x27;脚本文件&#x27;  待操作文件<br></code></pre></td></tr></table></figure><blockquote><p>注意：<code>printf</code>不带换行，<code>print</code>带换行</p></blockquote><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;&#123;print $0&#125;&#x27; awk.sh  #打印整个文件<br>awk &#x27;&#123;print $1&#125;&#x27; awk.sh #打印每一行的的第一列<br>awk &#x27;/^ *$/&#123;count=count+1&#125; END &#123;print count&#125;&#x27; test.txt  #统计一个文件中的空行<br>ps aux | awk &#x27;&#123;print $2&#125;&#x27; #打印进程的PID<br>ps aux | awk &#x27;$2&gt;20000 &#123;print $2&#125;&#x27; #打印PID大于20000的<br>ps aux | awk &#x27;$2&gt;2000 &amp;&amp; $2&lt;=3000 &#123;count=count+1&#125; END &#123;print count&#125;&#x27;  #统计PID大于2000小于3000的个数<br><br></code></pre></td></tr></table></figure><h1 id="2-awk常用的内建变量"><a href="#2-awk常用的内建变量" class="headerlink" title="2.awk常用的内建变量"></a>2.awk常用的内建变量</h1><table><thead><tr><th>变量</th><th>变量说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>当前输入文件的文件名，该变量只读的</td></tr><tr><td>FILENAME</td><td>当前输入文件的文件名，该变量是只读的</td></tr><tr><td>NR</td><td>当前行的行号，该变量是只读的，R代表record</td></tr><tr><td>NF</td><td>当前行所拥有的列数，该变量是只读的，F代表field</td></tr><tr><td>OFS</td><td>输出格式的列分隔符，缺省是空格</td></tr><tr><td>FS</td><td>输入文件的列分融符，缺省是连续的空格和Tab</td></tr><tr><td>ORS</td><td>输出格式的行分隔符，缺省是换行符</td></tr><tr><td>RS</td><td>输入文件的行分隔符，缺省是换行符</td></tr></tbody></table><p>例如打印系统中的用户账号列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk -F: &#x27;&#123;print $1&#125;&#x27; /etc/passwd  #自定义:为分隔符，打印/etc/passwd的第一列<br>awk &#x27;BEIN &#123;FS=&quot;:&quot;&#125; &#123;print $1;&#125;&#x27; /etc/passwd<br></code></pre></td></tr></table></figure><p><code>awk</code>还可以想c语言一样使用<code>if/else、while、for</code>控制结构。可自行自行学习。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  8、shell编程-sed工具</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h3 id="1-sed工具"><a href="#1-sed工具" class="headerlink" title="1.sed工具"></a>1.sed工具</h3><p><code>sed</code>为流编译器，是对一个文档中的行数据进行处理。我们都知道，<code>sed</code>和<code>vi</code>都是早期的UNIX的工具，因此很多的<code>sed</code>命令和<code>vi</code>的末行命令都是非常相似的。</p><p>如果将<code>test.sh</code>中的<code>echo</code>替换为<code>printf</code></p><ul><li>可以使用<code>vim编译器</code>的末行模式输入<code>:%s/echo/printf/g</code>。而在命令模式输入<code>uu</code>来进行撤销。</li><li>也可以使用<code>sed流编译器</code>来进行修改。   </li></ul><p><code>sed</code>命令的基本格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed 参数 `&#x27;脚本语句(/pattern/&#123;actions&#125;)&#x27;` 待操控文件    <br>sed 参数 -f `脚本文件` 待操控的文件<br></code></pre></td></tr></table></figure><hr><p>有关<code>sed</code>的选项含义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">--version 显示sed版本。<br>--help显示帮助文档。<br>-n,--quiet,--silent 静默输出，默认情况下，sed程序在所有的脚本指令执行完毕后，将自动打印模式空间中的内容，这些选项可以屏蔽自动打印。<br>-e script 允许多个脚本指令被执行。<br>-f script-file,<br>--file=script-file 从文件中读取脚本指令，对编写自动脚本程序来说很棒！<br>-i,--in-place 直接修改源文件，经过脚本指令处理后的内容将被输出至源文件（源文件被修改）慎用！<br>-l N, --line-length=N 该选项指定l指令可以输出的行长度，l指令用于输出非打印字符。<br>--posix 禁用GNU sed扩展功能。<br>-r, --regexp-extended 在脚本指令中使用扩展正则表达式<br>-s, --separate 默认情况下，sed将把命令行指定的多个文件名作为一个长的连续的输入流。而GNU sed则允许把他们当作单独的文件，这样如正则表达式则不进行跨文件匹配。<br>-u, --unbuffered 最低限度的缓存输入与输出。<br></code></pre></td></tr></table></figure><hr><p>上面的是sed本身选项功能说明，这里介绍几个常用简单的sed操作。</p><table><thead><tr><th>简称</th><th>原名</th><th>汉语意思</th></tr></thead><tbody><tr><td>a</td><td>append</td><td>追加</td></tr><tr><td>i</td><td>insert</td><td>插入</td></tr><tr><td>d</td><td>delete</td><td>删除</td></tr><tr><td>s</td><td>substitution</td><td>替换</td></tr></tbody></table><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;4a hello&#x27; case.sh  #在case.sh文件的第四行添加hello<br>sed &#x27;5d&#x27; test.sh  #删除test.sh的第五行数据<br>sed &#x27;2,5d&#x27; test.sh #删除test.sh的第二行到第五行数据<br>sed &#x27;s/echo/printf/g&#x27; test.sh #将test.sh中的echo替换为printf <br></code></pre></td></tr></table></figure><h4 id="1-1、常用的sed命令"><a href="#1-1、常用的sed命令" class="headerlink" title="1.1、常用的sed命令"></a>1.1、常用的sed命令</h4><p><code>sed</code>的编辑命令可以直接当命令行参数传入，也可以写成一个脚本文件然后用<code>-f</code>参数指定，编辑命令的格式为：<br><code>/pattern/action</code></p><blockquote><p>说明：其中pattern是正则表达式，action是编辑操作。sed程序一行一行读出待处理文件，如果某一行与pattern匹配，则执行相应的action，如果一条命令没有pattern而只有action，这个action将作用于待处理文件的每一行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">/pattern/p  #打印匹配pattern的行<br>/pattern/d  #删除匹配pattern的行<br>/pattern/s/pattern1/pattern2/ #查找符合pattern的行，将该行第一个匹配pattern1的字符串替换为pattern2<br>/pattern/s/pattern1/pattern2/g #查找符合pattern的行，将该行所有匹配pattern1的字符串替换为pattern2<br></code></pre></td></tr></table></figure><p>在使用p命令的时候，要注意p命令表示除了把文件内容打印出来之外还额外打印一遍匹配pattern的行。如果我们就想要输出结果，可以加上<code>-n</code>选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;/echo/p&#x27; test.sh<br>sed &#x27;/echo/d&#x27; test.sh<br>sed &#x27;/echo/echo~~/&#x27; test.sh<br>sed &#x27;/echo~~/echo/g&#x27; test.sh<br>sed &#x27;s/&lt;.*&gt;//g&#x27;  test.html  #去掉所有的html标签<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown系列之在Typora中使用的emoji图标标签</title>
      <link href="/posts/Markdown/"/>
      <url>/posts/Markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="1-People"><a href="#1-People" class="headerlink" title="1.People"></a>1.People</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs elixir">😄 <span class="hljs-symbol">:smile</span>:|😆 <span class="hljs-symbol">:laughing</span>: <br>😊 <span class="hljs-symbol">:blush</span>:😃 <span class="hljs-symbol">:smiley</span>:☺️ <span class="hljs-symbol">:relaxed</span>:<br>😏 <span class="hljs-symbol">:smirk</span>:😍 <span class="hljs-symbol">:heart_eyes</span>:😘 <span class="hljs-symbol">:kissing_heart</span>:<br>😚 <span class="hljs-symbol">:kissing_closed_eyes</span>:😳 <span class="hljs-symbol">:flushed</span>:😌 <span class="hljs-symbol">:relieved</span>:<br>😆 <span class="hljs-symbol">:satisfied</span>:😁 <span class="hljs-symbol">:grin</span>:😉 <span class="hljs-symbol">:wink</span>:<br>😜 <span class="hljs-symbol">:stuck_out_tongue_winking_eye</span>:😝 <span class="hljs-symbol">:stuck_out_tongue_closed_eyes</span>:😀 <span class="hljs-symbol">:grinning</span>:<br>😗 <span class="hljs-symbol">:kissing</span>:😙 <span class="hljs-symbol">:kissing_smiling_eyes</span>:😛 <span class="hljs-symbol">:stuck_out_tongue</span>:<br>😴 <span class="hljs-symbol">:sleeping</span>:😟 <span class="hljs-symbol">:worried</span>:😦 <span class="hljs-symbol">:frowning</span>:<br>😧 <span class="hljs-symbol">:anguished</span>:😮 <span class="hljs-symbol">:open_mouth</span>:😬 <span class="hljs-symbol">:grimacing</span>:<br>😕 <span class="hljs-symbol">:confused</span>:😯 <span class="hljs-symbol">:hushed</span>:😑 <span class="hljs-symbol">:expressionless</span>:<br>😒 <span class="hljs-symbol">:unamused</span>:😅 <span class="hljs-symbol">:sweat_smile</span>:😓 <span class="hljs-symbol">:sweat</span>:<br>😥 <span class="hljs-symbol">:disappointed_relieved</span>:😩 <span class="hljs-symbol">:weary</span>:😔 <span class="hljs-symbol">:pensive</span>:<br>😞 <span class="hljs-symbol">:disappointed</span>:😖 <span class="hljs-symbol">:confounded</span>:😨 <span class="hljs-symbol">:fearful</span>:<br>😰 <span class="hljs-symbol">:cold_sweat</span>:😣 <span class="hljs-symbol">:persevere</span>:😢 <span class="hljs-symbol">:cry</span>:<br>😭 <span class="hljs-symbol">:sob</span>:😂 <span class="hljs-symbol">:joy</span>:😲 <span class="hljs-symbol">:astonished</span>:<br>😱 <span class="hljs-symbol">:scream</span>: 😫 <span class="hljs-symbol">:tired_face</span>:<br>😠 <span class="hljs-symbol">:angry</span>:😡 <span class="hljs-symbol">:rage</span>:😤 <span class="hljs-symbol">:triumph</span>:<br>😪 <span class="hljs-symbol">:sleepy</span>:😋 <span class="hljs-symbol">:yum</span>:😷 <span class="hljs-symbol">:mask</span>:<br>😎 <span class="hljs-symbol">:sunglasses</span>:😵 <span class="hljs-symbol">:dizzy_face</span>:👿 <span class="hljs-symbol">:imp</span>:<br>😈 <span class="hljs-symbol">:smiling_imp</span>:😐 <span class="hljs-symbol">:neutral_face</span>:😶 <span class="hljs-symbol">:no_mouth</span>:<br>😇 <span class="hljs-symbol">:innocent</span>:👽 <span class="hljs-symbol">:alien</span>:💛 <span class="hljs-symbol">:yellow_heart</span>:<br>💙 <span class="hljs-symbol">:blue_heart</span>:💜 <span class="hljs-symbol">:purple_heart</span>:❤️ <span class="hljs-symbol">:heart</span>:<br>💚 <span class="hljs-symbol">:green_heart</span>:💔 <span class="hljs-symbol">:broken_heart</span>:💓 <span class="hljs-symbol">:heartbeat</span>:<br>💗 <span class="hljs-symbol">:heartpulse</span>:💕 <span class="hljs-symbol">:two_hearts</span>:💞 <span class="hljs-symbol">:revolving_hearts</span>:<br>💘 <span class="hljs-symbol">:cupid</span>:💖 <span class="hljs-symbol">:sparkling_heart</span>:✨ <span class="hljs-symbol">:sparkles</span>:<br>⭐️ <span class="hljs-symbol">:star</span>:🌟 <span class="hljs-symbol">:star2</span>:💫 <span class="hljs-symbol">:dizzy</span>:<br>💥 <span class="hljs-symbol">:boom</span>:💥 <span class="hljs-symbol">:collision</span>:💢 <span class="hljs-symbol">:anger</span>:<br>❗️ <span class="hljs-symbol">:exclamation</span>:❓ <span class="hljs-symbol">:question</span>:❕ <span class="hljs-symbol">:grey_exclamation</span>:<br>❔ <span class="hljs-symbol">:grey_question</span>:💤 <span class="hljs-symbol">:zzz</span>:💨 <span class="hljs-symbol">:dash</span>:<br>💦 <span class="hljs-symbol">:sweat_drops</span>:🎶 <span class="hljs-symbol">:notes</span>:🎵 <span class="hljs-symbol">:musical_note</span>:<br>🔥 <span class="hljs-symbol">:fire</span>:💩 <span class="hljs-symbol">:hankey</span>:💩 <span class="hljs-symbol">:poop</span>:<br>💩 <span class="hljs-symbol">:shit</span>:👍 <span class="hljs-symbol">:+</span><span class="hljs-number">1</span>:👍 <span class="hljs-symbol">:thumbsup</span>:<br>👎 <span class="hljs-symbol">:-</span><span class="hljs-number">1</span>:👎 <span class="hljs-symbol">:thumbsdown</span>:👌 <span class="hljs-symbol">:ok_hand</span>:<br>👊 <span class="hljs-symbol">:punch</span>:👊 <span class="hljs-symbol">:facepunch</span>:✊ <span class="hljs-symbol">:fist</span>:<br>✌️ <span class="hljs-symbol">:v</span>:👋 <span class="hljs-symbol">:wave</span>:✋ <span class="hljs-symbol">:hand</span>:<br>✋ <span class="hljs-symbol">:raised_hand</span>:👐 <span class="hljs-symbol">:open_hands</span>:☝️ <span class="hljs-symbol">:point_up</span>:<br>👇 <span class="hljs-symbol">:point_down</span>:👈 <span class="hljs-symbol">:point_left</span>:👉 <span class="hljs-symbol">:point_right</span>:<br>🙌 <span class="hljs-symbol">:raised_hands</span>:🙏 <span class="hljs-symbol">:pray</span>:👆 <span class="hljs-symbol">:point_up_2</span>:<br>👏 <span class="hljs-symbol">:clap</span>:💪 <span class="hljs-symbol">:muscle</span>:🤘 <span class="hljs-symbol">:metal</span>:<br>🖕 <span class="hljs-symbol">:fu</span>:🚶 <span class="hljs-symbol">:walking</span>:🏃 <span class="hljs-symbol">:runner</span>:<br>🏃 <span class="hljs-symbol">:running</span>:👫 <span class="hljs-symbol">:couple</span>:👪 <span class="hljs-symbol">:family</span>:<br>👬 <span class="hljs-symbol">:two_men_holding_hands</span>:👭 <span class="hljs-symbol">:two_women_holding_hands</span>:💃 <span class="hljs-symbol">:dancer</span>:<br>👯 <span class="hljs-symbol">:dancers</span>:🙆 <span class="hljs-symbol">:ok_woman</span>:🙅 <span class="hljs-symbol">:no_good</span>:<br>💁 <span class="hljs-symbol">:information_desk_person</span>:🙋 <span class="hljs-symbol">:raising_hand</span>:👰 <span class="hljs-symbol">:bride_with_veil</span>:<br>🙎 <span class="hljs-symbol">:person_with_pouting_face</span>:🙍 <span class="hljs-symbol">:person_frowning</span>:🙇 <span class="hljs-symbol">:bow</span>:<br><span class="hljs-symbol">:couplekiss</span>: <span class="hljs-symbol">:couplekiss</span>:💑 <span class="hljs-symbol">:couple_with_heart</span>:💆 <span class="hljs-symbol">:massage</span>:<br>💇 <span class="hljs-symbol">:haircut</span>:💅 <span class="hljs-symbol">:nail_care</span>:👦 <span class="hljs-symbol">:boy</span>:<br>👧 <span class="hljs-symbol">:girl</span>:👩 <span class="hljs-symbol">:woman</span>:👨 <span class="hljs-symbol">:man</span>:<br>👶 <span class="hljs-symbol">:baby</span>:👵 <span class="hljs-symbol">:older_woman</span>:👴 <span class="hljs-symbol">:older_man</span>:<br>👱 <span class="hljs-symbol">:person_with_blond_hair</span>:👲 <span class="hljs-symbol">:man_with_gua_pi_mao</span>:👳 <span class="hljs-symbol">:man_with_turban</span>:<br>👷 <span class="hljs-symbol">:construction_worker</span>:👮 <span class="hljs-symbol">:cop</span>:👼 <span class="hljs-symbol">:angel</span>:<br>👸 <span class="hljs-symbol">:princess</span>:😺 <span class="hljs-symbol">:smiley_cat</span>:😸 <span class="hljs-symbol">:smile_cat</span>:<br>😻 <span class="hljs-symbol">:heart_eyes_cat</span>:😽 <span class="hljs-symbol">:kissing_cat</span>:😼 <span class="hljs-symbol">:smirk_cat</span>:<br>🙀 <span class="hljs-symbol">:scream_cat</span>:😿 <span class="hljs-symbol">:crying_cat_face</span>:😹 <span class="hljs-symbol">:joy_cat</span>:<br>😾 <span class="hljs-symbol">:pouting_cat</span>:👹 <span class="hljs-symbol">:japanese_ogre</span>:👺 <span class="hljs-symbol">:japanese_goblin</span>:<br>🙈 <span class="hljs-symbol">:see_no_evil</span>:🙉 <span class="hljs-symbol">:hear_no_evil</span>:🙊 <span class="hljs-symbol">:speak_no_evil</span>:<br>💂 <span class="hljs-symbol">:guardsman</span>:💀 <span class="hljs-symbol">:skull</span>:🐾 <span class="hljs-symbol">:feet</span>:<br>👄 <span class="hljs-symbol">:lips</span>:💋 <span class="hljs-symbol">:kiss</span>:💧 <span class="hljs-symbol">:droplet</span>:<br>👂 <span class="hljs-symbol">:ear</span>:👀 <span class="hljs-symbol">:eyes</span>:👃 <span class="hljs-symbol">:nose</span>:<br>👅 <span class="hljs-symbol">:tongue</span>:💌 <span class="hljs-symbol">:love_letter</span>:👤 <span class="hljs-symbol">:bust_in_silhouette</span>:<br>👥 <span class="hljs-symbol">:busts_in_silhouette</span>:💬 <span class="hljs-symbol">:speech_balloon</span>:💭 <span class="hljs-symbol">:thought_balloon</span>:<br>Nature<br>☀️ <span class="hljs-symbol">:sunny</span>:☔️ <span class="hljs-symbol">:umbrella</span>:☁️ <span class="hljs-symbol">:cloud</span>:<br>❄️ <span class="hljs-symbol">:snowflake</span>:⛄️ <span class="hljs-symbol">:snowman</span>:⚡️ <span class="hljs-symbol">:zap</span>:<br>🌀 <span class="hljs-symbol">:cyclone</span>:🌁 <span class="hljs-symbol">:foggy</span>:🌊 <span class="hljs-symbol">:ocean</span>:<br>🐱 <span class="hljs-symbol">:cat</span>:🐶 <span class="hljs-symbol">:dog</span>:🐭 <span class="hljs-symbol">:mouse</span>:<br>🐹 <span class="hljs-symbol">:hamster</span>:🐰 <span class="hljs-symbol">:rabbit</span>:🐺 <span class="hljs-symbol">:wolf</span>:<br>🐸 <span class="hljs-symbol">:frog</span>:🐯 <span class="hljs-symbol">:tiger</span>:🐨 <span class="hljs-symbol">:koala</span>:<br>🐻 <span class="hljs-symbol">:bear</span>:🐷 <span class="hljs-symbol">:pig</span>:🐽 <span class="hljs-symbol">:pig_nose</span>:<br>🐮 <span class="hljs-symbol">:cow</span>:🐗 <span class="hljs-symbol">:boar</span>:🐵 <span class="hljs-symbol">:monkey_face</span>:<br>🐒 <span class="hljs-symbol">:monkey</span>:🐴 <span class="hljs-symbol">:horse</span>:🐎 <span class="hljs-symbol">:racehorse</span>:<br>🐫 <span class="hljs-symbol">:camel</span>:🐑 <span class="hljs-symbol">:sheep</span>:🐘 <span class="hljs-symbol">:elephant</span>:<br>🐼 <span class="hljs-symbol">:panda_face</span>:🐍 <span class="hljs-symbol">:snake</span>:🐦 <span class="hljs-symbol">:bird</span>:<br>🐤 <span class="hljs-symbol">:baby_chick</span>:🐥 <span class="hljs-symbol">:hatched_chick</span>:🐣 <span class="hljs-symbol">:hatching_chick</span>:<br>🐔 <span class="hljs-symbol">:chicken</span>:🐧 <span class="hljs-symbol">:penguin</span>:🐢 <span class="hljs-symbol">:turtle</span>:<br>🐛 <span class="hljs-symbol">:bug</span>:🐝 <span class="hljs-symbol">:honeybee</span>:🐜 <span class="hljs-symbol">:ant</span>:<br>🐞 <span class="hljs-symbol">:beetle</span>:🐌 <span class="hljs-symbol">:snail</span>:🐙 <span class="hljs-symbol">:octopus</span>:<br>🐠 <span class="hljs-symbol">:tropical_fish</span>:🐟 <span class="hljs-symbol">:fish</span>:🐳 <span class="hljs-symbol">:whale</span>:<br>🐋 <span class="hljs-symbol">:whale2</span>:🐬 <span class="hljs-symbol">:dolphin</span>:🐄 <span class="hljs-symbol">:cow2</span>:<br>🐏 <span class="hljs-symbol">:ram</span>:🐀 <span class="hljs-symbol">:rat</span>:🐃 <span class="hljs-symbol">:water_buffalo</span>:<br>🐅 <span class="hljs-symbol">:tiger2</span>:🐇 <span class="hljs-symbol">:rabbit2</span>:🐉 <span class="hljs-symbol">:dragon</span>:<br>🐐 <span class="hljs-symbol">:goat</span>:🐓 <span class="hljs-symbol">:rooster</span>:🐕 <span class="hljs-symbol">:dog2</span>:<br>🐖 <span class="hljs-symbol">:pig2</span>:🐁 <span class="hljs-symbol">:mouse2</span>:🐂 <span class="hljs-symbol">:ox</span>:<br>🐲 <span class="hljs-symbol">:dragon_face</span>:🐡 <span class="hljs-symbol">:blowfish</span>:🐊 <span class="hljs-symbol">:crocodile</span>:<br>🐪 <span class="hljs-symbol">:dromedary_camel</span>:🐆 <span class="hljs-symbol">:leopard</span>:🐈 <span class="hljs-symbol">:cat2</span>:<br>🐩 <span class="hljs-symbol">:poodle</span>:🐾 <span class="hljs-symbol">:paw_prints</span>:💐 <span class="hljs-symbol">:bouquet</span>:<br>🌸 <span class="hljs-symbol">:cherry_blossom</span>:🌷 <span class="hljs-symbol">:tulip</span>:🍀 <span class="hljs-symbol">:four_leaf_clover</span>:<br>🌹 <span class="hljs-symbol">:rose</span>:🌻 <span class="hljs-symbol">:sunflower</span>:🌺 <span class="hljs-symbol">:hibiscus</span>:<br>🍁 <span class="hljs-symbol">:maple_leaf</span>:🍃 <span class="hljs-symbol">:leaves</span>:🍂 <span class="hljs-symbol">:fallen_leaf</span>:<br>🌿 <span class="hljs-symbol">:herb</span>:🍄 <span class="hljs-symbol">:mushroom</span>:🌵 <span class="hljs-symbol">:cactus</span>:<br>🌴 <span class="hljs-symbol">:palm_tree</span>:🌲 <span class="hljs-symbol">:evergreen_tree</span>:🌳 <span class="hljs-symbol">:deciduous_tree</span>:<br>🌰 <span class="hljs-symbol">:chestnut</span>:🌱 <span class="hljs-symbol">:seedling</span>:🌼 <span class="hljs-symbol">:blossom</span>:<br>🌾 <span class="hljs-symbol">:ear_of_rice</span>:🐚 <span class="hljs-symbol">:shell</span>:🌐 <span class="hljs-symbol">:globe_with_meridians</span>:<br>🌞 <span class="hljs-symbol">:sun_with_face</span>:🌝 <span class="hljs-symbol">:full_moon_with_face</span>:🌚 <span class="hljs-symbol">:new_moon_with_face</span>:<br>🌑 <span class="hljs-symbol">:new_moon</span>:🌒 <span class="hljs-symbol">:waxing_crescent_moon</span>:🌓 <span class="hljs-symbol">:first_quarter_moon</span>:<br>🌔 <span class="hljs-symbol">:waxing_gibbous_moon</span>:🌕 <span class="hljs-symbol">:full_moon</span>:🌖 <span class="hljs-symbol">:waning_gibbous_moon</span>:<br>🌗 <span class="hljs-symbol">:last_quarter_moon</span>:🌘 <span class="hljs-symbol">:waning_crescent_moon</span>:🌜 <span class="hljs-symbol">:last_quarter_moon_with_face</span>:<br>🌛 <span class="hljs-symbol">:first_quarter_moon_with_face</span>:🌔 <span class="hljs-symbol">:moon</span>:🌍 <span class="hljs-symbol">:earth_africa</span>:<br>🌎 <span class="hljs-symbol">:earth_americas</span>:🌏 <span class="hljs-symbol">:earth_asia</span>:🌋 <span class="hljs-symbol">:volcano</span>:<br>🌌 <span class="hljs-symbol">:milky_way</span>:⛅️ <span class="hljs-symbol">:partly_sunny</span>: <br>Object<br>🎍 <span class="hljs-symbol">:bamboo</span>:💝 <span class="hljs-symbol">:gift_heart</span>:🎎 <span class="hljs-symbol">:dolls</span>:<br>🎒 <span class="hljs-symbol">:school_satchel</span>:🎓 <span class="hljs-symbol">:mortar_board</span>:🎏 <span class="hljs-symbol">:flags</span>:<br>🎆 <span class="hljs-symbol">:fireworks</span>:🎇 <span class="hljs-symbol">:sparkler</span>:🎐 <span class="hljs-symbol">:wind_chime</span>:<br>🎑 <span class="hljs-symbol">:rice_scene</span>:🎃 <span class="hljs-symbol">:jack_o_lantern</span>:👻 <span class="hljs-symbol">:ghost</span>:<br>🎅 <span class="hljs-symbol">:santa</span>:🎄 <span class="hljs-symbol">:christmas_tree</span>:🎁 <span class="hljs-symbol">:gift</span>:<br>🔔 <span class="hljs-symbol">:bell</span>:🔕 <span class="hljs-symbol">:no_bell</span>:🎋 <span class="hljs-symbol">:tanabata_tree</span>:<br>🎉 <span class="hljs-symbol">:tada</span>:🎊 <span class="hljs-symbol">:confetti_ball</span>:🎈 <span class="hljs-symbol">:balloon</span>:<br>🔮 <span class="hljs-symbol">:crystal_ball</span>:💿 <span class="hljs-symbol">:cd</span>:📀 <span class="hljs-symbol">:dvd</span>:<br>💾 <span class="hljs-symbol">:floppy_disk</span>:📷 <span class="hljs-symbol">:camera</span>:📹 <span class="hljs-symbol">:video_camera</span>:<br>🎥 <span class="hljs-symbol">:movie_camera</span>:💻 <span class="hljs-symbol">:computer</span>:📺 <span class="hljs-symbol">:tv</span>:<br>📱 <span class="hljs-symbol">:iphone</span>:☎️ <span class="hljs-symbol">:phone</span>:☎️ <span class="hljs-symbol">:telephone</span>:<br>📞 <span class="hljs-symbol">:telephone_receiver</span>:📟 <span class="hljs-symbol">:pager</span>:📠 <span class="hljs-symbol">:fax</span>:<br>💽 <span class="hljs-symbol">:minidisc</span>:📼 <span class="hljs-symbol">:vhs</span>:🔉 <span class="hljs-symbol">:sound</span>:<br>🔈 <span class="hljs-symbol">:speaker</span>:🔇 <span class="hljs-symbol">:mute</span>:📢 <span class="hljs-symbol">:loudspeaker</span>:<br>📣 <span class="hljs-symbol">:mega</span>:⌛️ <span class="hljs-symbol">:hourglass</span>:⏳ <span class="hljs-symbol">:hourglass_flowing_sand</span>:<br>⏰ <span class="hljs-symbol">:alarm_clock</span>:⌚️ <span class="hljs-symbol">:watch</span>:📻 <span class="hljs-symbol">:radio</span>:<br>📡 <span class="hljs-symbol">:satellite</span>:➿ <span class="hljs-symbol">:loop</span>:🔍 <span class="hljs-symbol">:mag</span>:<br>🔎 <span class="hljs-symbol">:mag_right</span>:🔓 <span class="hljs-symbol">:unlock</span>:🔒 <span class="hljs-symbol">:lock</span>:<br>🔏 <span class="hljs-symbol">:lock_with_ink_pen</span>:🔐 <span class="hljs-symbol">:closed_lock_with_key</span>:🔑 <span class="hljs-symbol">:key</span>:<br>💡 <span class="hljs-symbol">:bulb</span>:🔦 <span class="hljs-symbol">:flashlight</span>:🔆 <span class="hljs-symbol">:high_brightness</span>:<br>🔅 <span class="hljs-symbol">:low_brightness</span>:🔌 <span class="hljs-symbol">:electric_plug</span>:🔋 <span class="hljs-symbol">:battery</span>:<br>📲 <span class="hljs-symbol">:calling</span>:✉️ <span class="hljs-symbol">:email</span>:📫 <span class="hljs-symbol">:mailbox</span>:<br>📮 <span class="hljs-symbol">:postbox</span>:🛀 <span class="hljs-symbol">:bath</span>:🛁 <span class="hljs-symbol">:bathtub</span>:<br>🚿 <span class="hljs-symbol">:shower</span>:🚽 <span class="hljs-symbol">:toilet</span>:🔧 <span class="hljs-symbol">:wrench</span>:<br>🔩 <span class="hljs-symbol">:nut_and_bolt</span>:🔨 <span class="hljs-symbol">:hammer</span>:💺 <span class="hljs-symbol">:seat</span>:<br>💰 <span class="hljs-symbol">:moneybag</span>:💴 <span class="hljs-symbol">:yen</span>:💵 <span class="hljs-symbol">:dollar</span>:<br>💷 <span class="hljs-symbol">:pound</span>:💶 <span class="hljs-symbol">:euro</span>:💳 <span class="hljs-symbol">:credit_card</span>:<br>💸 <span class="hljs-symbol">:money_with_wings</span>:📧 <span class="hljs-symbol">:e-mail</span>:📥 <span class="hljs-symbol">:inbox_tray</span>:<br>📤 <span class="hljs-symbol">:outbox_tray</span>:✉️ <span class="hljs-symbol">:envelope</span>:📨 <span class="hljs-symbol">:incoming_envelope</span>:<br>📯 <span class="hljs-symbol">:postal_horn</span>:📪 <span class="hljs-symbol">:mailbox_closed</span>:📬 <span class="hljs-symbol">:mailbox_with_mail</span>:<br>📭 <span class="hljs-symbol">:mailbox_with_no_mail</span>:🚪 <span class="hljs-symbol">:door</span>:🚬 <span class="hljs-symbol">:smoking</span>:<br>💣 <span class="hljs-symbol">:bomb</span>:🔫 <span class="hljs-symbol">:gun</span>:🔪 <span class="hljs-symbol">:hocho</span>:<br>💊 <span class="hljs-symbol">:pill</span>:💉 <span class="hljs-symbol">:syringe</span>:📄 <span class="hljs-symbol">:page_facing_up</span>:<br>📃 <span class="hljs-symbol">:page_with_curl</span>:📑 <span class="hljs-symbol">:bookmark_tabs</span>:📊 <span class="hljs-symbol">:bar_chart</span>:<br>📈 <span class="hljs-symbol">:chart_with_upwards_trend</span>:📉 <span class="hljs-symbol">:chart_with_downwards_trend</span>:📜 <span class="hljs-symbol">:scroll</span>:<br>📋 <span class="hljs-symbol">:clipboard</span>:📆 <span class="hljs-symbol">:calendar</span>:📅 <span class="hljs-symbol">:date</span>:<br>📇 <span class="hljs-symbol">:card_index</span>:📁 <span class="hljs-symbol">:file_folder</span>:📂 <span class="hljs-symbol">:open_file_folder</span>:<br>✂️ <span class="hljs-symbol">:scissors</span>:📌 <span class="hljs-symbol">:pushpin</span>:📎 <span class="hljs-symbol">:paperclip</span>:<br>✒️ <span class="hljs-symbol">:black_nib</span>:✏️ <span class="hljs-symbol">:pencil2</span>:📏 <span class="hljs-symbol">:straight_ruler</span>:<br>📐 <span class="hljs-symbol">:triangular_ruler</span>:📕 <span class="hljs-symbol">:closed_book</span>:📗 <span class="hljs-symbol">:green_book</span>:<br>📘 <span class="hljs-symbol">:blue_book</span>:📙 <span class="hljs-symbol">:orange_book</span>:📓 <span class="hljs-symbol">:notebook</span>:<br>📔 <span class="hljs-symbol">:notebook_with_decorative_cover</span>:📒 <span class="hljs-symbol">:ledger</span>:📚 <span class="hljs-symbol">:books</span>:<br>🔖 <span class="hljs-symbol">:bookmark</span>:📛 <span class="hljs-symbol">:name_badge</span>:🔬 <span class="hljs-symbol">:microscope</span>:<br>🔭 <span class="hljs-symbol">:telescope</span>:📰 <span class="hljs-symbol">:newspaper</span>:🏈 <span class="hljs-symbol">:football</span>:<br>🏀 <span class="hljs-symbol">:basketball</span>:⚽️ <span class="hljs-symbol">:soccer</span>:⚾️ <span class="hljs-symbol">:baseball</span>:<br>🎾 <span class="hljs-symbol">:tennis</span>:🎱 <span class="hljs-symbol">:</span><span class="hljs-number">8</span><span class="hljs-symbol">ball:</span>🏉 <span class="hljs-symbol">:rugby_football</span>:<br>🎳 <span class="hljs-symbol">:bowling</span>:⛳️ <span class="hljs-symbol">:golf</span>:🚵 <span class="hljs-symbol">:mountain_bicyclist</span>:<br>🚴 <span class="hljs-symbol">:bicyclist</span>:🏇 <span class="hljs-symbol">:horse_racing</span>:🏂 <span class="hljs-symbol">:snowboarder</span>:<br>🏊 <span class="hljs-symbol">:swimmer</span>:🏄 <span class="hljs-symbol">:surfer</span>:🎿 <span class="hljs-symbol">:ski</span>:<br>♠️ <span class="hljs-symbol">:spades</span>:♥️ <span class="hljs-symbol">:hearts</span>:♣️ <span class="hljs-symbol">:clubs</span>:<br>♦️ <span class="hljs-symbol">:diamonds</span>:💎 <span class="hljs-symbol">:gem</span>:💍 <span class="hljs-symbol">:ring</span>:<br>🏆 <span class="hljs-symbol">:trophy</span>:🎼 <span class="hljs-symbol">:musical_score</span>:🎹 <span class="hljs-symbol">:musical_keyboard</span>:<br>🎻 <span class="hljs-symbol">:violin</span>:👾 <span class="hljs-symbol">:space_invader</span>:🎮 <span class="hljs-symbol">:video_game</span>:<br>🃏 <span class="hljs-symbol">:black_joker</span>:🎴 <span class="hljs-symbol">:flower_playing_cards</span>:🎲 <span class="hljs-symbol">:game_die</span>:<br>🎯 <span class="hljs-symbol">:dart</span>:🀄️ <span class="hljs-symbol">:mahjong</span>:🎬 <span class="hljs-symbol">:clapper</span>:<br>📝 <span class="hljs-symbol">:memo</span>:📝 <span class="hljs-symbol">:pencil</span>:📖 <span class="hljs-symbol">:book</span>:<br>🎨 <span class="hljs-symbol">:art</span>:🎤 <span class="hljs-symbol">:microphone</span>:🎧 <span class="hljs-symbol">:headphones</span>:<br>🎺 <span class="hljs-symbol">:trumpet</span>:🎷 <span class="hljs-symbol">:saxophone</span>:🎸 <span class="hljs-symbol">:guitar</span>:<br>👞 <span class="hljs-symbol">:shoe</span>:👡 <span class="hljs-symbol">:sandal</span>:👠 <span class="hljs-symbol">:high_heel</span>:<br>💄 <span class="hljs-symbol">:lipstick</span>:👢 <span class="hljs-symbol">:boot</span>:👕 <span class="hljs-symbol">:shirt</span>:<br>👕 <span class="hljs-symbol">:tshirt</span>:👔 <span class="hljs-symbol">:necktie</span>:👚 <span class="hljs-symbol">:womans_clothes</span>:<br>👗 <span class="hljs-symbol">:dress</span>:🎽 <span class="hljs-symbol">:running_shirt_with_sash</span>:👖 <span class="hljs-symbol">:jeans</span>:<br>👘 <span class="hljs-symbol">:kimono</span>:👙 <span class="hljs-symbol">:bikini</span>:🎀 <span class="hljs-symbol">:ribbon</span>:<br>🎩 <span class="hljs-symbol">:tophat</span>:👑 <span class="hljs-symbol">:crown</span>:👒 <span class="hljs-symbol">:womans_hat</span>:<br>👞 <span class="hljs-symbol">:mans_shoe</span>:🌂 <span class="hljs-symbol">:closed_umbrella</span>:💼 <span class="hljs-symbol">:briefcase</span>:<br>👜 <span class="hljs-symbol">:handbag</span>:👝 <span class="hljs-symbol">:pouch</span>:👛 <span class="hljs-symbol">:purse</span>:<br>👓 <span class="hljs-symbol">:eyeglasses</span>:🎣 <span class="hljs-symbol">:fishing_pole_and_fish</span>:☕️ <span class="hljs-symbol">:coffee</span>:<br>🍵 <span class="hljs-symbol">:tea</span>:🍶 <span class="hljs-symbol">:sake</span>:🍼 <span class="hljs-symbol">:baby_bottle</span>:<br>🍺 <span class="hljs-symbol">:beer</span>:🍻 <span class="hljs-symbol">:beers</span>:🍸 <span class="hljs-symbol">:cocktail</span>:<br>🍹 <span class="hljs-symbol">:tropical_drink</span>:🍷 <span class="hljs-symbol">:wine_glass</span>:🍴 <span class="hljs-symbol">:fork_and_knife</span>:<br>🍕 <span class="hljs-symbol">:pizza</span>:🍔 <span class="hljs-symbol">:hamburger</span>:🍟 <span class="hljs-symbol">:fries</span>:<br>🍗 <span class="hljs-symbol">:poultry_leg</span>:🍖 <span class="hljs-symbol">:meat_on_bone</span>:🍝 <span class="hljs-symbol">:spaghetti</span>:<br>🍛 <span class="hljs-symbol">:curry</span>:🍤 <span class="hljs-symbol">:fried_shrimp</span>:🍱 <span class="hljs-symbol">:bento</span>:<br>🍣 <span class="hljs-symbol">:sushi</span>:🍥 <span class="hljs-symbol">:fish_cake</span>:🍙 <span class="hljs-symbol">:rice_ball</span>:<br>🍘 <span class="hljs-symbol">:rice_cracker</span>:🍚 <span class="hljs-symbol">:rice</span>:🍜 <span class="hljs-symbol">:ramen</span>:<br>🍲 <span class="hljs-symbol">:stew</span>:🍢 <span class="hljs-symbol">:oden</span>:🍡 <span class="hljs-symbol">:dango</span>:<br>🥚 <span class="hljs-symbol">:egg</span>:🍞 <span class="hljs-symbol">:bread</span>:🍩 <span class="hljs-symbol">:doughnut</span>:<br>🍮 <span class="hljs-symbol">:custard</span>:🍦 <span class="hljs-symbol">:icecream</span>:🍨 <span class="hljs-symbol">:ice_cream</span>:<br>🍧 <span class="hljs-symbol">:shaved_ice</span>:🎂 <span class="hljs-symbol">:birthday</span>:🍰 <span class="hljs-symbol">:cake</span>:<br>🍪 <span class="hljs-symbol">:cookie</span>:🍫 <span class="hljs-symbol">:chocolate_bar</span>:🍬 <span class="hljs-symbol">:candy</span>:<br>🍭 <span class="hljs-symbol">:lollipop</span>:🍯 <span class="hljs-symbol">:honey_pot</span>:🍎 <span class="hljs-symbol">:apple</span>:<br>🍏 <span class="hljs-symbol">:green_apple</span>:🍊 <span class="hljs-symbol">:tangerine</span>:🍋 <span class="hljs-symbol">:lemon</span>:<br>🍒 <span class="hljs-symbol">:cherries</span>:🍇 <span class="hljs-symbol">:grapes</span>:🍉 <span class="hljs-symbol">:watermelon</span>:<br>🍓 <span class="hljs-symbol">:strawberry</span>:🍑 <span class="hljs-symbol">:peach</span>:🍈 <span class="hljs-symbol">:melon</span>:<br>🍌 <span class="hljs-symbol">:banana</span>:🍐 <span class="hljs-symbol">:pear</span>:🍍 <span class="hljs-symbol">:pineapple</span>:<br>🍠 <span class="hljs-symbol">:sweet_potato</span>:🍆 <span class="hljs-symbol">:eggplant</span>:🍅 <span class="hljs-symbol">:tomato</span>:<br>🌽 <span class="hljs-symbol">:corn</span>:  <br></code></pre></td></tr></table></figure><h1 id="2-Places"><a href="#2-Places" class="headerlink" title="2.Places"></a>2.Places</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs elixir">🏠 <span class="hljs-symbol">:house</span>:🏡 <span class="hljs-symbol">:house_with_garden</span>:🏫 <span class="hljs-symbol">:school</span>:<br>🏢 <span class="hljs-symbol">:office</span>:🏣 <span class="hljs-symbol">:post_office</span>:🏥 <span class="hljs-symbol">:hospital</span>:<br>🏦 <span class="hljs-symbol">:bank</span>:🏪 <span class="hljs-symbol">:convenience_store</span>:🏩 <span class="hljs-symbol">:love_hotel</span>:<br>🏨 <span class="hljs-symbol">:hotel</span>:💒 <span class="hljs-symbol">:wedding</span>:⛪️ <span class="hljs-symbol">:church</span>:<br>🏬 <span class="hljs-symbol">:department_store</span>:🏤 <span class="hljs-symbol">:european_post_office</span>:🌇 <span class="hljs-symbol">:city_sunrise</span>:<br>🌆 <span class="hljs-symbol">:city_sunset</span>:🏯 <span class="hljs-symbol">:japanese_castle</span>:🏰 <span class="hljs-symbol">:european_castle</span>:<br>⛺️ <span class="hljs-symbol">:tent</span>:🏭 <span class="hljs-symbol">:factory</span>:🗼 <span class="hljs-symbol">:tokyo_tower</span>:<br>🗾 <span class="hljs-symbol">:japan</span>:🗻 <span class="hljs-symbol">:mount_fuji</span>:🌄 <span class="hljs-symbol">:sunrise_over_mountains</span>:<br>🌅 <span class="hljs-symbol">:sunrise</span>:🌠 <span class="hljs-symbol">:stars</span>:🗽 <span class="hljs-symbol">:statue_of_liberty</span>:<br>🌉 <span class="hljs-symbol">:bridge_at_night</span>:🎠 <span class="hljs-symbol">:carousel_horse</span>:🌈 <span class="hljs-symbol">:rainbow</span>:<br>🎡 <span class="hljs-symbol">:ferris_wheel</span>:⛲️ <span class="hljs-symbol">:fountain</span>:🎢 <span class="hljs-symbol">:roller_coaster</span>:<br>🚢 <span class="hljs-symbol">:ship</span>:🚤 <span class="hljs-symbol">:speedboat</span>:⛵️ <span class="hljs-symbol">:boat</span>:<br>⛵️ <span class="hljs-symbol">:sailboat</span>:🚣 <span class="hljs-symbol">:rowboat</span>:⚓️ <span class="hljs-symbol">:anchor</span>:<br>🚀 <span class="hljs-symbol">:rocket</span>:✈️ <span class="hljs-symbol">:airplane</span>:🚁 <span class="hljs-symbol">:helicopter</span>:<br>🚂 <span class="hljs-symbol">:steam_locomotive</span>:🚊 <span class="hljs-symbol">:tram</span>:🚞 <span class="hljs-symbol">:mountain_railway</span>:<br>🚲 <span class="hljs-symbol">:bike</span>:🚡 <span class="hljs-symbol">:aerial_tramway</span>:🚟 <span class="hljs-symbol">:suspension_railway</span>:<br>🚠 <span class="hljs-symbol">:mountain_cableway</span>:🚜 <span class="hljs-symbol">:tractor</span>:🚙 <span class="hljs-symbol">:blue_car</span>:<br>🚘 <span class="hljs-symbol">:oncoming_automobile</span>:🚗 <span class="hljs-symbol">:car</span>:🚗 <span class="hljs-symbol">:red_car</span>:<br>🚕 <span class="hljs-symbol">:taxi</span>:🚖 <span class="hljs-symbol">:oncoming_taxi</span>:🚛 <span class="hljs-symbol">:articulated_lorry</span>:<br>🚌 <span class="hljs-symbol">:bus</span>:🚍 <span class="hljs-symbol">:oncoming_bus</span>:🚨 <span class="hljs-symbol">:rotating_light</span>:<br>🚓 <span class="hljs-symbol">:police_car</span>:🚔 <span class="hljs-symbol">:oncoming_police_car</span>:🚒 <span class="hljs-symbol">:fire_engine</span>:<br>🚑 <span class="hljs-symbol">:ambulance</span>:🚐 <span class="hljs-symbol">:minibus</span>:🚚 <span class="hljs-symbol">:truck</span>:<br>🚋 <span class="hljs-symbol">:train</span>:🚉 <span class="hljs-symbol">:station</span>:🚆 <span class="hljs-symbol">:train2</span>:<br>🚅 <span class="hljs-symbol">:bullettrain_front</span>:🚄 <span class="hljs-symbol">:bullettrain_side</span>:🚈 <span class="hljs-symbol">:light_rail</span>:<br>🚝 <span class="hljs-symbol">:monorail</span>:🚃 <span class="hljs-symbol">:railway_car</span>:🚎 <span class="hljs-symbol">:trolleybus</span>:<br>🎫 <span class="hljs-symbol">:ticket</span>:⛽️ <span class="hljs-symbol">:fuelpump</span>:🚦 <span class="hljs-symbol">:vertical_traffic_light</span>:<br>🚥 <span class="hljs-symbol">:traffic_light</span>:⚠️ <span class="hljs-symbol">:warning</span>:🚧 <span class="hljs-symbol">:construction</span>:<br>🔰 <span class="hljs-symbol">:beginner</span>:🏧 <span class="hljs-symbol">:atm</span>:🎰 <span class="hljs-symbol">:slot_machine</span>:<br>🚏 <span class="hljs-symbol">:busstop</span>:💈 <span class="hljs-symbol">:barber</span>:♨️ <span class="hljs-symbol">:hotsprings</span>:<br>🏁 <span class="hljs-symbol">:checkered_flag</span>:🎌 <span class="hljs-symbol">:crossed_flags</span>:🏮 <span class="hljs-symbol">:izakaya_lantern</span>:<br>🗿 <span class="hljs-symbol">:moyai</span>:🎪 <span class="hljs-symbol">:circus_tent</span>:🎭 <span class="hljs-symbol">:performing_arts</span>:<br>📍 <span class="hljs-symbol">:round_pushpin</span>:🚩 <span class="hljs-symbol">:triangular_flag_on_post</span>:🇯🇵 <span class="hljs-symbol">:jp</span>:<br>🇰🇷 <span class="hljs-symbol">:kr</span>:🇨🇳 <span class="hljs-symbol">:cn</span>:🇺🇸 <span class="hljs-symbol">:us</span>:<br>🇫🇷 <span class="hljs-symbol">:fr</span>:🇪🇸 <span class="hljs-symbol">:es</span>:🇮🇹 <span class="hljs-symbol">:it</span>:<br>🇷🇺 <span class="hljs-symbol">:ru</span>:🇬🇧 <span class="hljs-symbol">:gb</span>:🇬🇧 <span class="hljs-symbol">:uk</span>:<br>🇩🇪 <span class="hljs-symbol">:de</span>:  <br></code></pre></td></tr></table></figure><h1 id="3-Symbols"><a href="#3-Symbols" class="headerlink" title="3.Symbols"></a>3.Symbols</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">1</span>️⃣ <span class="hljs-symbol">:one</span>:<span class="hljs-number">2</span>️⃣ <span class="hljs-symbol">:two</span>:<span class="hljs-number">3</span>️⃣ <span class="hljs-symbol">:three</span>:<br><span class="hljs-number">4</span>️⃣ <span class="hljs-symbol">:four</span>:<span class="hljs-number">5</span>️⃣ <span class="hljs-symbol">:five</span>:<span class="hljs-number">6</span>️⃣ <span class="hljs-symbol">:six</span>:<br><span class="hljs-number">7</span>️⃣ <span class="hljs-symbol">:seven</span>:<span class="hljs-number">8</span>️⃣ <span class="hljs-symbol">:eight</span>:<span class="hljs-number">9</span>️⃣ <span class="hljs-symbol">:nine</span>:<br>🔟 <span class="hljs-symbol">:keycap_ten</span>:🔢 <span class="hljs-symbol">:</span><span class="hljs-number">1234</span>:0️⃣ <span class="hljs-symbol">:zero</span>:<br><span class="hljs-comment">#️⃣ :hash:🔣 :symbols:◀️ :arrow_backward:</span><br>⬇️ <span class="hljs-symbol">:arrow_down</span>:▶️ <span class="hljs-symbol">:arrow_forward</span>:⬅️ <span class="hljs-symbol">:arrow_left</span>:<br>🔠 <span class="hljs-symbol">:capital_abcd</span>:🔡 <span class="hljs-symbol">:abcd</span>:🔤 <span class="hljs-symbol">:abc</span>:<br>↙️ <span class="hljs-symbol">:arrow_lower_left</span>:↘️ <span class="hljs-symbol">:arrow_lower_right</span>:➡️ <span class="hljs-symbol">:arrow_right</span>:<br>⬆️ <span class="hljs-symbol">:arrow_up</span>:↖️ <span class="hljs-symbol">:arrow_upper_left</span>:↗️ <span class="hljs-symbol">:arrow_upper_right</span>:<br>⏬ <span class="hljs-symbol">:arrow_double_down</span>:⏫ <span class="hljs-symbol">:arrow_double_up</span>:🔽 <span class="hljs-symbol">:arrow_down_small</span>:<br>⤵️ <span class="hljs-symbol">:arrow_heading_down</span>:⤴️ <span class="hljs-symbol">:arrow_heading_up</span>:↩️<span class="hljs-symbol">:leftwards_arrow_with_hook</span>:<br>↪️ <span class="hljs-symbol">:arrow_right_hook</span>:↔️ <span class="hljs-symbol">:left_right_arrow</span>:↕️ <span class="hljs-symbol">:arrow_up_down</span>:<br>🔼 <span class="hljs-symbol">:arrow_up_small</span>:🔃 <span class="hljs-symbol">:arrows_clockwise</span>:🔄 <span class="hljs-symbol">:arrows_counterclockwise</span>:<br>⏪ <span class="hljs-symbol">:rewind</span>:⏩ <span class="hljs-symbol">:fast_forward</span>:ℹ️ <span class="hljs-symbol">:information_source</span>:<br>🆗 <span class="hljs-symbol">:ok</span>:🔀 <span class="hljs-symbol">:twisted_rightwards_arrows</span>:🔁 <span class="hljs-symbol">:repeat</span>:<br>🔂 <span class="hljs-symbol">:repeat_one</span>:🆕 <span class="hljs-symbol">:new</span>:🔝 <span class="hljs-symbol">:top</span>:<br>🆙 <span class="hljs-symbol">:up</span>:🆒 <span class="hljs-symbol">:cool</span>:🆓 <span class="hljs-symbol">:free</span>:<br>🆖 <span class="hljs-symbol">:ng</span>:🎦 <span class="hljs-symbol">:cinema</span>:🈁 <span class="hljs-symbol">:koko</span>:<br>📶 <span class="hljs-symbol">:signal_strength</span>:🈹 <span class="hljs-symbol">:u5272</span>:🈴 <span class="hljs-symbol">:u5408</span>:<br>🈺 <span class="hljs-symbol">:u55b6</span>:🈯️ <span class="hljs-symbol">:u6307</span>:🈷️ <span class="hljs-symbol">:u6708</span>:<br>🈶 <span class="hljs-symbol">:u6709</span>:🈵 <span class="hljs-symbol">:u6e80</span>:🈚️ <span class="hljs-symbol">:u7121</span>:<br>🈸 <span class="hljs-symbol">:u7533</span>:🈳 <span class="hljs-symbol">:u7a7a</span>:🈲 <span class="hljs-symbol">:u7981</span>:<br>🈂️ <span class="hljs-symbol">:sa</span>:🚻 <span class="hljs-symbol">:restroom</span>:🚹 <span class="hljs-symbol">:mens</span>:<br>🚺 <span class="hljs-symbol">:womens</span>:🚼 <span class="hljs-symbol">:baby_symbol</span>:🚭 <span class="hljs-symbol">:no_smoking</span>:<br>🅿️ <span class="hljs-symbol">:parking</span>:♿️ <span class="hljs-symbol">:wheelchair</span>:🚇 <span class="hljs-symbol">:metro</span>:<br>🛄 <span class="hljs-symbol">:baggage_claim</span>:🉑 <span class="hljs-symbol">:accept</span>:🚾 <span class="hljs-symbol">:wc</span>:<br>🚰 <span class="hljs-symbol">:potable_water</span>:🚮 <span class="hljs-symbol">:put_litter_in_its_place</span>:㊙️ <span class="hljs-symbol">:secret</span>:<br>㊗️ <span class="hljs-symbol">:congratulations</span>:Ⓜ️ <span class="hljs-symbol">:m</span>:🛂 <span class="hljs-symbol">:passport_control</span>:<br>🛅 <span class="hljs-symbol">:left_luggage</span>:🛃 <span class="hljs-symbol">:customs</span>:🉐 <span class="hljs-symbol">:ideograph_advantage</span>:<br>🆑 <span class="hljs-symbol">:cl</span>:🆘 <span class="hljs-symbol">:sos</span>:🆔 <span class="hljs-symbol">:id</span>:<br>🚫 <span class="hljs-symbol">:no_entry_sign</span>:🔞 <span class="hljs-symbol">:underage</span>:📵 <span class="hljs-symbol">:no_mobile_phones</span>:<br>🚯 <span class="hljs-symbol">:do_not_litter</span>:🚱 <span class="hljs-symbol">:non-potable_water</span>:🚳 <span class="hljs-symbol">:no_bicycles</span>:<br>🚷 <span class="hljs-symbol">:no_pedestrians</span>:🚸 <span class="hljs-symbol">:children_crossing</span>:⛔️ <span class="hljs-symbol">:no_entry</span>:<br>✳️ <span class="hljs-symbol">:eight_spoked_asterisk</span>:✴️ <span class="hljs-symbol">:eight_pointed_black_star</span>:💟 <span class="hljs-symbol">:heart_decoration</span>:<br>🆚 <span class="hljs-symbol">:vs</span>:📳 <span class="hljs-symbol">:vibration_mode</span>:📴 <span class="hljs-symbol">:mobile_phone_off</span>:<br>💹 <span class="hljs-symbol">:chart</span>:💱 <span class="hljs-symbol">:currency_exchange</span>:♈️ <span class="hljs-symbol">:aries</span>:<br>♉️ <span class="hljs-symbol">:taurus</span>:♊️ <span class="hljs-symbol">:gemini</span>:♋️ <span class="hljs-symbol">:cancer</span>:<br>♌️ <span class="hljs-symbol">:leo</span>:♍️ <span class="hljs-symbol">:virgo</span>:♎️ <span class="hljs-symbol">:libra</span>:<br>♏️ <span class="hljs-symbol">:scorpius</span>:♐️ <span class="hljs-symbol">:sagittarius</span>:♑️ <span class="hljs-symbol">:capricorn</span>:<br>♒️ <span class="hljs-symbol">:aquarius</span>:♓️ <span class="hljs-symbol">:pisces</span>:⛎ <span class="hljs-symbol">:ophiuchus</span>:<br>🔯 <span class="hljs-symbol">:six_pointed_star</span>:❎<span class="hljs-symbol">:negative_squared_cross_mark</span>:🅰️ <span class="hljs-symbol">:a</span>:<br>🅱️ <span class="hljs-symbol">:b</span>:🆎 <span class="hljs-symbol">:ab</span>:🅾️ <span class="hljs-symbol">:o2</span>:<br>💠<span class="hljs-symbol">:diamond_shape_with_a_dot_inside</span>:♻️ <span class="hljs-symbol">:recycle</span>:🔚 <span class="hljs-symbol">:end</span>:<br>🔛 <span class="hljs-symbol">:on</span>:🔜 <span class="hljs-symbol">:soon</span>:🕐 <span class="hljs-symbol">:clock1</span>:<br>🕜 <span class="hljs-symbol">:clock130</span>:🕙 <span class="hljs-symbol">:clock10</span>:🕥 <span class="hljs-symbol">:clock1030</span>:<br>🕚 <span class="hljs-symbol">:clock11</span>:🕦 <span class="hljs-symbol">:clock1130</span>:🕛 <span class="hljs-symbol">:clock12</span>:<br>🕧 <span class="hljs-symbol">:clock1230</span>:🕑 <span class="hljs-symbol">:clock2</span>:🕝 <span class="hljs-symbol">:clock230</span>:<br>🕒 <span class="hljs-symbol">:clock3</span>:🕞 <span class="hljs-symbol">:clock330</span>:🕓 <span class="hljs-symbol">:clock4</span>:<br>🕟 <span class="hljs-symbol">:clock430</span>:🕔 <span class="hljs-symbol">:clock5</span>:🕠 <span class="hljs-symbol">:clock530</span>:<br>🕕 <span class="hljs-symbol">:clock6</span>:🕡 <span class="hljs-symbol">:clock630</span>:🕖 <span class="hljs-symbol">:clock7</span>:<br>🕢 <span class="hljs-symbol">:clock730</span>:🕗 <span class="hljs-symbol">:clock8</span>:🕣 <span class="hljs-symbol">:clock830</span>:<br>🕘 <span class="hljs-symbol">:clock9</span>:🕤 <span class="hljs-symbol">:clock930</span>:💲 <span class="hljs-symbol">:heavy_dollar_sign</span>:<br>©️ <span class="hljs-symbol">:copyright</span>:®️ <span class="hljs-symbol">:registered</span>:™️ <span class="hljs-symbol">:tm</span>:<br>❌ <span class="hljs-symbol">:x</span>:❗️ <span class="hljs-symbol">:heavy_exclamation_mark</span>:‼️ <span class="hljs-symbol">:bangbang</span>:<br>⁉️ <span class="hljs-symbol">:interrobang</span>:⭕️ <span class="hljs-symbol">:o</span>:✖️ <span class="hljs-symbol">:heavy_multiplication_x</span>:<br>➕ <span class="hljs-symbol">:heavy_plus_sign</span>:➖ <span class="hljs-symbol">:heavy_minus_sign</span>:➗ <span class="hljs-symbol">:heavy_division_sign</span>:<br>💮 <span class="hljs-symbol">:white_flower</span>:💯 <span class="hljs-symbol">:</span><span class="hljs-number">100</span>:✔️ <span class="hljs-symbol">:heavy_check_mark</span>:<br>☑️ <span class="hljs-symbol">:ballot_box_with_check</span>:🔘 <span class="hljs-symbol">:radio_button</span>:🔗 <span class="hljs-symbol">:link</span>:<br>➰ <span class="hljs-symbol">:curly_loop</span>:〰️ <span class="hljs-symbol">:wavy_dash</span>:〽️ <span class="hljs-symbol">:part_alternation_mark</span>:<br>🔱 <span class="hljs-symbol">:trident</span>:<span class="hljs-symbol">:black_square</span>: <span class="hljs-symbol">:black_square</span>:<span class="hljs-symbol">:white_square</span>: <span class="hljs-symbol">:white_square</span>:<br>✅ <span class="hljs-symbol">:white_check_mark</span>:🔲 <span class="hljs-symbol">:black_square_button</span>:🔳 <span class="hljs-symbol">:white_square_button</span>:<br>⚫️ <span class="hljs-symbol">:black_circle</span>:⚪️ <span class="hljs-symbol">:white_circle</span>:🔴 <span class="hljs-symbol">:red_circle</span>:<br>🔵 <span class="hljs-symbol">:large_blue_circle</span>:🔷 <span class="hljs-symbol">:large_blue_diamond</span>:🔶 <span class="hljs-symbol">:large_orange_diamond</span>:<br>🔹 <span class="hljs-symbol">:small_blue_diamond</span>:🔸 <span class="hljs-symbol">:small_orange_diamond</span>:🔺 <span class="hljs-symbol">:small_red_triangle</span>:<br>🔻 <span class="hljs-symbol">:small_red_triangle_down</span>:  <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown系列之使用Typora软件编写Markdown</title>
      <link href="/posts/Markdown/"/>
      <url>/posts/Markdown/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Markdown教程"><a href="#一、Markdown教程" class="headerlink" title="一、Markdown教程"></a>一、Markdown教程</h3><p><code>Markdown</code>是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><h3 id="二、Markdown语法"><a href="#二、Markdown语法" class="headerlink" title="二、Markdown语法"></a>二、Markdown语法</h3><p><img src="https://cdn.jsdelivr.net/gh/aurora811/image-hosting@master/image/MarkDown%E8%AF%AD%E6%B3%95.png" alt="MarkDown语法"></p><p>我这里推荐使用<a href="https://support.typora.io/">Typora</a> 来编写<code>MarkDown</code>。 </p><blockquote><ol><li>这里我推荐去看&lt;&lt;了不起的Markdown&gt;&gt;这本书 </li><li>去<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程看Markdown教程</a></li></ol></blockquote><h4 id="1、目录"><a href="#1、目录" class="headerlink" title="1、目录"></a>1、目录</h4><p>在*.md文件开头输入<code>[toc]</code>,会从文档中提取所有标题，并且当您添加到文档中时，其内容会自动更新   </p><h4 id="2、标题"><a href="#2、标题" class="headerlink" title="2、标题"></a>2、标题</h4><p>使用<code>#</code>号可表示<code>1-6</code>级标题，一级标题对应一个<code>#</code>号，二级标题对应两个<code>#</code>号，以此类推。</p><h4 id="3、段落和换行符"><a href="#3、段落和换行符" class="headerlink" title="3、段落和换行符"></a>3、段落和换行符</h4><p>行尾保留两个空格，或插入<code>&lt;br/&gt;</code></p><h4 id="4、文本样式"><a href="#4、文本样式" class="headerlink" title="4、文本样式"></a>4、文本样式</h4><ul><li><p>斜体：<em>强调文本</em>   <em>强调文本</em></p></li><li><p>加粗：<strong>加粗文本</strong>    <strong>加粗文本</strong></p></li><li><p>突出：==标记文本==</p></li><li><p>删除线：<del>删除文本</del></p></li><li><blockquote><p>引用文本</p></blockquote></li><li><p>下标：H<del>2</del>O is是液体。</p></li><li><p>上标：2^10^ 运算结果是 1024。</p></li></ul><h4 id="5、列表"><a href="#5、列表" class="headerlink" title="5、列表"></a>5、列表</h4><h5 id="5-1、无序列表："><a href="#5-1、无序列表：" class="headerlink" title="5.1、无序列表："></a>5.1、无序列表：</h5><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><h5 id="5-2、有序列表："><a href="#5-2、有序列表：" class="headerlink" title="5.2、有序列表："></a>5.2、有序列表：</h5><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><h5 id="5-3、任务列表"><a href="#5-3、任务列表" class="headerlink" title="5.3、任务列表"></a>5.3、任务列表</h5><p>任务列表是带有标记为[]或者[x]的列表：</p><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h4 id="6、代码块"><a href="#6、代码块" class="headerlink" title="6、代码块"></a>6、代码块</h4><p><code>hello</code></p><p><code>hello</code></p><h4 id="7、图片"><a href="#7、图片" class="headerlink" title="7、图片"></a>7、图片</h4><p>链接: <a href="https://www.csdn.net/">link</a> </p><p>图片: <img src="https://gitee.com/Aurora811/image/raw/master/markdown.png" alt="Alt"> </p><h4 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h4><table><thead><tr><th>项目</th><th><span style="display:inline-block;width:100px">Value</span></th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><table><thead><tr><th align="center">Column 1</th><th align="right">Column 2</th></tr></thead><tbody><tr><td align="center">centered 文本居中</td><td align="right">right-aligned 文本居右</td></tr></tbody></table><p>最左侧的冒号表示左对齐的列；最右边的冒号表示右对齐的列；两侧的冒号表示中心对齐的 </p><h4 id="9、html"><a href="#9、html" class="headerlink" title="9、html"></a>9、html</h4><p>添加红色文本:<br><span style="color:red">this text is red</span>  </p><p>添加下划线:<br><u>下划线</u>    </p><p>内联Html:<br><span style="color:red">this text is red</span> </p><p><span style="color:green">this text is red</span> </p><ruby>     漢    <rt>       ㄏㄢˋ    </rt></ruby><p><kbd>Ctrl</kbd>+<kbd>F9</kbd></p><p><span style="font-size:2rem; background:yellow;"><strong>Bigger</strong></span></p><p>HTML entities like &reg; &#182;</p><p>&frac14; → ¼, &#x1D517;<br><span style="display:none">I am hidden after export</span></p><p>媒体<br>添加视频：<br><vido src = "1.mp4"/><br>添加音频：<br><audio src = "2.mp3"/><br>Typora支持使用语法的HTML注释<!-- comments --> </p><!-- I am some comments not end, not end... here the comment ends -->  <h4 id="10、注释"><a href="#10、注释" class="headerlink" title="10、注释"></a>10、注释</h4><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h4 id="11、注脚"><a href="#11、注脚" class="headerlink" title="11、注脚"></a>11、注脚</h4><p>一个具有注脚的文本。<a href="%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A">^1</a></p><p>上面实现的源码:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">### 目录  </span><br>在<span class="hljs-emphasis">*.md文件开头输入`[toc]`,会从文档中提取所有标题，并且当您添加到文档中时，其内容会自动更新   </span><br><span class="hljs-emphasis">### 标题</span><br><span class="hljs-emphasis">使用`#`号可表示`1-6`级标题，一级标题对应一个`#`号，二级标题对应两个`#`号，以此类推。</span><br><span class="hljs-emphasis">### 段落和换行符  </span><br><span class="hljs-emphasis">行尾保留两个空格，或插入`<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span>`</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 文本样式</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 斜体：*</span>强调文本<span class="hljs-emphasis">*   _强调文本_</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 加粗：<span class="hljs-strong">**加粗文本**</span>    <span class="hljs-strong">__加粗文本__</span></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 突出：==标记文本==</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 删除线：~~删除文本~~</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- &gt; 引用文本</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 下标：H~2~O is是液体。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 上标：2^10^ 运算结果是 1024。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 列表</span><br><span class="hljs-emphasis">#### 无序列表：</span><br><span class="hljs-emphasis">- 项目</span><br><span class="hljs-emphasis">  *</span> 项目<br><span class="hljs-bullet">    +</span> 项目<br><br><span class="hljs-section">#### 有序列表：</span><br><span class="hljs-bullet">1.</span> 项目1<br><span class="hljs-bullet">2.</span> 项目2<br><span class="hljs-bullet">3.</span> 项目3<br><br><span class="hljs-section">#### 任务列表</span><br>任务列表是带有标记为[]或者[x]的列表：<br><span class="hljs-bullet">-</span> [ ] 计划任务<br><span class="hljs-bullet">-</span> [x] 完成任务<br><br><br><span class="hljs-section">### 代码块</span><br><span class="hljs-code">`hello`</span><br><br>​<span class="hljs-code">```hello```</span><br><br><span class="hljs-section">### 图片</span><br>链接: [<span class="hljs-string">link</span>](<span class="hljs-link">https://www.csdn.net/</span>).  <br><br>图片: ![<span class="hljs-string">Alt</span>](<span class="hljs-link">https://gitee.com/Aurora811/image/raw/master/markdown.png</span>) <br><br><br><span class="hljs-section">### 表格</span><br>项目     | <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:inline-block;width:100px&quot;</span>&gt;</span></span>Value<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>-------- | -----<br>电脑  | $1600<br>手机  | $12<br>导管  | $1<br><br>| Column 1 | Column 2      |<br>|:--------:| -------------:|<br>| centered 文本居中 | right-aligned 文本居右 |<br><br>最左侧的冒号表示左对齐的列；最右边的冒号表示右对齐的列；两侧的冒号表示中心对齐的 <br><span class="hljs-section">### html</span><br>添加红色文本:    <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span></span>this text is red<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>      <br>添加下划线:         <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>    <br> <br><br>内联Html:     <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span></span>this text is red<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>   <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:green&quot;</span>&gt;</span></span>this text is red<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>   <br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span></span> 漢 <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span></span> ㄏㄢˋ <span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span></span> <span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>F9<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:2rem; background:yellow;&quot;</span>&gt;</span></span><span class="hljs-strong">**Bigger**</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br>HTML entities like &amp;reg; &amp;#182;<br><br>&amp;frac14; → ¼, &amp;#x1D517;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span></span>I am hidden after export<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br>媒体<br>添加视频：      <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">vido</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;1.mp4&quot;</span>/&gt;</span></span>    <br>添加音频：      <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;2.mp3&quot;</span>/&gt;</span></span> <br><br><br><br>Typora支持使用语法的HTML注释&lt;!-- comments --&gt; <br><br>&lt;!-- I am some comments not end, not end... here the comment ends --&gt;  <br><br><span class="hljs-section">### 注释</span><br>Markdown将文本转换为 HTML。<br><br><span class="hljs-emphasis">*[HTML]:   超文本标记语言</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 注脚</span><br><span class="hljs-emphasis">一个具有注脚的文本。[^1]</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[^1]: 注脚的解释</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown系列之Markdown编译器介绍</title>
      <link href="/posts/Tools/Typora/"/>
      <url>/posts/Tools/Typora/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Markdown编译器"><a href="#1-Markdown编译器" class="headerlink" title="1.Markdown编译器"></a>1.Markdown编译器</h1><p>Markdown编辑器深受技术人员的喜爱，Markdown可以用来编写说明文档，用它写的文档很多技术平台都能通用；Markdown可以用来写技术博客，可以使说明部分和代码都非常清晰易读；Markdown格式转换方便，还可以轻松地将文本转换为 html、pdf和world等。</p><h1 id="2-Markdown编译器的分类"><a href="#2-Markdown编译器的分类" class="headerlink" title="2.Markdown编译器的分类"></a>2.Markdown编译器的分类</h1><p>对Markdown的使用环境，可以分为：</p><ol><li>平台集成工具</li></ol><p>  各大在线博客、社区平台如CSDN、博客园、简书等。</p><ol start="2"><li>独立的软件类</li></ol><p>  可以在自己电脑上运行<a href="http://markdownpad.com/download/markdownpad2-setup.exe">MarkdownPad 2</a>、<a href="https://www.typora.io/">Typora</a>等。</p><ol start="3"><li>插件类</li></ol><p>  编译器的本身不具有Markdown的功能，可以通过安装插件来使编译器有Markdown，比如<a href="https://code.visualstudio.com/">VS code</a>、Sublime Text等</p><h1 id="3-Typora"><a href="#3-Typora" class="headerlink" title="3.Typora"></a>3.Typora</h1><p>Typora是一个程序员常用的文本编辑器，操作及界面简单，尤其常用于Blog的书写。</p><h2 id="3-1安装Typora"><a href="#3-1安装Typora" class="headerlink" title="3.1安装Typora"></a>3.1安装Typora</h2><ul><li>Typora官网<br>  <a href="https://www.typora.io/">https://www.typora.io/</a></li><li>Typora加速网站<br>  <a href="https://gitee.com/typora-mirror/Typora-Mirror/releases">https://gitee.com/typora-mirror/Typora-Mirror/releases</a></li></ul><h2 id="3-2-安装Pandoc"><a href="#3-2-安装Pandoc" class="headerlink" title="3.2 安装Pandoc"></a>3.2 安装Pandoc</h2><p>在使用Typora的过程中我常使用导入和导出功能，但是在使用的过程中需要安装<a href="http://pandoc.org/">Pandoc</a>(&gt;=V1.16)</p><ul><li>这里我下载<a href="https://github.com/jgm/pandoc/releases">Pandoc-2.17.0.1</a></li></ul><h2 id="3-2安装PicGo"><a href="#3-2安装PicGo" class="headerlink" title="3.2安装PicGo"></a>3.2安装PicGo</h2><p>在写博客的时候，总是需要插入图片，图片存在本地的话上传到博客网站去就没法显示了，就算一个图一个图的复制粘贴上去，并且</p><blockquote><p>持续更新中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker系列之Docker入门</title>
      <link href="/posts/Docker/"/>
      <url>/posts/Docker/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Docker的使用"><a href="#1-Docker的使用" class="headerlink" title="1.Docker的使用"></a>1.Docker的使用</h3><h4 id="1-1运行Hello-World"><a href="#1-1运行Hello-World" class="headerlink" title="1.1运行Hello World"></a>1.1运行Hello World</h4><p>在docker中可以在容器中运行应用程序,我们使用<code>docker run</code>命令来实现在一个容器中运行一个应用程序。<br>    <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run ubuntu <span class="hljs-regexp">/bin/</span>echo <span class="hljs-string">&quot;Hello world&quot;</span> <span class="hljs-regexp">//</span>Docker 以 ubuntu镜像创建一个新容器，然后在容器里执行 bin/echo  <span class="hljs-string">&quot;Hello world&quot;</span>，然后输出结果。<br></code></pre></td></tr></table></figure></p><h4 id="1-1运行交互式的容器"><a href="#1-1运行交互式的容器" class="headerlink" title="1.1运行交互式的容器"></a>1.1运行交互式的容器</h4><p>我们通过使用<code>-t -i</code>,来让docker运行的容器实现“对话”的功能：<br>    <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -i -t ubuntu <span class="hljs-regexp">/bin/</span>bash       <br><span class="hljs-regexp">//</span>参数说明：        <br>        -t 在新容器内制定一个伪终端或终端      <br>        -i 允许你的容器内的标准输入进行交互       <br>cat <span class="hljs-regexp">/proc/</span>version  <span class="hljs-regexp">//</span>查看当前系统的版本信息         <br>ls <span class="hljs-regexp">//</span>查看容器下的文件列表       <br></code></pre></td></tr></table></figure></p><p><img src="https://note.youdao.com/yws/api/personal/file/2394E7BEFB764405AFB082934354072B?method=download&shareKey=f890c55153028bd9d60524f9a95554cd" alt="运行交互式的容器"></p><h4 id="1-1启动容器-后台模式"><a href="#1-1启动容器-后台模式" class="headerlink" title="1.1启动容器(后台模式)"></a>1.1启动容器(后台模式)</h4><p>可以使用下面命令来创建一个以进程方式运行的容器:     </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d ubuntu <span class="hljs-regexp">/bin/</span>sh -c <span class="hljs-string">&quot;while true; do echo hello world; sleep 1; done&quot;</span> <span class="hljs-regexp">//</span>运行之后我们并没有看到输入“Hello world”,而看到的是容器的ID   <br>docker ps  <span class="hljs-regexp">//</span>查看确定容器是否在运行 <br><span class="hljs-regexp">//</span>查看容器内的标准输出                    <br>docker logs &lt;容器ID&gt;                      <br>docker logs &lt;自动分配的容器名称&gt;  <br><span class="hljs-regexp">//</span>删除一个容器<br>docker rm -f &lt;容器 ID&gt;     <br><span class="hljs-regexp">//</span>以清理掉所有处于终止状态的容器。     <br>docker container prune      <br></code></pre></td></tr></table></figure><h3 id="2-容器使用"><a href="#2-容器使用" class="headerlink" title="2.容器使用"></a>2.容器使用</h3><ul><li>2.1获取镜像 <code>docker pull ubuntu</code></li><li>2.2启动容器 <code>docker run -it ubuntu /bin/bash</code></li><li>2.3后台运行 <code>docker run -itd --name ubuntu-test ubuntu /bin/bash    //设置容器名为ubuntu-test </code></li><li>2.3启动已经停止的容器   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker ps -a <span class="hljs-regexp">//</span>查看所有容器<br>docker start &lt;容器 ID&gt;  <span class="hljs-regexp">//</span>启动一个已停止的容器<br></code></pre></td></tr></table></figure></li><li>2.4停止一个容器   <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//停止容器</span><br>docker stop <span class="hljs-params">&lt;容器 ID&gt;</span><br>docker stop <span class="hljs-params">&lt;自动分配的容器名称&gt;</span> <br><span class="hljs-comment">//重启容器</span><br>docker restart <span class="hljs-params">&lt;容器 ID&gt;</span><br>docker restart <span class="hljs-params">&lt;自动分配的容器名称&gt;</span> <br></code></pre></td></tr></table></figure></li><li>2.5进入后台容器  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker ps <span class="hljs-regexp">//</span>查看运行的容器<br>docker attach &lt;运行容器 ID&gt; or &lt;运行容器的容器名&gt; <br>docker exec -it &lt;运行容器 ID&gt; <span class="hljs-regexp">/bin/</span>bash  <span class="hljs-regexp">//</span>使用<span class="hljs-keyword">exit</span>或者ctrl +D退出，后台容器不会退出<br></code></pre></td></tr></table></figure></li><li>2.6导出和导入容器  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker export &lt;容器 ID&gt; &gt; ubuntu.tar  <span class="hljs-regexp">//</span>导出容器<br>cat <span class="hljs-regexp">/root/u</span>buntu.tar  |docker import - test<span class="hljs-regexp">/ubuntu:v1  /</span><span class="hljs-regexp">/导入容器</span><br></code></pre></td></tr></table></figure></li><li>2.7查看端口的映射情况  <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">docker <span class="hljs-keyword">port</span> <span class="hljs-variable">&lt;容器ID&gt;</span><br>docker <span class="hljs-keyword">port</span> <span class="hljs-variable">&lt;自动分配的容器名称&gt;</span> <br></code></pre></td></tr></table></figure></li></ul><blockquote><p>注意：如果你这里使用exit或者ctrl +D的话，后台运行的容器就会直接退出。推荐大家使用<code>docker exec</code>命令，因为此退出容器终端，不会导致容器的停止。</p></blockquote><h3 id="3-Docker镜像使用"><a href="#3-Docker镜像使用" class="headerlink" title="3.Docker镜像使用"></a>3.Docker镜像使用</h3><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><h4 id="3-1列出镜像列表"><a href="#3-1列出镜像列表" class="headerlink" title="3.1列出镜像列表"></a>3.1列出镜像列表</h4><p>在root用户下，我们可以通过使用<code>docker images</code>来列出本地主机上的镜像。<br><img src="https://note.youdao.com/yws/api/personal/file/AA1D360E53344577BD3516E400D8A513?method=download&shareKey=001559875f7df3e7160281b8c4aaaa58" alt="Docker images 列出镜像"></p><p>还可以使用以下命令:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker search ubuntu <span class="hljs-regexp">//</span>查找镜像<br>docker pull ubuntu:<span class="hljs-number">13.10</span> <span class="hljs-regexp">//</span>获取新的镜像<br>docker rmi hello-world <span class="hljs-regexp">//</span>删除镜像<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之MySQL基本操作</title>
      <link href="/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MySQL命令"><a href="#1-MySQL命令" class="headerlink" title="1.MySQL命令"></a>1.MySQL命令</h1><h2 id="1-1MySQL操作"><a href="#1-1MySQL操作" class="headerlink" title="1.1MySQL操作"></a>1.1MySQL操作</h2><h3 id="1-1-1启动和停止服务操作"><a href="#1-1-1启动和停止服务操作" class="headerlink" title="1.1.1启动和停止服务操作"></a>1.1.1启动和停止服务操作</h3><p>在命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">service mysql start  //开始mysql服务<br>service mysql stop   //停止mysql服务<br>service mysql restart  //重新启动mysql服务<br></code></pre></td></tr></table></figure><h3 id="1-1-2查看MySQL服务"><a href="#1-1-2查看MySQL服务" class="headerlink" title="1.1.2查看MySQL服务"></a>1.1.2查看MySQL服务</h3><p>在命令行输入：<code>ps -e|grep mysql</code></p><h3 id="1-1-3登录mysql数据库"><a href="#1-1-3登录mysql数据库" class="headerlink" title="1.1.3登录mysql数据库"></a>1.1.3登录mysql数据库</h3><p>在命令行输入：<code>mysql -u root -p</code></p><h2 id="1-2MySQL数据库操作"><a href="#1-2MySQL数据库操作" class="headerlink" title="1.2MySQL数据库操作"></a>1.2MySQL数据库操作</h2><p>mysql数据库操作与sql语句(对大小写不敏感)</p><h3 id="1-2-1显示已经存在的数据库"><a href="#1-2-1显示已经存在的数据库" class="headerlink" title="1.2.1显示已经存在的数据库"></a>1.2.1显示已经存在的数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>+--------------------+<br>3 rows in set (0.05 sec)<br></code></pre></td></tr></table></figure><h3 id="1-2-2创建一个新的数据库"><a href="#1-2-2创建一个新的数据库" class="headerlink" title="1.2.2创建一个新的数据库"></a>1.2.2创建一个新的数据库</h3><p>命令格式：create database 数据库的名字（DB_dbname）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create database db_test;  //db_test为数据库的名字<br>Query OK, 1 row affected (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="1-2-3使用指定的数据库"><a href="#1-2-3使用指定的数据库" class="headerlink" title="1.2.3使用指定的数据库"></a>1.2.3使用指定的数据库</h3><p>命令格式:use 查看的数据名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use db_test;  //db_test为查看的数据库名<br>Database changed<br></code></pre></td></tr></table></figure><h3 id="1-2-4查看数据库中的表"><a href="#1-2-4查看数据库中的表" class="headerlink" title="1.2.4查看数据库中的表"></a>1.2.4查看数据库中的表</h3><p>命令格式：show tables;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show tables;<br>Empty set<br></code></pre></td></tr></table></figure><h3 id="1-2-5创建数据库表"><a href="#1-2-5创建数据库表" class="headerlink" title="1.2.5创建数据库表"></a>1.2.5创建数据库表</h3><p>在此说明数据记录的属性：</p><blockquote><p>关键概念：<br>字段名：表格的列名</p><p>数据类型：该列数据的存储类型（主要有数据类型、时间日期类型和字符串类型）</p></blockquote><table><thead><tr><th>数据类型</th><th>字节数(byte)</th></tr></thead><tbody><tr><td>int</td><td>4</td></tr><tr><td>float</td><td>4</td></tr><tr><td>tinyint</td><td>1</td></tr><tr><td>Bigint</td><td>8</td></tr><tr><td>double</td><td>8</td></tr></tbody></table><blockquote><p>注:int和double比较重要</p></blockquote><table><thead><tr><th>时间日期类型</th><th>格式</th><th>范围</th></tr></thead><tbody><tr><td>date</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-31</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td></tr><tr><td>YEAR</td><td>YYYY</td><td>1901-2155</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD</td><td>HH:MM:SS</td></tr></tbody></table><blockquote><p>注:date和time比较重要</p></blockquote><table><thead><tr><th>字符串类型</th><th>范围(byte)</th><th>名称</th></tr></thead><tbody><tr><td>varchar</td><td>0-65535</td><td>变长字符串</td></tr><tr><td>text</td><td>0-65535</td><td>长文本数据</td></tr><tr><td>longtext</td><td>0-4294967295</td><td>极大文本数据</td></tr></tbody></table><blockquote><p>注:varchar比较重要</p></blockquote><p>命令格式：create table 表名 (字段名1 数据类型, 字段名2 数据类型… 字段名n 数据类型);</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(id <span class="hljs-type">int</span>,<span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)); //创建表名为student<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.03</span> sec)<br></code></pre></td></tr></table></figure><p>创建表格时实现唯一性约束:<br>create table 表名 (字段名1 数据类型 not NULL, 字段名2 数据类型… 字段名n 数据类型,UNIQUE (字段名1)); //not NULL非空约束，UNIQUE设置唯一<br>例如：<br><code>create table student_1(id int not NULL,name varchar(50),UNIQUE (id));</code></p><h3 id="1-2-6向表中插入数据"><a href="#1-2-6向表中插入数据" class="headerlink" title="1.2.6向表中插入数据"></a>1.2.6向表中插入数据</h3><p>查看表结构：desccribe 表名;或者desc 表名;<br>插入数据的语法格式： insert into 表名 values(value1, value2,..valuen);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc student;<br>+-------+-------------+------+-----+---------+-------+<br>| Field | Type        | Null | Key | Default | Extra |<br>+-------+-------------+------+-----+---------+-------+<br>| id    | int(11)     | YES  |     | NULL    |       |<br>| name  | varchar(20) | YES  |     | NULL    |       |<br>+-------+-------------+------+-----+---------+-------+<br>2 rows in set (0.04 sec)<br>mysql&gt; insert into student values(1,&#x27;xiaoming&#x27;);<br>Query OK, 1 row affected (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="1-2-7查询表中的记录"><a href="#1-2-7查询表中的记录" class="headerlink" title="1.2.7查询表中的记录"></a>1.2.7查询表中的记录</h3><p>语法格式：select 字段1，字段2 ..字段n from 表名 [where Clause] [Limit N];</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;   <br>mysql&gt; select id from student;<br>mysql&gt; select * from student where id = 1;<br>mysql&gt; select id 学号 from student;  //别名<br>mysql&gt; select id &#x27;学号&#x27; from student;<br></code></pre></td></tr></table></figure><h3 id="1-2-8删除操作"><a href="#1-2-8删除操作" class="headerlink" title="1.2.8删除操作"></a>1.2.8删除操作</h3><ul><li><p>删除记录:<code>delete from 表名 where 条件;</code></p></li><li><p>删除表:<code>drop table 表名;</code></p></li><li><p>删除数据库:<code>drop database 数据库名</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; delete from student where id=2; //删除id为2<br>Query OK, 1 row affected (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="1-2-9更新表中的记录"><a href="#1-2-9更新表中的记录" class="headerlink" title="1.2.9更新表中的记录"></a>1.2.9更新表中的记录</h3><p>命令格式： update 表名 set 字段=值，字段=值 where 条件;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; update student set id =2 where id=1; //修改id为1的修改为2<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><h3 id="1-2-10中文乱码问题"><a href="#1-2-10中文乱码问题" class="headerlink" title="1.2.10中文乱码问题"></a>1.2.10中文乱码问题</h3><p>首先查看数据库编码：<code>show variables like &#39;char%&#39;;</code><br>改成utf8格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set charactor_set_database=utf8;<br>set character_set_server=utf8;<br>alter database 数据库名 default character set utf8 collate utf8_general_ci;<br></code></pre></td></tr></table></figure><blockquote><p>注：想要实现中文不乱码，输入以上三行，重新建立表格，而之前的表格是无法再改为中文的。</p></blockquote><h3 id="1-2-11过滤重复"><a href="#1-2-11过滤重复" class="headerlink" title="1.2.11过滤重复"></a>1.2.11过滤重复</h3><p>在查询语句中使用distinct关键字来过滤重复的行。<br>命令格式：<code>select distinct * from 表名;</code></p><h1 id="2-SQL约束"><a href="#2-SQL约束" class="headerlink" title="2.SQL约束"></a>2.SQL约束</h1><p>用于规定数据表中的数据使用规则。如果存在违反约束规则，数据行为就会被约束终止</p><h2 id="2-1约束条件"><a href="#2-1约束条件" class="headerlink" title="2.1约束条件"></a>2.1约束条件</h2><h3 id="2-1-1NOT-NULL-非空约束-规定该数据段不能为空"><a href="#2-1-1NOT-NULL-非空约束-规定该数据段不能为空" class="headerlink" title="2.1.1NOT NULL 非空约束 规定该数据段不能为空"></a>2.1.1NOT NULL 非空约束 规定该数据段不能为空</h3><ul><li>创建时候的非空约束<br><code>CREATE TABLE Student(ID int not NULL, Name varchar(50) not NULL, Age int);</code></li></ul><ol><li><p>为表中的Age字段添加非空约束<br><code>ALTER TABLE Student MODIFY Age int NOT NULL;</code></p></li><li><p>删除表中的Age字段的非空约束<br><code>ALTER TABLE Student MODIFY Age int NULL;</code></p></li></ol><h3 id="2-1-2UNIQUE-保证某列的每行必须有唯一的值"><a href="#2-1-2UNIQUE-保证某列的每行必须有唯一的值" class="headerlink" title="2.1.2UNIQUE 保证某列的每行必须有唯一的值"></a>2.1.2UNIQUE 保证某列的每行必须有唯一的值</h3><ul><li>创建时候的唯一约束<br><code>CREATE TABLE Student( ID int NOT NULL, Name varchar(50) NOT NULL, Age int,UNIQUE (ID));</code></li></ul><ol><li>一个字段的唯一约束：</li></ol><ul><li><p>删除表中ID字段的唯一约束<br><code>ALTER TABLE Student DROP INDEX ID;</code></p></li><li><p>添加表中ID字段的唯一约束<br><code>ALTER TABLE Student ADD UNIQUE (ID);</code></p></li></ul><ol start="2"><li>多个字段的唯一约束：</li></ol><ul><li>添加表中ID和Name字段的唯一约束<br><code>ALTER TABLE Student ADD CONSTRAINT StuID UNIQUE (ID,Name);</code></li><li>删除表中ID和Name字段的唯一约束<br><code>ALTER TABLE Student DROP INDEX StuID ;</code></li></ul><blockquote><p>注：如果设置了两个字段都是非空约束和唯一约束，则相当于这两个字段都是主键，则其中第二个字段的设置就失效了。</p></blockquote><h3 id="2-1-3PRIMARY-KEY主键约束"><a href="#2-1-3PRIMARY-KEY主键约束" class="headerlink" title="2.1.3PRIMARY KEY主键约束"></a>2.1.3PRIMARY KEY主键约束</h3><p>实际上可以理解为UNIQUE和NOT NULL 的结合</p><blockquote><ol><li>唯一的标准数据库中的每一条记录</li><li>主键必须包含唯一的值</li><li>主键列中不能有包含NULL的值</li><li>每个表都应该有一个主键，并且每一个表只能有一个主键</li></ol></blockquote><ol><li><p>创建表时添加主键：<br><code>create table Student( ID int NOT NULL, Name varchar(50) NOT NULL, Age int, PRIMARY KEY (ID));</code></p></li><li><p>当表已经创建时，再设置主键约束</p></li></ol><ul><li><p>删除主键:<br><code>ALTER TABLE Student DROP PRIMARY KEY;</code></p></li><li><p>添加主键:<br><code>ALTER TABLE Student ADD PRIMARY KEY (ID);</code></p></li></ul><h3 id="2-1-4FOREIGN-KEY-外键约束"><a href="#2-1-4FOREIGN-KEY-外键约束" class="headerlink" title="2.1.4FOREIGN KEY 外键约束"></a>2.1.4FOREIGN KEY 外键约束</h3><p>保证一个表中的数据匹配另一个表中的值的参照完整性,<br>一个表中外键指向了另一个表中的主键（唯一约束）</p><blockquote><p>外键的优势:</p><ul><li>外键约束预防破坏表与表之间的行为</li><li>也能防止非法数据的插入，因为外键中的内容是指向表中的值之一</li></ul></blockquote><ol><li><p>删除表中的外键约束:<br><code>ALTER TABLE Orders DROP FOREIGN KEY fk_Orders;</code></p></li><li><p>撤销数据库中所有表的外键约束(不常用):<code>SET FOREIGN_KEY_CHECKS=0;</code>之前建立的表的外键约束都无发修改了，之后的设置都可以撤销了外键约束</p></li><li><p>添加表中的外键约束: <code>ALTER TABLE Orders ADD CONSTRAINT fk_Orders FOREIGN KEY (S_id) REFERENCES Student(ID);</code></p></li></ol><h1 id="3-多表联合查询"><a href="#3-多表联合查询" class="headerlink" title="3.多表联合查询"></a>3.多表联合查询</h1><p><img src="https://note.youdao.com/yws/api/personal/file/72495A09A9DC4A2CB6D4420033C87349?method=download&shareKey=41d7ec19f04106360487640d4705d12d" alt="连接方式"></p><p>首先建立两个表：<br>建立两个表:<br>表1 tcount_tbl(网站点击次数) :<code>create table tcount_tbl(id int,website varcahr(20));</code></p><table><thead><tr><th>website</th><th>count</th></tr></thead><tbody><tr><td>baidu</td><td>26</td></tr><tr><td>bilibili</td><td>35</td></tr><tr><td>bilibili</td><td>35</td></tr><tr><td>github</td><td>10</td></tr></tbody></table><p>表2 info_tbl(网站上教授的内容) :<code>create table info_tbl(id int,title varcahr(20),website  varcahr(20));</code></p><table><thead><tr><th>id</th><th>title</th><th>website</th></tr></thead><tbody><tr><td>1</td><td>c++</td><td>baidu</td></tr><tr><td>2</td><td>Linux</td><td>bilibili</td></tr><tr><td>3</td><td>C</td><td>bilibili</td></tr><tr><td>4</td><td>python</td><td>github</td></tr><tr><td>5</td><td>java</td><td>Google</td></tr></tbody></table><ol><li>内连接：查询两个表中相交的内容</li></ol><p>需要连接两张表进行联合查询，读取info_tbl表中所有website字段在tcount_tbl表中对应的count字段值，将info_tbl 作为a， tcount_tbl作为b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT a.id,a.website,b.count FROM info_tbl a INNER JOIN tcount_tbl b ON a.website = b.websit;<br>+----+----------+-------+<br>| id | website  | count |<br>+----+----------+-------+<br>|  1 | baidu    |    26 |<br>|  2 | bilibili |    35 |<br>|  3 | bilibili |    35 |<br>|  4 | github   |    10 |<br>+----+----------+-------+<br>4 rows in set (0.05 sec)<br></code></pre></td></tr></table></figure><ol start="2"><li>左连接<br>会读取a表中的所有内容，即使b表没有对应数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT a.id,a.website,b.count  FROM info_tbl a LEFT JOIN tcount_tbl b ON a.website = b.websit;<br>+----+----------+-------+<br>| id | website  | count |<br>+----+----------+-------+<br>|  1 | baidu    |    26 |<br>|  2 | bilibili |    35 |<br>|  3 | bilibili |    35 |<br>|  4 | github   |    10 |<br>|  5 | Google   | NULL  |<br>+----+----------+-------+<br>5 rows in set (0.03 sec)<br></code></pre></td></tr></table></figure></li><li>右连接<br>会读取b表中的所有内容，即使a表中没有对应数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT a.id,a.website,b.count  FROM info_tbl a RIGHT JOIN tcount_tbl b ON a.website = b.websit;<br>+------+----------+-------+<br>| id   | website  | count |<br>+------+----------+-------+<br>|    1 | baidu    |    26 |<br>|    2 | bilibili |    35 |<br>|    3 | bilibili |    35 |<br>| NULL | NULL     |    16 |<br>|    4 | github   |    10 |<br>+------+----------+-------+<br>5 rows in set (0.05 sec)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  0、基本指令</title>
      <link href="/posts/Linux/"/>
      <url>/posts/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看帮助命令"><a href="#1-查看帮助命令" class="headerlink" title="1.查看帮助命令"></a>1.查看帮助命令</h1><p><code>man man</code>查看帮助内容 </p><h1 id="2-常用系统工作命令"><a href="#2-常用系统工作命令" class="headerlink" title="2.常用系统工作命令"></a>2.常用系统工作命令</h1><h2 id="2-1echo命令"><a href="#2-1echo命令" class="headerlink" title="2.1echo命令"></a>2.1echo命令</h2><p>  用于在终端上输出字符串或者变量提取的值 格式：<code>echo [字符串|$变量]</code></p>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo Linux.com <span class="hljs-regexp">//</span>输出Linux.com<br>echo <span class="hljs-variable">$SHELL</span>     <span class="hljs-regexp">//</span>输出 <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><h2 id="2-2date命令"><a href="#2-2date命令" class="headerlink" title="2.2date命令"></a>2.2date命令</h2><p>  用于在终端上显示及其设置系统的时间或者日期 格式：<code>date [选项][+指定格式]</code></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>%t</td><td>跳格</td></tr><tr><td>%H</td><td>小时(24)</td></tr><tr><td>%I</td><td>小时(12)</td></tr><tr><td>%M</td><td>分钟</td></tr><tr><td>%S</td><td>秒</td></tr><tr><td>%j</td><td>今年的第几天</td></tr></tbody></table>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">date</span> //查看当前的时间<br><span class="hljs-attribute">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>  //<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">14</span> <span class="hljs-number">22</span>:<span class="hljs-number">00</span>:<span class="hljs-number">53</span><br><span class="hljs-attribute">date</span> -s  <span class="hljs-string">&quot;20200414 8:30:00&quot;</span>  //以管理员的权限设置当前时间为<span class="hljs-number">2020</span>年 <span class="hljs-number">04</span>月 <span class="hljs-number">14</span>日 星期二 <span class="hljs-number">22</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00</span> CST<br><span class="hljs-attribute">date</span> +%j  //查看今天是当年的第几天<br></code></pre></td></tr></table></figure><h2 id="2-3reboot命令"><a href="#2-3reboot命令" class="headerlink" title="2.3reboot命令"></a>2.3reboot命令</h2><p>   用于重启系统,在管理员权限下 格式<code>reboot</code></p><h2 id="2-4poweroff命令"><a href="#2-4poweroff命令" class="headerlink" title="2.4poweroff命令"></a>2.4poweroff命令</h2><p>   用于重启系统,在管理员权限下 格式<code>poweroff </code></p><h2 id="2-5wget命令"><a href="#2-5wget命令" class="headerlink" title="2.5wget命令"></a>2.5wget命令</h2><p>   用于在终端上下载网络文件 格式<code>wget [参数] 下载地址</code></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-b</td><td>后台下载模式</td></tr><tr><td>-p</td><td>下载到指定目录</td></tr><tr><td>-t</td><td>最大的连接次数</td></tr><tr><td>-c</td><td>断点续传</td></tr><tr><td>-p</td><td>下载界面上的所有资源</td></tr><tr><td>-r</td><td>递归下载</td></tr></tbody></table>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>www.linuxprobe.com<span class="hljs-regexp">/docs/</span>LinuxProbe. pdf <span class="hljs-regexp">//</span>下载此书的PDF文档<br></code></pre></td></tr></table></figure><h2 id="2-6PS命令"><a href="#2-6PS命令" class="headerlink" title="2.6PS命令"></a>2.6PS命令</h2><p>  用于查看系统中的进程状态 格式<code>ps [参数]</code></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有进程(包括其他用户的进程)</td></tr><tr><td>-u</td><td>用户以及其他详细信息</td></tr><tr><td>-x</td><td>显示没有控制终端的进程</td></tr></tbody></table><h2 id="2-7top命令"><a href="#2-7top命令" class="headerlink" title="2.7top命令"></a>2.7top命令</h2><p>   用于动态地监视进程活动与系统负载等信息,相当于任务管理器 格式<code>top</code> </p><h2 id="2-8pidof命令"><a href="#2-8pidof命令" class="headerlink" title="2.8pidof命令"></a>2.8pidof命令</h2><p>   用于查询某一个指定服务器进程的PID 格式<code>pidof [参数][服务器名称]</code></p>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pidof bash <span class="hljs-regexp">//</span>查看本地bash的PID<br></code></pre></td></tr></table></figure><h2 id="2-9kill命令"><a href="#2-9kill命令" class="headerlink" title="2.9kill命令"></a>2.9kill命令</h2><p>   用于终止某个指定PID的服务进程 格式为<code>kill [参数][进程PID]</code></p>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill <span class="hljs-number">2873</span> <span class="hljs-regexp">//</span>强制停止bash服务<br></code></pre></td></tr></table></figure><h2 id="2-10killall命令"><a href="#2-10killall命令" class="headerlink" title="2.10killall命令"></a>2.10killall命令</h2><p>   用于终止某指定名称的服务所对应的全部进程 格式为<code>killall [参数][进程名称]</code></p><h1 id="3-系统状态监测命令"><a href="#3-系统状态监测命令" class="headerlink" title="3.系统状态监测命令"></a>3.系统状态监测命令</h1><h2 id="3-1ifconfig命令"><a href="#3-1ifconfig命令" class="headerlink" title="3.1ifconfig命令"></a>3.1ifconfig命令</h2><p>   用于获取网站配置与网路状态等信息 格式<code>ifconfig</code></p><h2 id="3-2uname命令"><a href="#3-2uname命令" class="headerlink" title="3.2uname命令"></a>3.2uname命令</h2><p>   用于查看系统内核与系统版本等信息 格式<code>uname -a</code></p><h2 id="3-3uptime命令"><a href="#3-3uptime命令" class="headerlink" title="3.3uptime命令"></a>3.3uptime命令</h2><p>   用于查看系统的负载状态,负载的状态越低越好，尽量不要超过1 格式<code>uptime</code></p><h2 id="3-4free命令"><a href="#3-4free命令" class="headerlink" title="3.4free命令"></a>3.4free命令</h2><p>   用于查看系统中内存的使用情况 格式<code>free -h</code></p><h2 id="3-5who命令"><a href="#3-5who命令" class="headerlink" title="3.5who命令"></a>3.5who命令</h2><p>   用于查看登录主机的用户终端信息 格式<code>who</code></p><h2 id="3-6last命令"><a href="#3-6last命令" class="headerlink" title="3.6last命令"></a>3.6last命令</h2><p>   用于查看所有系统的登录记录 格式<code>last</code></p><h2 id="3-7history命令"><a href="#3-7history命令" class="headerlink" title="3.7history命令"></a>3.7history命令</h2><p>   用来显示历史执行的命令 格式<code>history</code><br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">history <br>history -c //清空历史记录<br></code></pre></td></tr></table></figure></p><h2 id="3-8sosreport命令"><a href="#3-8sosreport命令" class="headerlink" title="3.8sosreport命令"></a>3.8sosreport命令</h2><p>   用于收集系统配置架构信息并输出诊断文档 格式<code>sosreport</code></p><h1 id="4-工作目录贴换命令"><a href="#4-工作目录贴换命令" class="headerlink" title="4.工作目录贴换命令"></a>4.工作目录贴换命令</h1><h2 id="4-1pwd命令"><a href="#4-1pwd命令" class="headerlink" title="4.1pwd命令"></a>4.1pwd命令</h2><p>   用于显示用户当前所有的工作目录 格式<code>pwd</code></p><h2 id="4-2cd命令"><a href="#4-2cd命令" class="headerlink" title="4.2cd命令"></a>4.2cd命令</h2><p>   用户切换工作路径 格式<code>cd [目录名]</code></p><h2 id="4-3ls命令"><a href="#4-3ls命令" class="headerlink" title="4.3ls命令"></a>4.3ls命令</h2><p>   用显示目录文件中文件的信息 格式<code>ls [选项][文件]</code></p><blockquote><p> -a 查看全部文件(包括隐藏文件)<br>    -l 查看文件的属性、大小等详细信息<br>    -la 查看全部文件(包括隐藏文件)的属性、大小等详细信息<br>    -ld 查看目录信息</p></blockquote><h1 id="5-文本文件编译命令"><a href="#5-文本文件编译命令" class="headerlink" title="5.文本文件编译命令"></a>5.文本文件编译命令</h1><h2 id="5-1cat命令"><a href="#5-1cat命令" class="headerlink" title="5.1cat命令"></a>5.1cat命令</h2><p>   用于查看纯文本(内容比较小的) 格式为<code>cat [选项][文件]</code><br>   <code>cat -n mysql_init.c</code>  //-n 显示行号</p><h2 id="5-2more命令"><a href="#5-2more命令" class="headerlink" title="5.2more命令"></a>5.2more命令</h2><p>   用来查询纯文本(内容比较多的) 格式为<code>more [选项][文件]</code><br>   <code>more mysql_init.c</code> //注：最下面有百分比来提示阅读多少</p><h2 id="5-3head命令"><a href="#5-3head命令" class="headerlink" title="5.3head命令"></a>5.3head命令</h2><p>   用于查看纯文本(前n行) 格式为<code>head [选项][文件]</code><br>   <code> head -n 10 mysql_init.c</code> 查看文件中前10行</p><h2 id="5-4tail命令"><a href="#5-4tail命令" class="headerlink" title="5.4tail命令"></a>5.4tail命令</h2><p>   用于查看纯文本文档的后N行或持续刷新内容 格式为<code>tail [选项][文件]</code>。注：tail命令和head十分相似</p><h2 id="5-5tr命令"><a href="#5-5tr命令" class="headerlink" title="5.5tr命令"></a>5.5tr命令</h2><p>   用于替换文本文件中的字符 格式<code>tr  [原字符]  [目标字符]</code><br>   将aa.txt文件中的字符a替换为A<code>cat aa.txt | tr a A</code></p><h2 id="6-6wc命令"><a href="#6-6wc命令" class="headerlink" title="6.6wc命令"></a>6.6wc命令</h2><p>   用于统计文本的行数、字数、字节数 格式<code>wc [参数][文本]</code></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-l</td><td>只显示行数</td></tr><tr><td>-w</td><td>只显示单词数</td></tr><tr><td>-c</td><td>只显示字节数</td></tr></tbody></table><h2 id="5-7stat命令"><a href="#5-7stat命令" class="headerlink" title="5.7stat命令"></a>5.7stat命令</h2><p>   用于查看文件的具体存储信息和时间等信息 格式<code>stat 文件名称</code></p><h2 id="5-8cu命令"><a href="#5-8cu命令" class="headerlink" title="5.8cu命令"></a>5.8cu命令</h2><p>   用于按”列”提取字符 格式<code>cut [参数][文本]</code>，使用-f参数来设置需要看的列数，-d来设置间隔符号，-f来设置需要看的行数<br>   <code>cut -d: -f1 /etc/passwd</code> //用来提取passwd下保存的用户信息</p><h2 id="5-9diff命令"><a href="#5-9diff命令" class="headerlink" title="5.9diff命令"></a>5.9diff命令</h2><p>   用于比较多文本的差异 格式<code>diff [参数]文件</code></p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">diff --brief 文件1 文件2  //来确定两个文件是否不同<br>diff -c 文件1 文件2    //-c来详细比较多文件的差异之处<br></code></pre></td></tr></table></figure><h1 id="6-文件目录管理命令"><a href="#6-文件目录管理命令" class="headerlink" title="6.文件目录管理命令"></a>6.文件目录管理命令</h1><h2 id="6-1touch命令"><a href="#6-1touch命令" class="headerlink" title="6.1touch命令"></a>6.1touch命令</h2><p>   用于创建空白文件或设置文件的时间 格式<code>touch [选项][文件]</code></p><h2 id="6-2mkdir命令"><a href="#6-2mkdir命令" class="headerlink" title="6.2mkdir命令"></a>6.2mkdir命令</h2><p>   用于创建空白的目录 格式<code>mkdir [选项]目录</code><br>   使用-p参数来进行递归创建具有嵌套层次关系的文件，例如： <code>mkdir -p aa/bb/cc</code> </p><h2 id="6-3cp命令"><a href="#6-3cp命令" class="headerlink" title="6.3cp命令"></a>6.3cp命令</h2><p>   同于复制文件 格式<code>cp [参数]源文件 目标文件</code></p><blockquote><p>注意：<br>       目标文件是目录，会把源文件复制到该目录下<br>       目标文件也是普通文件，会询问是否要覆盖它<br>       目标文件不存在，则执行正常复制操作</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-p</td><td>保留原始文件的属性</td></tr><tr><td>-d</td><td>若对象为”链接文件”，则就保留”链接文件”的属性</td></tr><tr><td>-r</td><td>递归持续复制（常用目录）</td></tr><tr><td>-i</td><td>如果目标文件存在则询问是否复制</td></tr><tr><td>-a</td><td>相当于-pdr(p、d、r为上述参数)</td></tr></tbody></table><h2 id="6-4mv命令"><a href="#6-4mv命令" class="headerlink" title="6.4mv命令"></a>6.4mv命令</h2><p>   用于剪切文件或者文件的重命名 格式<code>mv [选项] 源文件  [目标文件|目标文件名]</code></p><h2 id="6-5rm命令"><a href="#6-5rm命令" class="headerlink" title="6.5rm命令"></a>6.5rm命令</h2><p>   用于删除文件或目录 格式<code>rm [选项] 文件</code><br>   rm -i 文件   //-i删除时提示内容<br>   rm -f  文件 //-f强制删除<br>   rm -r mul   //-r删除目录</p><h2 id="6-7dd命令"><a href="#6-7dd命令" class="headerlink" title="6.7dd命令"></a>6.7dd命令</h2><p>   用于按照指定大小和个数的数据块来复制文件或者转换文件 格式<code>dd [参数]</code><br>   Linux系统下有/ect/zero的设备文件,它不占系统存储空间，但是可以为我们提供无穷无尽的数据资源，同时它也就作为了dd的输出文件。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>if</td><td>输入的文件名称</td></tr><tr><td>of</td><td>输出的文件名称</td></tr><tr><td>bs</td><td>设置每个”块”的大小</td></tr><tr><td>count</td><td>设置要复制”块”的个数</td></tr></tbody></table><p>   从/dec/zero设备文件中取一个大小为560M的数据块，然后并保存名为file文件。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dd if/ect/zero of=file count=1  bs=560M <br></code></pre></td></tr></table></figure></p><h2 id="6-8file命令"><a href="#6-8file命令" class="headerlink" title="6.8file命令"></a>6.8file命令</h2><p>   用于查看文件的类型 格式<code>file 文件名</code>，例如:<code>file aa.txt</code></p><h1 id="7-打包压缩与搜索命令"><a href="#7-打包压缩与搜索命令" class="headerlink" title="7.打包压缩与搜索命令"></a>7.打包压缩与搜索命令</h1><blockquote><p>tar压缩指令和find查找指定，请移步其他文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客:使用Typecho搭建个人网站</title>
      <link href="/posts/%E5%8D%9A%E5%AE%A2/Typecho/"/>
      <url>/posts/%E5%8D%9A%E5%AE%A2/Typecho/</url>
      
        <content type="html"><![CDATA[<p>以前我是使用<code>Hexo</code>和<code>GitHub</code>来搭建的个人网站的,这里介绍用<code>Typecho</code>来搭建。准备工作，需要一台云服务器。这里我使用的是腾讯云服务器，远程连接到云服务器上，给你推荐几个比较好用的连接工具<code>FinalShell、Xshell 5、SecureCRTP、putty</code>一共四款工具。个人比较喜欢<code>Xshell5</code>。</p><h1 id="1-安装宝塔面板"><a href="#1-安装宝塔面板" class="headerlink" title="1.安装宝塔面板"></a>1.安装<a href="https://www.bt.cn/">宝塔面板</a></h1><ol><li><p>首先远程连接云服务器</p></li><li><p>在命令行输入:</p><p>  <code>Centos</code>安装脚本</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> wget &amp;&amp; wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> install.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p> <code>Ubuntu/Deepin</code>安装脚本</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; sudo bash install.sh<br></code></pre></td></tr></table></figure></li><li><p>注意安装完成后的地址、用户名和密码。如果登录不上，去放开端下面端口</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Bt</span>-Panel: http://<span class="hljs-number">49.232.136.20:8888</span>/<span class="hljs-number">05</span>e<span class="hljs-number">1</span>fe<span class="hljs-number">2</span>d<br><span class="hljs-attribute">username</span>: ts<span class="hljs-number">75</span>d<span class="hljs-number">74</span>o<br><span class="hljs-attribute">password</span>: d<span class="hljs-number">170</span>b<span class="hljs-number">182</span><br><span class="hljs-attribute">Warning</span>:<br><span class="hljs-attribute">If</span> you cannot access the panel, <br><span class="hljs-attribute">release</span> the following port (<span class="hljs-number">8888</span>|<span class="hljs-number">888</span>|<span class="hljs-number">80</span>|<span class="hljs-number">443</span>|<span class="hljs-number">20</span>|<span class="hljs-number">21</span>) in the security group<br></code></pre></td></tr></table></figure></li><li><p>成功登录到宝塔面板</p></li><li><p>根据提示安装<code>Nginx、Mysql、php</code></p></li></ol><h1 id="2-搭建基于Typecho的网站"><a href="#2-搭建基于Typecho的网站" class="headerlink" title="2.搭建基于Typecho的网站"></a>2.搭建基于Typecho的网站</h1><ol><li>下载<code>Typecho</code>包 <a href="http://typecho.org/download">http://typecho.org/download</a></li><li>寻找自己喜欢的模版<a href="https://typecho.me/">https://typecho.me/</a></li><li>在宝塔面板点击【网站】，然后添加站点<br><img src="https://img-blog.csdnimg.cn/20200505002044131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>在宝塔面板上点击【文件】，在创建网站的根目录下上传下载好的Typecho包和主题</li></ol><blockquote><p>注意：将<code>Typecho</code>包里面的文件拷贝到网站根目录下，而主题则在<code>Typecho</code>包里面的<code>user</code>下的<code>themes</code>里面</p></blockquote><ol start="5"><li>在浏览器输入域名，进行安装<code>Typecho</code>和配置网站</li><li>接下面的操作，参考主题的配置几乎都有的</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Typecho </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客:使用Hexo+BlueLake+Github搭建自己的个人博客</title>
      <link href="/posts/%E5%8D%9A%E5%AE%A2/Hexo/"/>
      <url>/posts/%E5%8D%9A%E5%AE%A2/Hexo/</url>
      
        <content type="html"><![CDATA[<h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><ul><li><p>创建一个<a href="https://github.com/">GitHub</a>账户</p></li><li><p>下载安装 <a href="https://nodejs.org/"> Node.js</a> (包含 npm)</p></li><li><p>安装<a href="https://git-scm.com/">Git</a> </p></li></ul><h4 id="2-打开git-bash命令行输入"><a href="#2-打开git-bash命令行输入" class="headerlink" title="2.打开git bash命令行输入:"></a>2.打开git bash命令行输入:</h4><blockquote><p>注:在任意位置打开git bash输入即可。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v  //查看node.js的版本号<br>npm -v   //查看npm的版本号<br>npm install -g cnpm --registry=https://registry.npm.taobao.org   //安装cnpm淘宝源<br>cnpm -v  //查看版本号<br>cnpm install -g hexo-cli  //安装hexo博客框架<br>hexo -v //查看hexo的版本号<br></code></pre></td></tr></table></figure><h4 id="3-新建本地博客文件夹Blog"><a href="#3-新建本地博客文件夹Blog" class="headerlink" title="3.新建本地博客文件夹Blog"></a>3.新建本地博客文件夹Blog</h4><blockquote><p>注：在电脑上自己找一个位置，进行新建文件夹Blog。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init //初始化博客<br><br>cnpm install --save hexo-deployer-git //安装git部署插件<br>hexo server -p 80   <span class="hljs-comment"># 启动服务, -p 80 表示端口号为 80，默认不加端口号是 4000</span><br>hexo generate //生成静态文件<br>hexo deploy //部署到远程站点<br></code></pre></td></tr></table></figure><blockquote><p>在Blog目录下先进行初始化<code>hexo init</code> ,然后安装：<code>cnpm install --save hexo-deployer-git</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200225232705464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在Bolg目录下安装"></p><h4 id="4-GitHub新建仓库"><a href="#4-GitHub新建仓库" class="headerlink" title="4.GitHub新建仓库"></a>4.GitHub新建仓库</h4><p>打开<a href="https://github.com/new">https://github.com/new</a>来创建自己的仓库。<br><img src="https://img-blog.csdnimg.cn/20200226113103483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="创建博客"><br>修改Bolg目录下的，_config.yml文件<br><img src="https://img-blog.csdnimg.cn/20200226113942664.png" alt="修改目录下的_config.yml文件"></p><blockquote><p>注意：仓库的地址可以是使用https协议也可以使用ssh协议。区别在于使用https协议每次部署需要输入<br>GitHub的账户名和密码密码。</p></blockquote><p>这里我使用的HTTPS协议，接下来命令行输入：<code>hexo d</code>进行部署；</p><blockquote><p>注意下来需要输入你的GitHub用户名和密码。<br><img src="https://img-blog.csdnimg.cn/20200226114503708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200410210016199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMwODEw,size_16,color_FFFFFF,t_70" alt="本地浏览"><br>更换自己喜欢的主题：<br>git clone <a href="https://github.com/chaooo/hexo-theme-BlueLake.git">https://github.com/chaooo/hexo-theme-BlueLake.git</a> themes/BlueLake<br>参看下面链接进行配置<br><a href="https://github.com/chaooo/hexo-theme-BlueLake">https://github.com/chaooo/hexo-theme-BlueLake</a><br><a href="https://blog.luuman.club/2015/12/27/GitHubHexo/">https://blog.luuman.club/2015/12/27/GitHubHexo/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
